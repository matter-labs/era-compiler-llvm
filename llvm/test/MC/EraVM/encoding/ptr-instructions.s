; RUN: llvm-mc -arch=eravm --show-encoding < %s | FileCheck %s

  .text
foo:

; mnemonics (incl. ".s" modifier)
  addp      r1, r2, r3
  subp      r1, r2, r3
  shrnk     r1, r2, r3
  pack      r1, r2, r3
  addp.s    42, r2, r3
  subp.s    42, r2, r3
  shrnk.s   42, r2, r3
  pack.s    42, r2, r3

; operands (non-swapped version: 4 src modes x 4 dst modes)
  addp      r1, r2, r3
  addp      stack[r1 + 1], r2, r3
  addp      stack-[r1 + 1], r2, r3
  addp      stack-=[r1 + 1], r2, r3
  addp      r1, r2, stack[r3 + 1]
  addp      stack[r1 + 1], r2, stack[r3 + 1]
  addp      stack-[r1 + 1], r2, stack[r3 + 1]
  addp      stack-=[r1 + 1], r2, stack[r3 + 1]
  addp      r1, r2, stack-[r3 + 1]
  addp      stack[r1 + 1], r2, stack-[r3 + 1]
  addp      stack-[r1 + 1], r2, stack-[r3 + 1]
  addp      stack-=[r1 + 1], r2, stack-[r3 + 1]
  addp      r1, r2, stack+=[r3 + 1]
  addp      stack[r1 + 1], r2, stack+=[r3 + 1]
  addp      stack-[r1 + 1], r2, stack+=[r3 + 1]
  addp      stack-=[r1 + 1], r2, stack+=[r3 + 1]

; operands (swapped version: 6 src modes x 4 dst modes)
  addp.s    r1, r2, r3
  addp.s    42, r2, r3
  addp.s    stack[r1 + 1], r2, r3
  addp.s    stack-[r1 + 1], r2, r3
  addp.s    stack-=[r1 + 1], r2, r3
  addp.s    code[r1 + 1], r2, r3
  addp.s    r1, r2, stack[r3 + 1]
  addp.s    42, r2, stack[r3 + 1]
  addp.s    stack[r1 + 1], r2, stack[r3 + 1]
  addp.s    stack-[r1 + 1], r2, stack[r3 + 1]
  addp.s    stack-=[r1 + 1], r2, stack[r3 + 1]
  addp.s    code[r1 + 1], r2, stack[r3 + 1]
  addp.s    r1, r2, stack-[r3 + 1]
  addp.s    42, r2, stack-[r3 + 1]
  addp.s    stack[r1 + 1], r2, stack-[r3 + 1]
  addp.s    stack-[r1 + 1], r2, stack-[r3 + 1]
  addp.s    stack-=[r1 + 1], r2, stack-[r3 + 1]
  addp.s    code[r1 + 1], r2, stack-[r3 + 1]
  addp.s    r1, r2, stack+=[r3 + 1]
  addp.s    42, r2, stack+=[r3 + 1]
  addp.s    stack[r1 + 1], r2, stack+=[r3 + 1]
  addp.s    stack-[r1 + 1], r2, stack+=[r3 + 1]
  addp.s    stack-=[r1 + 1], r2, stack+=[r3 + 1]
  addp.s    code[r1 + 1], r2, stack+=[r3 + 1]

; CHECK:  .text
; CHECK:foo:

; CHECK:  addp      r1, r2, r3              ; encoding: [0x00,0x00,0x00,0x00,0x03,0x21,0x03,0x4f]
; CHECK:  subp      r1, r2, r3              ; encoding: [0x00,0x00,0x00,0x00,0x03,0x21,0x03,0x7f]
; CHECK:  shrnk     r1, r2, r3              ; encoding: [0x00,0x00,0x00,0x00,0x03,0x21,0x03,0xdf]
; CHECK:  pack      r1, r2, r3              ; encoding: [0x00,0x00,0x00,0x00,0x03,0x21,0x03,0xaf]
; CHECK:  addp.s    42, r2, r3              ; encoding: [0x00,0x00,0x00,0x2a,0x03,0x20,0x03,0x70]
; CHECK:  subp.s    42, r2, r3              ; encoding: [0x00,0x00,0x00,0x2a,0x03,0x20,0x03,0xa0]
; CHECK:  shrnk.s   42, r2, r3              ; encoding: [0x00,0x00,0x00,0x2a,0x03,0x20,0x04,0x00]
; CHECK:  pack.s    42, r2, r3              ; encoding: [0x00,0x00,0x00,0x2a,0x03,0x20,0x03,0xd0]

; CHECK:  addp      r1, r2, r3                           ; encoding: [0x00,0x00,0x00,0x00,0x03,0x21,0x03,0x4f]
; CHECK:  addp      stack[1 + r1], r2, r3                ; encoding: [0x00,0x00,0x00,0x01,0x03,0x21,0x03,0x67]
; CHECK:  addp      stack-[1 + r1], r2, r3               ; encoding: [0x00,0x00,0x00,0x01,0x03,0x21,0x03,0x5f]
; CHECK:  addp      stack-=[1 + r1], r2, r3              ; encoding: [0x00,0x00,0x00,0x01,0x03,0x21,0x03,0x57]
; CHECK:  addp      r1, r2, stack[1 + r3]                ; encoding: [0x00,0x01,0x00,0x00,0x03,0x21,0x03,0x55]
; CHECK:  addp      stack[1 + r1], r2, stack[1 + r3]     ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x6d]
; CHECK:  addp      stack-[1 + r1], r2, stack[1 + r3]    ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x65]
; CHECK:  addp      stack-=[1 + r1], r2, stack[1 + r3]   ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x5d]
; CHECK:  addp      r1, r2, stack-[1 + r3]               ; encoding: [0x00,0x01,0x00,0x00,0x03,0x21,0x03,0x53]
; CHECK:  addp      stack[1 + r1], r2, stack-[1 + r3]    ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x6b]
; CHECK:  addp      stack-[1 + r1], r2, stack-[1 + r3]   ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x63]
; CHECK:  addp      stack-=[1 + r1], r2, stack-[1 + r3]  ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x5b]
; CHECK:  addp      r1, r2, stack+=[1 + r3]              ; encoding: [0x00,0x01,0x00,0x00,0x03,0x21,0x03,0x51]
; CHECK:  addp      stack[1 + r1], r2, stack+=[1 + r3]   ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x69]
; CHECK:  addp      stack-[1 + r1], r2, stack+=[1 + r3]  ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x61]
; CHECK:  addp      stack-=[1 + r1], r2, stack+=[1 + r3] ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x59]

; CHECK:  addp.s    r1, r2, r3                           ; encoding: [0x00,0x00,0x00,0x00,0x03,0x21,0x03,0x50]
; CHECK:  addp.s    42, r2, r3                           ; encoding: [0x00,0x00,0x00,0x2a,0x03,0x20,0x03,0x70]
; CHECK:  addp.s    stack[1 + r1], r2, r3                ; encoding: [0x00,0x00,0x00,0x01,0x03,0x21,0x03,0x68]
; CHECK:  addp.s    stack-[1 + r1], r2, r3               ; encoding: [0x00,0x00,0x00,0x01,0x03,0x21,0x03,0x60]
; CHECK:  addp.s    stack-=[1 + r1], r2, r3              ; encoding: [0x00,0x00,0x00,0x01,0x03,0x21,0x03,0x58]
; CHECK:  addp.s    code[r1+1], r2, r3                   ; encoding: [0x00,0x00,0x00,0x01,0x03,0x21,0x03,0x78]
; CHECK:  addp.s    r1, r2, stack[1 + r3]                ; encoding: [0x00,0x01,0x00,0x00,0x03,0x21,0x03,0x56]
; CHECK:  addp.s    42, r2, stack[1 + r3]                ; encoding: [0x00,0x01,0x00,0x2a,0x03,0x20,0x03,0x76]
; CHECK:  addp.s    stack[1 + r1], r2, stack[1 + r3]     ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x6e]
; CHECK:  addp.s    stack-[1 + r1], r2, stack[1 + r3]    ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x66]
; CHECK:  addp.s    stack-=[1 + r1], r2, stack[1 + r3]   ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x5e]
; CHECK:  addp.s    code[r1+1], r2, stack[1 + r3]        ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x7e]
; CHECK:  addp.s    r1, r2, stack-[1 + r3]               ; encoding: [0x00,0x01,0x00,0x00,0x03,0x21,0x03,0x54]
; CHECK:  addp.s    42, r2, stack-[1 + r3]               ; encoding: [0x00,0x01,0x00,0x2a,0x03,0x20,0x03,0x74]
; CHECK:  addp.s    stack[1 + r1], r2, stack-[1 + r3]    ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x6c]
; CHECK:  addp.s    stack-[1 + r1], r2, stack-[1 + r3]   ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x64]
; CHECK:  addp.s    stack-=[1 + r1], r2, stack-[1 + r3]  ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x5c]
; CHECK:  addp.s    code[r1+1], r2, stack-[1 + r3]       ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x7c]
; CHECK:  addp.s    r1, r2, stack+=[1 + r3]              ; encoding: [0x00,0x01,0x00,0x00,0x03,0x21,0x03,0x52]
; CHECK:  addp.s    42, r2, stack+=[1 + r3]              ; encoding: [0x00,0x01,0x00,0x2a,0x03,0x20,0x03,0x72]
; CHECK:  addp.s    stack[1 + r1], r2, stack+=[1 + r3]   ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x6a]
; CHECK:  addp.s    stack-[1 + r1], r2, stack+=[1 + r3]  ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x62]
; CHECK:  addp.s    stack-=[1 + r1], r2, stack+=[1 + r3] ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x5a]
; CHECK:  addp.s    code[r1+1], r2, stack+=[1 + r3]      ; encoding: [0x00,0x01,0x00,0x01,0x03,0x21,0x03,0x7a]
