; RUN: not llvm-mc -triple eravm -o - < %s 2>&1 > %t.stdout | FileCheck %s
; RUN: FileCheck --check-prefix=STDOUT %s < %t.stdout

; STDOUT:     .text
; STDOUT-NOT: {{.+}}

; Note: "sub ... 42, r2, r3" is used instead of "sub ... r1, r2, r3"
;       to make sure the instructions are rejected not because of
;       combination of swap modifier and two register inputs.

; reject spaces from the mnemonic up to the condition code
  sub    .s      42, r3, r3
  sub.s    !.lt  42, r2, r3
  sub.s!   .lt   42, r2, r3
  sub.s  !  .lt  42, r2, r3

; reject incorrect order of modifiers
  sub.s.lt!      42, r3, r3
  sub!.s.lt      42, r3, r3
  sub!.lt.s      42, r3, r3
  sub.lt.s!      42, r3, r3
  sub.lt!.s      42, r3, r3

  sub.lt.s       42, r3, r3
  sub.lt!        42, r3, r3
  sub!.s         42, r3, r3

; reject duplicated modifiers (note that immediate operands are only parsed for
; relevant mnemonics)
  sub.s.s.s      r1, r2, r3
  sub.lt.lt      r1, r2, r3
  sub.s.lt.s     r1, r2, r3
  sub.s!!.lt     r1, r2, r3
  sub.s.s.s      42, r2, r3
  sub.lt.lt      42, r2, r3
  sub.s.lt.s     42, r2, r3
  sub.s!!.lt     42, r2, r3

; invalid instruction-specific modifiers
  log.abc            r3, r4
  log.i.abc          r3, r4
  log.i.i            r3, r4
  logL1.abc          r3, r4
  logL1.i.abc        r3, r4
  logL1.i.i          r3, r4
  callf.abc          r3, r4, @foo

; missing mandatory modifier
  ldm                r1, r2
  ldmi               r1, r2, r3
  stm                r1, r2
  stmi               r1, r2, r3
; multiple modifiers
  ldm.h.st           r1, r2
  ldm.h.ah           r1, r2
  ldm.st.h           r1, r2

; Modifiers specific to far calls
  callf .st.sh    r1, r2, @foo ; unexpected space
  callf. st.sh    r1, r2, @foo ; unexpected space
  callf.st .sh    r1, r2, @foo ; unexpected space
  callf.st.sh .lt r1, r2, @foo ; unexpected space
  callf.lt.st.sh  r1, r2, @foo ; invalid position of predicate
  callf.st.lt.sh  r1, r2, @foo ; invalid position of predicate
  callf.st.st.sh  r1, r2, @foo ; duplicated modifiers
  callf.sh.st.sh  r1, r2, @foo ; duplicated modifiers
  callf.st.st     r1, r2, @foo ; duplicated modifiers

; COM: Autogenerated checks below, see README.md.
; CHECK:       <stdin>:{{[0-9]+}}:10: error: cannot parse operand
; CHECK-NEXT:    sub    .s      42, r3, r3
; CHECK-NEXT:           ^
; CHECK:       <stdin>:{{[0-9]+}}:12: error: unexpected whitespace before '!'
; CHECK-NEXT:    sub.s    !.lt  42, r2, r3
; CHECK-NEXT:             ^
; CHECK:       <stdin>:{{[0-9]+}}:12: error: unexpected whitespace before condition code
; CHECK-NEXT:    sub.s!   .lt   42, r2, r3
; CHECK-NEXT:             ^
; CHECK:       <stdin>:{{[0-9]+}}:10: error: unexpected whitespace before '!'
; CHECK-NEXT:    sub.s  !  .lt  42, r2, r3
; CHECK-NEXT:           ^
; CHECK:       <stdin>:{{[0-9]+}}:11: error: unexpected '!' after condition code
; CHECK-NEXT:    sub.s.lt!      42, r3, r3
; CHECK-NEXT:            ^
; CHECK:       <stdin>:{{[0-9]+}}:7: error: cannot parse operand
; CHECK-NEXT:    sub!.s.lt      42, r3, r3
; CHECK-NEXT:        ^
; CHECK:       <stdin>:{{[0-9]+}}:7: error: cannot parse operand
; CHECK-NEXT:    sub!.lt.s      42, r3, r3
; CHECK-NEXT:        ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.lt.s!      42, r3, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: unexpected '!' after condition code
; CHECK-NEXT:    sub.lt!.s      42, r3, r3
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.lt.s       42, r3, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: unexpected '!' after condition code
; CHECK-NEXT:    sub.lt!        42, r3, r3
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:7: error: cannot parse operand
; CHECK-NEXT:    sub!.s         42, r3, r3
; CHECK-NEXT:        ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: sub.s.s.s
; CHECK-NEXT:    sub.s.s.s      r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: sub.lt
; CHECK-NEXT:    sub.lt.lt      r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: sub.s.lt.s
; CHECK-NEXT:    sub.s.lt.s     r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: cannot parse operand
; CHECK-NEXT:    sub.s!!.lt     r1, r2, r3
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.s.s.s      42, r2, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.lt.lt      42, r2, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.s.lt.s     42, r2, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: cannot parse operand
; CHECK-NEXT:    sub.s!!.lt     42, r2, r3
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: log.abc
; CHECK-NEXT:    log.abc            r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: log.i.abc
; CHECK-NEXT:    log.i.abc          r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: log.i.i
; CHECK-NEXT:    log.i.i            r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: logl1.abc
; CHECK-NEXT:    logL1.abc          r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: logl1.i.abc
; CHECK-NEXT:    logL1.i.abc        r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: logl1.i.i
; CHECK-NEXT:    logL1.i.i          r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:30: error: cannot parse operand
; CHECK-NEXT:    callf.abc          r3, r4, @foo
; CHECK-NEXT:                               ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: ldm
; CHECK-NEXT:    ldm                r1, r2
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: ldmi
; CHECK-NEXT:    ldmi               r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: stm
; CHECK-NEXT:    stm                r1, r2
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: stmi
; CHECK-NEXT:    stmi               r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: ldm.h.st
; CHECK-NEXT:    ldm.h.st           r1, r2
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: ldm.h.ah
; CHECK-NEXT:    ldm.h.ah           r1, r2
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: ldm.st.h
; CHECK-NEXT:    ldm.st.h           r1, r2
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: cannot parse operand
; CHECK-NEXT:    callf .st.sh    r1, r2, @foo ; unexpected space
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:10: error: cannot parse operand
; CHECK-NEXT:    callf. st.sh    r1, r2, @foo ; unexpected space
; CHECK-NEXT:           ^
; CHECK:       <stdin>:{{[0-9]+}}:12: error: cannot parse operand
; CHECK-NEXT:    callf.st .sh    r1, r2, @foo ; unexpected space
; CHECK-NEXT:             ^
; CHECK:       <stdin>:{{[0-9]+}}:15: error: unexpected whitespace before condition code
; CHECK-NEXT:    callf.st.sh .lt r1, r2, @foo ; unexpected space
; CHECK-NEXT:                ^
; CHECK:       <stdin>:{{[0-9]+}}:27: error: cannot parse operand
; CHECK-NEXT:    callf.lt.st.sh  r1, r2, @foo ; invalid position of predicate
; CHECK-NEXT:                            ^
; CHECK:       <stdin>:{{[0-9]+}}:27: error: cannot parse operand
; CHECK-NEXT:    callf.st.lt.sh  r1, r2, @foo ; invalid position of predicate
; CHECK-NEXT:                            ^
; CHECK:       <stdin>:{{[0-9]+}}:27: error: cannot parse operand
; CHECK-NEXT:    callf.st.st.sh  r1, r2, @foo ; duplicated modifiers
; CHECK-NEXT:                            ^
; CHECK:       <stdin>:{{[0-9]+}}:27: error: cannot parse operand
; CHECK-NEXT:    callf.sh.st.sh  r1, r2, @foo ; duplicated modifiers
; CHECK-NEXT:                            ^
; CHECK:       <stdin>:{{[0-9]+}}:27: error: cannot parse operand
; CHECK-NEXT:    callf.st.st     r1, r2, @foo ; duplicated modifiers
; CHECK-NEXT:                            ^
