; RUN: not llvm-mc -triple eravm -o - < %s 2>&1 > %t.stdout | FileCheck %s
; RUN: FileCheck --check-prefix=STDOUT %s < %t.stdout

; STDOUT:     .text
; STDOUT-NOT: {{.+}}

; Note: "sub ... 42, r2, r3" is used instead of "sub ... r1, r2, r3"
;       to make sure the instructions are rejected not because of
;       combination of swap modifier and two register inputs.

; reject spaces from the mnemonic up to the condition code
  sub    .s      42, r3, r3
  sub.s    !.lt  42, r2, r3
  sub.s!   .lt   42, r2, r3
  sub.s  !  .lt  42, r2, r3

; reject incorrect order of modifiers
  sub.s.lt!      42, r3, r3
  sub!.s.lt      42, r3, r3
  sub!.lt.s      42, r3, r3
  sub.lt.s!      42, r3, r3
  sub.lt!.s      42, r3, r3

  sub.lt.s       42, r3, r3
  sub.lt!        42, r3, r3
  sub!.s         42, r3, r3

; reject duplicated modifiers (note that immediate operands are only parsed for
; relevant mnemonics)
  sub.s.s.s      r1, r2, r3
  sub.lt.lt      r1, r2, r3
  sub.s.lt.s     r1, r2, r3
  sub.s!!.lt     r1, r2, r3
  sub.s.s.s      42, r2, r3
  sub.lt.lt      42, r2, r3
  sub.s.lt.s     42, r2, r3
  sub.s!!.lt     42, r2, r3

; invalid instruction-specific modifiers
  event.abc          r3, r4
  event.first.abc    r3, r4
  event.first.first  r3, r4
  to_l1.abc          r3, r4
  to_l1.first.abc    r3, r4
  to_l1.first.first  r3, r4
  context            r3
  context.sp.sp      r3
  context.sp.abc     r3
  context.abc        r3

; Modifiers specific to far calls
  far_call .st.sh    r1, r2, @foo ; unexpected space
  far_call. st.sh    r1, r2, @foo ; unexpected space
  far_call.st .sh    r1, r2, @foo ; unexpected space
  far_call.st.sh .lt r1, r2, @foo ; unexpected space
  far_call.lt.st.sh  r1, r2, @foo ; invalid position of predicate
  far_call.st.lt.sh  r1, r2, @foo ; invalid position of predicate
  far_call.st.st.sh  r1, r2, @foo ; duplicated modifiers
  far_call.sh.st.sh  r1, r2, @foo ; duplicated modifiers
  far_call.st.st     r1, r2, @foo ; duplicated modifiers

; COM: Autogenerated checks below, see README.md.
; CHECK:       <stdin>:{{[0-9]+}}:10: error: cannot parse operand
; CHECK-NEXT:    sub    .s      42, r3, r3
; CHECK-NEXT:           ^
; CHECK:       <stdin>:{{[0-9]+}}:12: error: unexpected whitespace before '!'
; CHECK-NEXT:    sub.s    !.lt  42, r2, r3
; CHECK-NEXT:             ^
; CHECK:       <stdin>:{{[0-9]+}}:12: error: unexpected whitespace before condition code
; CHECK-NEXT:    sub.s!   .lt   42, r2, r3
; CHECK-NEXT:             ^
; CHECK:       <stdin>:{{[0-9]+}}:10: error: unexpected whitespace before '!'
; CHECK-NEXT:    sub.s  !  .lt  42, r2, r3
; CHECK-NEXT:           ^
; CHECK:       <stdin>:{{[0-9]+}}:11: error: unexpected '!' after condition code
; CHECK-NEXT:    sub.s.lt!      42, r3, r3
; CHECK-NEXT:            ^
; CHECK:       <stdin>:{{[0-9]+}}:7: error: cannot parse operand
; CHECK-NEXT:    sub!.s.lt      42, r3, r3
; CHECK-NEXT:        ^
; CHECK:       <stdin>:{{[0-9]+}}:7: error: cannot parse operand
; CHECK-NEXT:    sub!.lt.s      42, r3, r3
; CHECK-NEXT:        ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.lt.s!      42, r3, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: unexpected '!' after condition code
; CHECK-NEXT:    sub.lt!.s      42, r3, r3
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.lt.s       42, r3, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: unexpected '!' after condition code
; CHECK-NEXT:    sub.lt!        42, r3, r3
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:7: error: cannot parse operand
; CHECK-NEXT:    sub!.s         42, r3, r3
; CHECK-NEXT:        ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: sub.s.s.s
; CHECK-NEXT:    sub.s.s.s      r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: sub.lt
; CHECK-NEXT:    sub.lt.lt      r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: sub.s.lt.s
; CHECK-NEXT:    sub.s.lt.s     r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: cannot parse operand
; CHECK-NEXT:    sub.s!!.lt     r1, r2, r3
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.s.s.s      42, r2, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.lt.lt      42, r2, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    sub.s.lt.s     42, r2, r3
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: cannot parse operand
; CHECK-NEXT:    sub.s!!.lt     42, r2, r3
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: event.abc
; CHECK-NEXT:    event.abc          r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: event.first.abc
; CHECK-NEXT:    event.first.abc    r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: event.first.first
; CHECK-NEXT:    event.first.first  r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: to_l1.abc
; CHECK-NEXT:    to_l1.abc          r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: to_l1.first.abc
; CHECK-NEXT:    to_l1.first.abc    r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: to_l1.first.first
; CHECK-NEXT:    to_l1.first.first  r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: context
; CHECK-NEXT:    context            r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: context.sp.sp
; CHECK-NEXT:    context.sp.sp      r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: context.sp.abc
; CHECK-NEXT:    context.sp.abc     r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: context.abc
; CHECK-NEXT:    context.abc        r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:12: error: cannot parse operand
; CHECK-NEXT:    far_call .st.sh    r1, r2, @foo ; unexpected space
; CHECK-NEXT:             ^
; CHECK:       <stdin>:{{[0-9]+}}:13: error: cannot parse operand
; CHECK-NEXT:    far_call. st.sh    r1, r2, @foo ; unexpected space
; CHECK-NEXT:              ^
; CHECK:       <stdin>:{{[0-9]+}}:15: error: cannot parse operand
; CHECK-NEXT:    far_call.st .sh    r1, r2, @foo ; unexpected space
; CHECK-NEXT:                ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: unexpected whitespace before condition code
; CHECK-NEXT:    far_call.st.sh .lt r1, r2, @foo ; unexpected space
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:30: error: cannot parse operand
; CHECK-NEXT:    far_call.lt.st.sh  r1, r2, @foo ; invalid position of predicate
; CHECK-NEXT:                               ^
; CHECK:       <stdin>:{{[0-9]+}}:30: error: cannot parse operand
; CHECK-NEXT:    far_call.st.lt.sh  r1, r2, @foo ; invalid position of predicate
; CHECK-NEXT:                               ^
; CHECK:       <stdin>:{{[0-9]+}}:30: error: cannot parse operand
; CHECK-NEXT:    far_call.st.st.sh  r1, r2, @foo ; duplicated modifiers
; CHECK-NEXT:                               ^
; CHECK:       <stdin>:{{[0-9]+}}:30: error: cannot parse operand
; CHECK-NEXT:    far_call.sh.st.sh  r1, r2, @foo ; duplicated modifiers
; CHECK-NEXT:                               ^
; CHECK:       <stdin>:{{[0-9]+}}:30: error: cannot parse operand
; CHECK-NEXT:    far_call.st.st     r1, r2, @foo ; duplicated modifiers
; CHECK-NEXT:                               ^
