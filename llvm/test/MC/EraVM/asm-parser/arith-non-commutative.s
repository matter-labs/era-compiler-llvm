; RUN: llvm-mc -triple eravm -filetype=asm %s -o - | FileCheck %s

  .text
foo:

; mnemonics
  sub       r1, r2, r3
  shl       r1, r2, r3
  shr       r1, r2, r3
  rol       r1, r2, r3
  ror       r1, r2, r3

; modifiers (all combinations of ".s", "!" and ".condition", ordered exactly like this)
  sub       r1, r2, r3
  sub!      r1, r2, r3
  sub.s     r1, r2, r3
  sub.s!    r1, r2, r3
  sub.lt    r1, r2, r3
  sub!.lt   r1, r2, r3
  sub.s.lt  r1, r2, r3
  sub.s!.lt r1, r2, r3

; modifiers (more relevant operands for ".s" modifier)
  sub.s     42, r2, r3
  sub.s!    42, r2, r3
  sub.s.lt  42, r2, r3
  sub.s!.lt 42, r2, r3

; modifiers (".s" modifier, "reg, reg, stack" operands)
  sub.s     r1, r2, stack[1]
  sub.s!    r1, r2, stack[1]
  sub.s.lt  r1, r2, stack[1]
  sub.s!.lt r1, r2, stack[1]
  sub.s     r1, r2, stack-[1]
  sub.s!    r1, r2, stack-[1]
  sub.s.lt  r1, r2, stack-[1]
  sub.s!.lt r1, r2, stack-[1]

; operands (5 src modes x 3 dst modes)
  sub       r1, r2, r3
  sub       42, r2, r3
  sub       stack[r1 + 1], r2, r3
  sub       stack-[r1 + 1], r2, r3
  sub       code[r1 + 1], r2, r3
  sub       r1, r2, stack[r3 + 1]
  sub       42, r2, stack[r3 + 1]
  sub       stack[r1 + 1], r2, stack[r3 + 1]
  sub       stack-[r1 + 1], r2, stack[r3 + 1]
  sub       code[r1 + 1], r2, stack[r3 + 1]
  sub       r1, r2, stack-[r3 + 1]
  sub       42, r2, stack-[r3 + 1]
  sub       stack[r1 + 1], r2, stack-[r3 + 1]
  sub       stack-[r1 + 1], r2, stack-[r3 + 1]
  sub       code[r1 + 1], r2, stack-[r3 + 1]


; COM: Autogenerated checks below, see README.md.
; CHECK:  .text
; CHECK:foo:

; CHECK:  sub  r1, r2, r3
; CHECK:  shl  r1, r2, r3
; CHECK:  shr  r1, r2, r3
; CHECK:  rol  r1, r2, r3
; CHECK:  ror  r1, r2, r3

; CHECK:  sub  r1, r2, r3
; CHECK:  sub! r1, r2, r3
; CHECK:  sub.s        r1, r2, r3
; CHECK:  sub.s!       r1, r2, r3
; CHECK:  sub.lt       r1, r2, r3
; CHECK:  sub!.lt      r1, r2, r3
; CHECK:  sub.s.lt     r1, r2, r3
; CHECK:  sub.s!.lt    r1, r2, r3

; CHECK:  sub.s        42, r2, r3
; CHECK:  sub.s!       42, r2, r3
; CHECK:  sub.s.lt     42, r2, r3
; CHECK:  sub.s!.lt    42, r2, r3

; CHECK:  sub.s        r1, r2, stack[1]
; CHECK:  sub.s!       r1, r2, stack[1]
; CHECK:  sub.s.lt     r1, r2, stack[1]
; CHECK:  sub.s!.lt    r1, r2, stack[1]
; CHECK:  sub.s        r1, r2, stack-[1]
; CHECK:  sub.s!       r1, r2, stack-[1]
; CHECK:  sub.s.lt     r1, r2, stack-[1]
; CHECK:  sub.s!.lt    r1, r2, stack-[1]

; CHECK:  sub  r1, r2, r3
; CHECK:  sub  42, r2, r3
; CHECK:  sub  stack[1 + r1], r2, r3
; CHECK:  sub  stack-[1 + r1], r2, r3
; CHECK:  sub  code[r1+1], r2, r3
; CHECK:  sub  r1, r2, stack[1 + r3]
; CHECK:  sub  42, r2, stack[1 + r3]
; CHECK:  sub  stack[1 + r1], r2, stack[1 + r3]
; CHECK:  sub  stack-[1 + r1], r2, stack[1 + r3]
; CHECK:  sub  code[r1+1], r2, stack[1 + r3]
; CHECK:  sub  r1, r2, stack-[1 + r3]
; CHECK:  sub  42, r2, stack-[1 + r3]
; CHECK:  sub  stack[1 + r1], r2, stack-[1 + r3]
; CHECK:  sub  stack-[1 + r1], r2, stack-[1 + r3]
; CHECK:  sub  code[r1+1], r2, stack-[1 + r3]
