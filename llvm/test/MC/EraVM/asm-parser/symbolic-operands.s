; RUN: llvm-mc -triple eravm -filetype=asm %s -o - | FileCheck %s

  .text
foo:

  ; generic (input operands)
  add  code[@global + 1 + r1], r1, r2
  add  stack[@global + 1 + r1], r1, r2
  add  stack=[@global + 1 + r1], r1, r2

  ; generic (output operands)
  add  r1, r2, stack[@global + 1 + r1]
  add  r1, r2, stack=[@global + 1 + r1]

  ; misc variants of "subscript" syntax (stack)
  add  stack[@global - 1 + r1], r2, r3
  add  stack[@global + 1], r2, r3
  add  stack[@global + r1], r2, r3
  add  stack[@global - 1], r2, r3
  add  stack[@global], r2, r3

  ; misc variants of "subscript" syntax (code)
  add  code[@global - 1 + r1], r2, r3
  add  code[@global + 1], r2, r3
  add  code[@global + r1], r2, r3
  add  code[@global - 1], r2, r3
  add  code[@global], r2, r3

  ; special syntax for add with immediate.
  ; @global is treated as an offset instructions.
  add  @global + 1, r1, r2
  add  @global - 1, r1, r2


; COM: Autogenerated checks below, see README.md.
; CHECK:  .text
; CHECK:foo:

; CHECK:  add  code[@global+r1+1], r1, r2
; CHECK:  add  stack[@global + 1 + r1], r1, r2
; CHECK:  add  stack[@global + 1 + r1], r1, r2

; CHECK:  add  r1, r2, stack[@global + 1 + r1]
; CHECK:  add  r1, r2, stack[@global + 1 + r1]

; CHECK:  add  stack[@global + 65535 + r1], r2, r3
; CHECK:  add  stack[@global + 1], r2, r3
; CHECK:  add  stack[@global + r1], r2, r3
; CHECK:  add  stack[@global + 65535], r2, r3
; CHECK:  add  stack[@global], r2, r3

; CHECK:  add  code[@global+r1+65535], r2, r3
; CHECK:  add  code[@global+1], r2, r3
; CHECK:  add  code[@global+r1], r2, r3
; CHECK:  add  code[@global+65535], r2, r3
; CHECK:  add  code[@global], r2, r3

; CHECK:  add  @global+1, r1, r2
; CHECK:  add  @global+65535, r1, r2
