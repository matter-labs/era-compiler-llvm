; RUN: not llvm-mc -triple eravm -o - < %s 2>&1 > %t.stdout | FileCheck %s
; RUN: FileCheck --check-prefix=STDOUT %s < %t.stdout

; STDOUT:     .text
; STDOUT-NOT: {{.+}}

; operands (2nd input should be register)
  add       r1, 42, r3
  add       r1, stack[r2 + 1], r3
  add       r1, stack-[r2 + 1], r3
  add       r1, code[r2 + 1], r3

; operands (output should be writable)
  add       r1, r2, 42
  add       r1, r2, code[r3 + 1]

; operands (2nd output dhould be register, if any)
  mul r1, r2, r3, stack[r4 + 1]

; correct number of outputs
  add r1, r2, r3, r4
  mul r1, r2, r3

; commutative instructions cannot have swapped variants because
; there are no corresponding opcodes for machine instructions
  add.s     42, r2, r3
  and.s     42, r2, r3
  or.s      42, r2, r3
  xor.s     42, r2, r3
  mul.s     42, r2, r3, r4

; non-arithmetic suffixes should be rejected
  add.first     r1, r2, r3
  add.static    r1, r2, r3
  add.shard     r1, r2, r3
  add.delegate  r1, r2, r3
  add.mimic     r1, r2, r3
  add.caller    r1, r2, r3
  add.sp        r1, r2, r3
  add.1         r1, r2, r3
  add.1.inc     r1, r2, r3
  add.inc       r1, r2, r3
  add.to_label  r1, r2, r3

; COM: Autogenerated checks below, see README.md.
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    add       r1, 42, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    add       r1, stack[r2 + 1], r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    add       r1, stack-[r2 + 1], r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    add       r1, code[r2 + 1], r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:21: error: cannot parse operand
; CHECK-NEXT:    add       r1, r2, 42
; CHECK-NEXT:                      ^
; CHECK:       <stdin>:{{[0-9]+}}:21: error: cannot parse operand
; CHECK-NEXT:    add       r1, r2, code[r3 + 1]
; CHECK-NEXT:                      ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    mul r1, r2, r3, stack[r4 + 1]
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    add r1, r2, r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    mul r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:13: error: cannot parse operand
; CHECK-NEXT:    add.s     42, r2, r3
; CHECK-NEXT:              ^
; CHECK:       <stdin>:{{[0-9]+}}:13: error: cannot parse operand
; CHECK-NEXT:    and.s     42, r2, r3
; CHECK-NEXT:              ^
; CHECK:       <stdin>:{{[0-9]+}}:13: error: cannot parse operand
; CHECK-NEXT:    or.s      42, r2, r3
; CHECK-NEXT:              ^
; CHECK:       <stdin>:{{[0-9]+}}:13: error: cannot parse operand
; CHECK-NEXT:    xor.s     42, r2, r3
; CHECK-NEXT:              ^
; CHECK:       <stdin>:{{[0-9]+}}:13: error: cannot parse operand
; CHECK-NEXT:    mul.s     42, r2, r3, r4
; CHECK-NEXT:              ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.first
; CHECK-NEXT:    add.first     r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.static
; CHECK-NEXT:    add.static    r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.shard
; CHECK-NEXT:    add.shard     r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.delegate
; CHECK-NEXT:    add.delegate  r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.mimic
; CHECK-NEXT:    add.mimic     r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.caller
; CHECK-NEXT:    add.caller    r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.sp
; CHECK-NEXT:    add.sp        r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.1
; CHECK-NEXT:    add.1         r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.1.inc
; CHECK-NEXT:    add.1.inc     r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.inc
; CHECK-NEXT:    add.inc       r1, r2, r3
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: unknown mnemonic: add.to_label
; CHECK-NEXT:    add.to_label  r1, r2, r3
; CHECK-NEXT:    ^
