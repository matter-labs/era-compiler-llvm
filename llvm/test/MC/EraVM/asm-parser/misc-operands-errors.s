; RUN: not llvm-mc -triple eravm -o - < %s 2>&1 > %t.stdout | FileCheck %s
; RUN: FileCheck --check-prefix=STDOUT %s < %t.stdout

; STDOUT:     .text
; STDOUT-NOT: {{.+}}

; reject integer literals as immediate jump targets
  jump 42
  call r1, 42
  call r1, @foo, 42
  callf r1, r2, 42

; reject 2-operand far calls
  callf          r3, r4
  callf.st       r3, r4
  callf.sh       r3, r4
  callf.st.sh    r3, r4
  calld          r3, r4
  calld.st       r3, r4
  calld.sh       r3, r4
  calld.st.sh    r3, r4
  callm          r3, r4
  callm.st       r3, r4
  callm.sh       r3, r4
  callm.st.sh    r3, r4

; incsp and decsp require custom parsing
  incsp
  incsp stack-=[1]
  incsp stack+=[1]
  incsp r1, 42  ; reg and imm should be separated with "+"
  incsp 42 + r1 ; not supported yet

; COM: Autogenerated checks below, see README.md.
; CHECK:       <stdin>:{{[0-9]+}}:8: error: cannot parse operand
; CHECK-NEXT:    jump 42
; CHECK-NEXT:         ^
; CHECK:       <stdin>:{{[0-9]+}}:12: error: cannot parse operand
; CHECK-NEXT:    call r1, 42
; CHECK-NEXT:             ^
; CHECK:       <stdin>:{{[0-9]+}}:18: error: cannot parse operand
; CHECK-NEXT:    call r1, @foo, 42
; CHECK-NEXT:                   ^
; CHECK:       <stdin>:{{[0-9]+}}:17: error: cannot parse operand
; CHECK-NEXT:    callf r1, r2, 42
; CHECK-NEXT:                  ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    callf          r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    callf.st       r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    callf.sh       r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    callf.st.sh    r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    calld          r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    calld.st       r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    calld.sh       r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    calld.st.sh    r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    callm          r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    callm.st       r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    callm.sh       r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    callm.st.sh    r3, r4
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    incsp
; CHECK-NEXT:    ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: cannot parse register
; CHECK-NEXT:    incsp stack-=[1]
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:9: error: cannot parse register
; CHECK-NEXT:    incsp stack+=[1]
; CHECK-NEXT:          ^
; CHECK:       <stdin>:{{[0-9]+}}:11: error: unexpected token
; CHECK-NEXT:    incsp r1, 42  ; reg and imm should be separated with "+"
; CHECK-NEXT:            ^
; CHECK:       <stdin>:{{[0-9]+}}:3: error: cannot parse instruction
; CHECK-NEXT:    incsp 42 + r1 ; not supported yet
; CHECK-NEXT:    ^
