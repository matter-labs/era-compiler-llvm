; RUN: llvm-mc -triple eravm -filetype=asm %s -o - | FileCheck %s

; See ptr-instructions-errors.s for combinations of operands
; rejected for a reason.

  .text
foo:

; mnemonics (incl. ".s" modifier)
  addp        r1, r2, r3
  subp        r1, r2, r3
  shrnk       r1, r2, r3
  pack        r1, r2, r3
  addp.s      42, r2, r3
  subp.s      42, r2, r3
  shrnk.s     42, r2, r3
  pack.s      42, r2, r3

; modifiers (condition)
  addp.lt     r1, r2, r3
  subp.lt     r1, r2, r3
  shrnk.lt    r1, r2, r3
  pack.lt     r1, r2, r3
  addp.s.lt   42, r2, r3
  subp.s.lt   42, r2, r3
  shrnk.s.lt  42, r2, r3
  pack.s.lt   42, r2, r3

; operands (non-swapped version: 4 src modes x 4 dst modes)
  addp        r1, r2, r3
  addp        stack[r1 + 1], r2, r3
  addp        stack-[r1 + 1], r2, r3
  addp        stack-=[r1 + 1], r2, r3
  addp        r1, r2, stack[r3 + 1]
  addp        stack[r1 + 1], r2, stack[r3 + 1]
  addp        stack-[r1 + 1], r2, stack[r3 + 1]
  addp        stack-=[r1 + 1], r2, stack[r3 + 1]
  addp        r1, r2, stack-[r3 + 1]
  addp        stack[r1 + 1], r2, stack-[r3 + 1]
  addp        stack-[r1 + 1], r2, stack-[r3 + 1]
  addp        stack-=[r1 + 1], r2, stack-[r3 + 1]
  addp        r1, r2, stack+=[r3 + 1]
  addp        stack[r1 + 1], r2, stack+=[r3 + 1]
  addp        stack-[r1 + 1], r2, stack+=[r3 + 1]
  addp        stack-=[r1 + 1], r2, stack+=[r3 + 1]

; operands (swapped version: 6 src modes x 4 dst modes)
  addp.s      r1, r2, r3
  addp.s      42, r2, r3
  addp.s      stack[r1 + 1], r2, r3
  addp.s      stack-[r1 + 1], r2, r3
  addp.s      stack-=[r1 + 1], r2, r3
  addp.s      code[r1 + 1], r2, r3
  addp.s      r1, r2, stack[r3 + 1]
  addp.s      42, r2, stack[r3 + 1]
  addp.s      stack[r1 + 1], r2, stack[r3 + 1]
  addp.s      stack-[r1 + 1], r2, stack[r3 + 1]
  addp.s      stack-=[r1 + 1], r2, stack[r3 + 1]
  addp.s      code[r1 + 1], r2, stack[r3 + 1]
  addp.s      r1, r2, stack-[r3 + 1]
  addp.s      42, r2, stack-[r3 + 1]
  addp.s      stack[r1 + 1], r2, stack-[r3 + 1]
  addp.s      stack-[r1 + 1], r2, stack-[r3 + 1]
  addp.s      stack-=[r1 + 1], r2, stack-[r3 + 1]
  addp.s      code[r1 + 1], r2, stack-[r3 + 1]
  addp.s      r1, r2, stack+=[r3 + 1]
  addp.s      42, r2, stack+=[r3 + 1]
  addp.s      stack[r1 + 1], r2, stack+=[r3 + 1]
  addp.s      stack-[r1 + 1], r2, stack+=[r3 + 1]
  addp.s      stack-=[r1 + 1], r2, stack+=[r3 + 1]
  addp.s      code[r1 + 1], r2, stack+=[r3 + 1]


; COM: Autogenerated checks below, see README.md.
; CHECK:  .text
; CHECK:foo:

; CHECK:  addp       r1, r2, r3
; CHECK:  subp       r1, r2, r3
; CHECK:  shrnk      r1, r2, r3
; CHECK:  pack       r1, r2, r3
; CHECK:  addp.s     42, r2, r3
; CHECK:  subp.s     42, r2, r3
; CHECK:  shrnk.s    42, r2, r3
; CHECK:  pack.s     42, r2, r3

; CHECK:  addp.lt    r1, r2, r3
; CHECK:  subp.lt    r1, r2, r3
; CHECK:  shrnk.lt   r1, r2, r3
; CHECK:  pack.lt    r1, r2, r3
; CHECK:  addp.s.lt  42, r2, r3
; CHECK:  subp.s.lt  42, r2, r3
; CHECK:  shrnk.s.lt 42, r2, r3
; CHECK:  pack.s.lt  42, r2, r3

; CHECK:  addp       r1, r2, r3
; CHECK:  addp       stack[1 + r1], r2, r3
; CHECK:  addp       stack-[1 + r1], r2, r3
; CHECK:  addp       stack-=[1 + r1], r2, r3
; CHECK:  addp       r1, r2, stack[1 + r3]
; CHECK:  addp       stack[1 + r1], r2, stack[1 + r3]
; CHECK:  addp       stack-[1 + r1], r2, stack[1 + r3]
; CHECK:  addp       stack-=[1 + r1], r2, stack[1 + r3]
; CHECK:  addp       r1, r2, stack-[1 + r3]
; CHECK:  addp       stack[1 + r1], r2, stack-[1 + r3]
; CHECK:  addp       stack-[1 + r1], r2, stack-[1 + r3]
; CHECK:  addp       stack-=[1 + r1], r2, stack-[1 + r3]
; CHECK:  addp       r1, r2, stack+=[1 + r3]
; CHECK:  addp       stack[1 + r1], r2, stack+=[1 + r3]
; CHECK:  addp       stack-[1 + r1], r2, stack+=[1 + r3]
; CHECK:  addp       stack-=[1 + r1], r2, stack+=[1 + r3]

; CHECK:  addp.s     r1, r2, r3
; CHECK:  addp.s     42, r2, r3
; CHECK:  addp.s     stack[1 + r1], r2, r3
; CHECK:  addp.s     stack-[1 + r1], r2, r3
; CHECK:  addp.s     stack-=[1 + r1], r2, r3
; CHECK:  addp.s     code[r1+1], r2, r3
; CHECK:  addp.s     r1, r2, stack[1 + r3]
; CHECK:  addp.s     42, r2, stack[1 + r3]
; CHECK:  addp.s     stack[1 + r1], r2, stack[1 + r3]
; CHECK:  addp.s     stack-[1 + r1], r2, stack[1 + r3]
; CHECK:  addp.s     stack-=[1 + r1], r2, stack[1 + r3]
; CHECK:  addp.s     code[r1+1], r2, stack[1 + r3]
; CHECK:  addp.s     r1, r2, stack-[1 + r3]
; CHECK:  addp.s     42, r2, stack-[1 + r3]
; CHECK:  addp.s     stack[1 + r1], r2, stack-[1 + r3]
; CHECK:  addp.s     stack-[1 + r1], r2, stack-[1 + r3]
; CHECK:  addp.s     stack-=[1 + r1], r2, stack-[1 + r3]
; CHECK:  addp.s     code[r1+1], r2, stack-[1 + r3]
; CHECK:  addp.s     r1, r2, stack+=[1 + r3]
; CHECK:  addp.s     42, r2, stack+=[1 + r3]
; CHECK:  addp.s     stack[1 + r1], r2, stack+=[1 + r3]
; CHECK:  addp.s     stack-[1 + r1], r2, stack+=[1 + r3]
; CHECK:  addp.s     stack-=[1 + r1], r2, stack+=[1 + r3]
; CHECK:  addp.s     code[r1+1], r2, stack+=[1 + r3]
