; RUN: llvm-mc -triple eravm -filetype=asm %s -o - | FileCheck %s

; See ptr-instructions-errors.s for combinations of operands
; rejected for a reason.

  .text
foo:

; mnemonics (incl. ".s" modifier)
  ptr.add       r1, r2, r3
  ptr.sub       r1, r2, r3
  ptr.shrink    r1, r2, r3
  ptr.pack      r1, r2, r3
  ptr.add.s     42, r2, r3
  ptr.sub.s     42, r2, r3
  ptr.shrink.s  42, r2, r3
  ptr.pack.s    42, r2, r3

; modifiers (condition)
  ptr.add.lt       r1, r2, r3
  ptr.sub.lt       r1, r2, r3
  ptr.shrink.lt    r1, r2, r3
  ptr.pack.lt      r1, r2, r3
  ptr.add.s.lt     42, r2, r3
  ptr.sub.s.lt     42, r2, r3
  ptr.shrink.s.lt  42, r2, r3
  ptr.pack.s.lt    42, r2, r3

; operands (non-swapped version: 3 src modes x 3 dst modes)
  ptr.add       r1, r2, r3
  ptr.add       stack[r1 + 1], r2, r3
  ptr.add       stack-[r1 + 1], r2, r3
  ptr.add       r1, r2, stack[r3 + 1]
  ptr.add       stack[r1 + 1], r2, stack[r3 + 1]
  ptr.add       stack-[r1 + 1], r2, stack[r3 + 1]
  ptr.add       r1, r2, stack-[r3 + 1]
  ptr.add       stack[r1 + 1], r2, stack-[r3 + 1]
  ptr.add       stack-[r1 + 1], r2, stack-[r3 + 1]

; operands (swapped version: 5 src modes x 3 dst modes)
  ptr.add.s    r1, r2, r3
  ptr.add.s    42, r2, r3
  ptr.add.s    stack[r1 + 1], r2, r3
  ptr.add.s    stack-[r1 + 1], r2, r3
  ptr.add.s    code[r1 + 1], r2, r3
  ptr.add.s    r1, r2, stack[r3 + 1]
  ptr.add.s    42, r2, stack[r3 + 1]
  ptr.add.s    stack[r1 + 1], r2, stack[r3 + 1]
  ptr.add.s    stack-[r1 + 1], r2, stack[r3 + 1]
  ptr.add.s    code[r1 + 1], r2, stack[r3 + 1]
  ptr.add.s    r1, r2, stack-[r3 + 1]
  ptr.add.s    42, r2, stack-[r3 + 1]
  ptr.add.s    stack[r1 + 1], r2, stack-[r3 + 1]
  ptr.add.s    stack-[r1 + 1], r2, stack-[r3 + 1]
  ptr.add.s    code[r1 + 1], r2, stack-[r3 + 1]


; COM: Autogenerated checks below, see README.md.
; CHECK:  .text
; CHECK:foo:

; CHECK:  ptr.add      r1, r2, r3
; CHECK:  ptr.sub      r1, r2, r3
; CHECK:  ptr.shrink   r1, r2, r3
; CHECK:  ptr.pack     r1, r2, r3
; CHECK:  ptr.add.s    42, r2, r3
; CHECK:  ptr.sub.s    42, r2, r3
; CHECK:  ptr.shrink.s 42, r2, r3
; CHECK:  ptr.pack.s   42, r2, r3

; CHECK:  ptr.add.lt   r1, r2, r3
; CHECK:  ptr.sub.lt   r1, r2, r3
; CHECK:  ptr.shrink.lt        r1, r2, r3
; CHECK:  ptr.pack.lt  r1, r2, r3
; CHECK:  ptr.add.s.lt 42, r2, r3
; CHECK:  ptr.sub.s.lt 42, r2, r3
; CHECK:  ptr.shrink.s.lt      42, r2, r3
; CHECK:  ptr.pack.s.lt        42, r2, r3

; CHECK:  ptr.add      r1, r2, r3
; CHECK:  ptr.add      stack[1 + r1], r2, r3
; CHECK:  ptr.add      stack-[1 + r1], r2, r3
; CHECK:  ptr.add      r1, r2, stack[1 + r3]
; CHECK:  ptr.add      stack[1 + r1], r2, stack[1 + r3]
; CHECK:  ptr.add      stack-[1 + r1], r2, stack[1 + r3]
; CHECK:  ptr.add      r1, r2, stack-[1 + r3]
; CHECK:  ptr.add      stack[1 + r1], r2, stack-[1 + r3]
; CHECK:  ptr.add      stack-[1 + r1], r2, stack-[1 + r3]

; CHECK:  ptr.add.s    r1, r2, r3
; CHECK:  ptr.add.s    42, r2, r3
; CHECK:  ptr.add.s    stack[1 + r1], r2, r3
; CHECK:  ptr.add.s    stack-[1 + r1], r2, r3
; CHECK:  ptr.add.s    code[r1+1], r2, r3
; CHECK:  ptr.add.s    r1, r2, stack[1 + r3]
; CHECK:  ptr.add.s    42, r2, stack[1 + r3]
; CHECK:  ptr.add.s    stack[1 + r1], r2, stack[1 + r3]
; CHECK:  ptr.add.s    stack-[1 + r1], r2, stack[1 + r3]
; CHECK:  ptr.add.s    code[r1+1], r2, stack[1 + r3]
; CHECK:  ptr.add.s    r1, r2, stack-[1 + r3]
; CHECK:  ptr.add.s    42, r2, stack-[1 + r3]
; CHECK:  ptr.add.s    stack[1 + r1], r2, stack-[1 + r3]
; CHECK:  ptr.add.s    stack-[1 + r1], r2, stack-[1 + r3]
; CHECK:  ptr.add.s    code[r1+1], r2, stack-[1 + r3]
