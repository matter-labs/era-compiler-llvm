; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

declare void @use(i32)

define i1 @test1(i32 %arg) {
; CHECK-LABEL: @test1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[ARG:%.*]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %sub = sub i32 0, %arg
  %xor = xor i32 %arg, -1
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test1_nuw(i32 %arg) {
; CHECK-LABEL: @test1_nuw(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i1 false
;
entry:
  %sub = sub nuw i32 0, %arg
  %xor = xor i32 %arg, -1
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test1_nsw(i32 %arg) {
; CHECK-LABEL: @test1_nsw(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[ARG:%.*]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %sub = sub nsw i32 0, %arg
  %xor = xor i32 %arg, -1
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test1_nuw_nsw(i32 %arg) {
; CHECK-LABEL: @test1_nuw_nsw(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i1 false
;
entry:
  %sub = sub nuw nsw i32 0, %arg
  %xor = xor i32 %arg, -1
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test2(i32 %arg) {
; CHECK-LABEL: @test2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[ARG:%.*]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %sub = sub i32 0, %arg
  %xor = xor i32 -1, %arg
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test2_nuw(i32 %arg) {
; CHECK-LABEL: @test2_nuw(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i1 false
;
entry:
  %sub = sub nuw i32 0, %arg
  %xor = xor i32 -1, %arg
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test2_nsw(i32 %arg) {
; CHECK-LABEL: @test2_nsw(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[ARG:%.*]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %sub = sub nsw i32 0, %arg
  %xor = xor i32 -1, %arg
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test2_nuw_nsw(i32 %arg) {
; CHECK-LABEL: @test2_nuw_nsw(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i1 false
;
entry:
  %sub = sub nuw nsw i32 0, %arg
  %xor = xor i32 -1, %arg
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test3(i32 %arg) {
; CHECK-LABEL: @test3(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 0, [[ARG:%.*]]
; CHECK-NEXT:    call void @use(i32 [[SUB]])
; CHECK-NEXT:    [[XOR:%.*]] = xor i32 [[ARG]], -1
; CHECK-NEXT:    call void @use(i32 [[XOR]])
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[ARG]], 0
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %sub = sub i32 0, %arg
  call void @use(i32 %sub)
  %xor = xor i32 -1, %arg
  call void @use(i32 %xor)
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}

define i1 @test_no(i32 %arg1, i32 %arg2) {
; CHECK-LABEL: @test_no(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 0, [[ARG1:%.*]]
; CHECK-NEXT:    [[XOR:%.*]] = xor i32 [[ARG2:%.*]], -1
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i32 [[SUB]], [[XOR]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
entry:
  %sub = sub i32 0, %arg1
  %xor = xor i32 %arg2, -1
  %cmp = icmp ugt i32 %sub, %xor
  ret i1 %cmp
}
