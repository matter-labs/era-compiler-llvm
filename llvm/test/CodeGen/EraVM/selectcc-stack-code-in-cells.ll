; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 < %s | FileCheck %s

target triple = "eravm"
target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"

define i256 @selsrr(i1 %cond, ptr %s, i256 %v1) {
; CHECK-LABEL: selsrr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add.ne stack[r2], r0, r3
; CHECK-NEXT:    add r3, r0, r1
; CHECK-NEXT:    ret
  %load = load i256, ptr %s
  %select = select i1 %cond, i256 %load, i256 %v1
  ret i256 %select
}

define i256 @selrsr(i1 %cond, ptr %s, i256 %v1) {
; CHECK-LABEL: selrsr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add.eq stack[r2], r0, r3
; CHECK-NEXT:    add r3, r0, r1
; CHECK-NEXT:    ret
  %load = load i256, ptr %s
  %select = select i1 %cond, i256 %v1, i256 %load
  ret i256 %select
}

define i256 @selsir(i1 %cond, ptr %s) {
; CHECK-LABEL: selsir:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add 12345, r0, r1
; CHECK-NEXT:    add.ne stack[r2], r0, r1
; CHECK-NEXT:    ret
  %load = load i256, ptr %s
  %select = select i1 %cond, i256 %load, i256 12345
  ret i256 %select
}

define i256 @selisr(i1 %cond, ptr %s) {
; CHECK-LABEL: selisr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add stack[r2], r0, r1
; CHECK-NEXT:    add.ne 12345, r0, r1
; CHECK-NEXT:    ret
  %load = load i256, ptr %s
  %select = select i1 %cond, i256 12345, i256 %load
  ret i256 %select
}

define i256 @selssr(i1 %cond, ptr %s1, ptr %s2) {
; CHECK-LABEL: selssr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add stack[r3], r0, r1
; CHECK-NEXT:    add.ne stack[r2], r0, r1
; CHECK-NEXT:    ret
  %load1 = load i256, ptr %s1
  %load2 = load i256, ptr %s2
  %select = select i1 %cond, i256 %load1, i256 %load2
  ret i256 %select
}

define i256 @selcrr(i1 %cond, ptr addrspace(4) %c, i256 %v1) {
; CHECK-LABEL: selcrr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add.ne code[r2], r0, r3
; CHECK-NEXT:    add r3, r0, r1
; CHECK-NEXT:    ret
  %load = load i256, ptr addrspace(4) %c
  %select = select i1 %cond, i256 %load, i256 %v1
  ret i256 %select
}

define i256 @selrcr(i1 %cond, ptr addrspace(4) %c, i256 %v1) {
; CHECK-LABEL: selrcr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add.eq code[r2], r0, r3
; CHECK-NEXT:    add r3, r0, r1
; CHECK-NEXT:    ret
  %load = load i256, ptr addrspace(4) %c
  %select = select i1 %cond, i256 %v1, i256 %load
  ret i256 %select
}

define i256 @selcir(i1 %cond, ptr addrspace(4) %c) {
; CHECK-LABEL: selcir:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add 12345, r0, r1
; CHECK-NEXT:    add.ne code[r2], r0, r1
; CHECK-NEXT:    ret
  %load = load i256, ptr addrspace(4) %c
  %select = select i1 %cond, i256 %load, i256 12345
  ret i256 %select
}

define i256 @selicr(i1 %cond, ptr addrspace(4) %c) {
; CHECK-LABEL: selicr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add code[r2], r0, r1
; CHECK-NEXT:    add.ne 12345, r0, r1
; CHECK-NEXT:    ret
  %load = load i256, ptr addrspace(4) %c
  %select = select i1 %cond, i256 12345, i256 %load
  ret i256 %select
}

define i256 @selccr(i1 %cond, ptr addrspace(4) %c1, ptr addrspace(4) %c2) {
; CHECK-LABEL: selccr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add code[r3], r0, r1
; CHECK-NEXT:    add.ne code[r2], r0, r1
; CHECK-NEXT:    ret
  %load1 = load i256, ptr addrspace(4) %c1
  %load2 = load i256, ptr addrspace(4) %c2
  %select = select i1 %cond, i256 %load1, i256 %load2
  ret i256 %select
}

define i256 @selscr(i1 %cond, ptr %s, ptr addrspace(4) %c) {
; CHECK-LABEL: selscr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add code[r3], r0, r1
; CHECK-NEXT:    add.ne stack[r2], r0, r1
; CHECK-NEXT:    ret
  %load1 = load i256, ptr %s
  %load2 = load i256, ptr addrspace(4) %c
  %select = select i1 %cond, i256 %load1, i256 %load2
  ret i256 %select
}

define i256 @selcsr(i1 %cond, ptr %s, ptr addrspace(4) %c) {
; CHECK-LABEL: selcsr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r1
; CHECK-NEXT:    add stack[r2], r0, r1
; CHECK-NEXT:    add.ne code[r3], r0, r1
; CHECK-NEXT:    ret
  %load1 = load i256, ptr %s
  %load2 = load i256, ptr addrspace(4) %c
  %select = select i1 %cond, i256 %load2, i256 %load1
  ret i256 %select
}
