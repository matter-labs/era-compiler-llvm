; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s | FileCheck %s

target datalayout = "E-p:256:256-i8:256:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

; CHECK-LABEL: .text

define i256 @materialize_small_imm() nounwind {
; CHECK-LABEL: materialize_small_imm:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add 65535, r0, r1
; CHECK-NEXT:    ret
  ret i256 65535
}

define i256 @materialize_big_imm() nounwind {
; CHECK-LABEL: materialize_big_imm:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add @CPI1_0[0], r0, r1
; CHECK-NEXT:    ret
  ret i256 65536
}

define i256 @materialize_negative_imm(i256 %par) nounwind {
; CHECK-LABEL: materialize_negative_imm:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s 1, r0, r1
; CHECK-NEXT:    ret
  ret i256 -1
}

define i256 @materialize_negative_imm_2(i256 %par) nounwind {
; CHECK-LABEL: materialize_negative_imm_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s 32767, r0, r1
; CHECK-NEXT:    ret
  ret i256 -32767
}

define i256 @materialize_smallimm_in_operation(i256 %par) nounwind {
; CHECK-LABEL: materialize_smallimm_in_operation:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add 42, r1, r1
; CHECK-NEXT:    ret
  %res = add i256 %par, 42
  ret i256 %res
}

define i256 @materialize_bigimm_in_operation(i256 %par) nounwind {
; CHECK-LABEL: materialize_bigimm_in_operation:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s 42, r1, r1
; CHECK-NEXT:    ret
  %res = add i256 %par, -42
  ret i256 %res
}

define i256 @materialize_bigimm_in_operation_2(i256 %par) nounwind {
; CHECK-LABEL: materialize_bigimm_in_operation_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s 42, r1, r1
; CHECK-NEXT:    ret
  %res = add i256 -42, %par
  ret i256 %res
}

define i256 @materialize_bigimm_in_and_operation(i256 %par) nounwind {
; TODO: CPR-1365 Consider to trade size for cycles in O3 / hot code
; CHECK-LABEL: materialize_bigimm_in_and_operation:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s 42, r0, r2
; CHECK-NEXT:    and r1, r2, r1
; CHECK-NEXT:    ret
  %res = and i256 %par, -42
  ret i256 %res
}

define i256 @materialize_bigimm_in_xor_operation(i256 %par) nounwind {
; TODO: CPR-1365 Consider to trade size for cycles in O3 / hot code
; CHECK-LABEL: materialize_bigimm_in_xor_operation:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s 42, r0, r2
; CHECK-NEXT:    xor r1, r2, r1
; CHECK-NEXT:    ret
  %res = xor i256 -42, %par
  ret i256 %res
}

define i256 @materialize_bigimm_in_sub_operation(i256 %par) nounwind {
; CHECK-LABEL: materialize_bigimm_in_sub_operation:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add 42, r1, r1
; CHECK-NEXT:    ret
  %res = sub i256 %par, -42
  ret i256 %res
}

define i256 @materialize_bigimm_in_sub_operation_2(i256 %par) nounwind {
; CHECK-LABEL: materialize_bigimm_in_sub_operation_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s 42, r0, r2
; CHECK-NEXT:    sub r2, r1, r1
; CHECK-NEXT:    ret
  %res = sub i256 -42, %par
  ret i256 %res
}

define i256 @materialize_zero() nounwind {
; CHECK-LABEL: materialize_zero:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    ret
  ret i256 0
}

define i256 @materialize_bigimm_1(i256 %par) nounwind {
; CHECK-LABEL: materialize_bigimm_1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add @CPI12_0[0], r0, r2
; CHECK-NEXT:    sub r2, r1, r1
; CHECK-NEXT:    ret
  %res = sub i256 12345678901234567890, %par
  ret i256 %res
}

define i256 @materialize_bigimm_2(i256 %par) nounwind {
; CHECK-LABEL: materialize_bigimm_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add @CPI13_0[0], r0, r2
; CHECK-NEXT:    sub r2, r1, r1
; CHECK-NEXT:    ret
  %res = sub i256 12345678901234567890, %par
  ret i256 %res
}

; The follow checks constant pool emitting

; CHECK-LABEL: .rodata

; materialize_big_imm
; CHECK-LABEL: CPI1_0:
; CHECK: .cell 65536

; constants with same value but from different functions share a single slot
; CHECK-LABEL: CPI12_0:
; CHECK-NEXT: CPI13_0:
; CHECK-NEXT: .cell 12345678901234567890
