; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 --disable-eravm-scalar-opt-passes < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

declare { i256, i1 } @llvm.umul.with.overflow.i256(i256, i256)

define i256 @test_lo_large_imm1(i256 %a) {
; CHECK-LABEL: test_lo_large_imm1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul @CPI0_0[0], r1, r2, r3
; CHECK-NEXT:    sub.s! @CPI0_1[0], r1, r3
; CHECK-NEXT:    add.ge r1, r0, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %mul = mul i256 %a, 26959946660873538059280334323183841250350249843923952699046031785980
  %cmp = icmp ult i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %select = select i1 %cmp, i256 %mul, i256 %a
  ret i256 %select
}

define i256 @test_hi_large_imm1(i256 %a) {
; CHECK-LABEL: test_hi_large_imm1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul @CPI1_0[0], r1, r3, r2
; CHECK-NEXT:    sub.s! @CPI1_1[0], r1, r3
; CHECK-NEXT:    add.ge r1, r0, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %al = zext i256 %a to i512
  %mul = mul i512 %al, 26959946660873538059280334323183841250350249843923952699046031785980
  %resl = lshr i512 %mul, 256
  %res = trunc i512 %resl to i256
  %cmp = icmp ult i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %select = select i1 %cmp, i256 %res, i256 %a
  ret i256 %select
}

define i256 @test_lo_large_imm2(i256 %a) {
; CHECK-LABEL: test_lo_large_imm2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul @CPI2_0[0], r1, r2, r3
; CHECK-NEXT:    sub.s! @CPI2_1[0], r1, r3
; CHECK-NEXT:    add.ge r2, r0, r1
; CHECK-NEXT:    ret
  %mul = mul i256 %a, 26959946660873538059280334323183841250350249843923952699046031785980
  %cmp = icmp ult i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %select = select i1 %cmp, i256 %a, i256 %mul
  ret i256 %select
}

define i256 @test_hi_large_imm2(i256 %a) {
; CHECK-LABEL: test_hi_large_imm2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul @CPI3_0[0], r1, r2, r3
; CHECK-NEXT:    sub.s! @CPI3_1[0], r1, r2
; CHECK-NEXT:    add.ge r3, r0, r1
; CHECK-NEXT:    ret
  %al = zext i256 %a to i512
  %mul = mul i512 %al, 26959946660873538059280334323183841250350249843923952699046031785980
  %resl = lshr i512 %mul, 256
  %res = trunc i512 %resl to i256
  %cmp = icmp ult i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %select = select i1 %cmp, i256 %a, i256 %res
  ret i256 %select
}

define i256 @test_lo_small_imm1(i256 %a) {
; CHECK-LABEL: test_lo_small_imm1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul 10, r1, r2, r3
; CHECK-NEXT:    sub.s! @CPI4_0[0], r1, r3
; CHECK-NEXT:    add.ge r1, r0, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %mul = mul i256 %a, 10
  %cmp = icmp ult i256 %a, -5
  %select = select i1 %cmp, i256 %mul, i256 %a
  ret i256 %select
}

define i256 @test_hi_small_imm1(i256 %a) {
; CHECK-LABEL: test_hi_small_imm1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul 10, r1, r3, r2
; CHECK-NEXT:    sub.s! @CPI5_0[0], r1, r3
; CHECK-NEXT:    add.ge r1, r0, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %al = zext i256 %a to i512
  %mul = mul i512 %al, 10
  %resl = lshr i512 %mul, 256
  %res = trunc i512 %resl to i256
  %cmp = icmp ult i256 %a, -5
  %select = select i1 %cmp, i256 %res, i256 %a
  ret i256 %select
}

define i256 @test_lo_small_imm2(i256 %a) {
; CHECK-LABEL: test_lo_small_imm2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul 10, r1, r2, r3
; CHECK-NEXT:    sub.s! @CPI6_0[0], r1, r3
; CHECK-NEXT:    add.ge r2, r0, r1
; CHECK-NEXT:    ret
  %mul = mul i256 %a, 10
  %cmp = icmp ult i256 %a, -5
  %select = select i1 %cmp, i256 %a, i256 %mul
  ret i256 %select
}

define i256 @test_hi_small_imm2(i256 %a) {
; CHECK-LABEL: test_hi_small_imm2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul 10, r1, r2, r3
; CHECK-NEXT:    sub.s! @CPI7_0[0], r1, r2
; CHECK-NEXT:    add.ge r3, r0, r1
; CHECK-NEXT:    ret
  %al = zext i256 %a to i512
  %mul = mul i512 %al, 10
  %resl = lshr i512 %mul, 256
  %res = trunc i512 %resl to i256
  %cmp = icmp ult i256 %a, -5
  %select = select i1 %cmp, i256 %a, i256 %res
  ret i256 %select
}

define i256 @test_lo_reg1(i256 %a, i256 %b) {
; CHECK-LABEL: test_lo_reg1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul r1, r2, r3, r4
; CHECK-NEXT:    sub! r1, r2, r2
; CHECK-NEXT:    add.ge r1, r0, r3
; CHECK-NEXT:    add r3, r0, r1
; CHECK-NEXT:    ret
  %mul = mul i256 %a, %b
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %mul, i256 %a
  ret i256 %select
}

define i256 @test_hi_reg1(i256 %a, i256 %b) {
; CHECK-LABEL: test_hi_reg1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul r1, r2, r4, r3
; CHECK-NEXT:    sub! r1, r2, r2
; CHECK-NEXT:    add.ge r1, r0, r3
; CHECK-NEXT:    add r3, r0, r1
; CHECK-NEXT:    ret
  %al = zext i256 %a to i512
  %bl = zext i256 %b to i512
  %mul = mul i512 %al, %bl
  %resl = lshr i512 %mul, 256
  %res = trunc i512 %resl to i256
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %res, i256 %a
  ret i256 %select
}

define i256 @test_lo_reg2(i256 %a, i256 %b) {
; CHECK-LABEL: test_lo_reg2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul r1, r2, r3, r4
; CHECK-NEXT:    sub! r1, r2, r2
; CHECK-NEXT:    add.ge r3, r0, r1
; CHECK-NEXT:    ret
  %mul = mul i256 %a, %b
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %a, i256 %mul
  ret i256 %select
}

define i256 @test_hi_reg2(i256 %a, i256 %b) {
; CHECK-LABEL: test_hi_reg2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul r1, r2, r3, r4
; CHECK-NEXT:    sub! r1, r2, r2
; CHECK-NEXT:    add.ge r4, r0, r1
; CHECK-NEXT:    ret
  %al = zext i256 %a to i512
  %bl = zext i256 %b to i512
  %mul = mul i512 %al, %bl
  %resl = lshr i512 %mul, 256
  %res = trunc i512 %resl to i256
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %a, i256 %res
  ret i256 %select
}

define i256 @test_lo_reg1_fold_cond_of(i256 %a, i256 %b, i256 %x, i256 %y) {
; CHECK-LABEL: test_lo_reg1_fold_cond_of:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul r1, r2, r2, r5
; CHECK-NEXT:    mul! r3, r4, r3, r4
; CHECK-NEXT:    add.lt r2, r0, r1
; CHECK-NEXT:    ret
  %mul = mul i256 %a, %b
  %res = call {i256, i1} @llvm.umul.with.overflow.i256(i256 %x, i256 %y)
  %overflow = extractvalue {i256, i1} %res, 1
  %select = select i1 %overflow, i256 %mul, i256 %a
  ret i256 %select
}

define i256 @test_lo_reg2_dont_fold_cond_of(i256 %a, i256 %b, i256 %x, i256 %y) {
; CHECK-LABEL: test_lo_reg2_dont_fold_cond_of:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul r1, r2, r2, r5
; CHECK-NEXT:    mul! r3, r4, r3, r4
; CHECK-NEXT:    add.lt r1, r0, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %mul = mul i256 %a, %b
  %res = call {i256, i1} @llvm.umul.with.overflow.i256(i256 %x, i256 %y)
  %overflow = extractvalue {i256, i1} %res, 1
  %select = select i1 %overflow, i256 %a, i256 %mul
  ret i256 %select
}

define i256 @test_hi_lo_dont_fold(i256 %a, i256 %b) {
; CHECK-LABEL: test_hi_lo_dont_fold:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    mul r1, r2, r3, r4
; CHECK-NEXT:    sub! r1, r2, r2
; CHECK-NEXT:    add.ge r4, r0, r1
; CHECK-NEXT:    add r1, r3, r1
; CHECK-NEXT:    ret
  %al = zext i256 %a to i512
  %bl = zext i256 %b to i512
  %mul = mul i512 %al, %bl
  %res1 = trunc i512 %mul to i256
  %resl = lshr i512 %mul, 256
  %res2 = trunc i512 %resl to i256
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %a, i256 %res2
  %add = add i256 %select, %res1
  ret i256 %add
}
