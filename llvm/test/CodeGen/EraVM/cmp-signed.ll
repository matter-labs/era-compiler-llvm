; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

define i1 @slt_not(i256 %a) {
; CHECK-LABEL: slt_not:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI0_1], r1, r0
; CHECK-NEXT:    add r0, r0, r2
; CHECK-NEXT:    add.lt code[@CPI0_0], r0, r2
; CHECK-NEXT:    and code[@CPI0_0], r1, r1
; CHECK-NEXT:    xor code[@CPI0_0], r1, r3
; CHECK-NEXT:    sub.s! code[@CPI0_0], r1, r0
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    add.gt code[@CPI0_0], r0, r1
; CHECK-NEXT:    sub.s! code[@CPI0_0], r3, r0
; CHECK-NEXT:    add.ne r2, r0, r1
; CHECK-NEXT:    sub! r1, r0, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.ne 1, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp slt i256 %a, -2
  ret i1 %ret
}

define i1 @sgt_not(i256 %a) {
; CHECK-LABEL: sgt_not:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI1_1], r1, r0
; CHECK-NEXT:    add r0, r0, r2
; CHECK-NEXT:    add.gt code[@CPI1_0], r0, r2
; CHECK-NEXT:    and code[@CPI1_0], r1, r1
; CHECK-NEXT:    xor code[@CPI1_0], r1, r3
; CHECK-NEXT:    sub.s! code[@CPI1_0], r1, r0
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    add.lt code[@CPI1_0], r0, r1
; CHECK-NEXT:    sub.s! code[@CPI1_0], r3, r0
; CHECK-NEXT:    add.ne r2, r0, r1
; CHECK-NEXT:    sub! r1, r0, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.ne 1, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp sgt i256 %a, -2
  ret i1 %ret
}

define i1 @slt_i8_1(i8 %a) {
; CHECK-LABEL: slt_i8_1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! 127, r1, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.gt 1, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp slt i8 %a, 0
  ret i1 %ret
}

define i1 @slt_i8_2(i8 %a) {
; CHECK-LABEL: slt_i8_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r0
; CHECK-NEXT:    add 0, r0, r2
; CHECK-NEXT:    add.eq 1, r0, r2
; CHECK-NEXT:    sub.s! 127, r1, r0
; CHECK-NEXT:    or.gt 1, r2, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp slt i8 %a, 1
  ret i1 %ret
}

define i1 @slt_i8_3(i8 %a) {
; CHECK-LABEL: slt_i8_3:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! 31, r1, r0
; CHECK-NEXT:    add 0, r0, r2
; CHECK-NEXT:    add.lt 1, r0, r2
; CHECK-NEXT:    sub.s! 127, r1, r0
; CHECK-NEXT:    or.gt 1, r2, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp slt i8 %a, 31
  ret i1 %ret
}

define i1 @sgt_i8_1(i8 %a) {
; CHECK-LABEL: sgt_i8_1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! 128, r1, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.lt 1, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp sgt i8 %a, -1
  ret i1 %ret
}

define i1 @sgt_i8_2(i8 %a) {
; CHECK-LABEL: sgt_i8_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r0
; CHECK-NEXT:    add 0, r0, r2
; CHECK-NEXT:    add.ne 1, r0, r2
; CHECK-NEXT:    sub.s! 128, r1, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.lt 1, r0, r1
; CHECK-NEXT:    and r1, r2, r1
; CHECK-NEXT:    ret
  %ret = icmp sgt i8 %a, 0
  ret i1 %ret
}

define i1 @sgt_i8_3(i8 %a) {
; CHECK-LABEL: sgt_i8_3:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! 31, r1, r0
; CHECK-NEXT:    add 0, r0, r2
; CHECK-NEXT:    add.gt 1, r0, r2
; CHECK-NEXT:    sub.s! 128, r1, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.lt 1, r0, r1
; CHECK-NEXT:    and r1, r2, r1
; CHECK-NEXT:    ret
  %ret = icmp sgt i8 %a, 31
  ret i1 %ret
}

define i1 @slt_i256_1(i256 %a) {
; CHECK-LABEL: slt_i256_1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI8_0], r1, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.gt 1, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp slt i256 %a, 0
  ret i1 %ret
}

define i1 @slt_i256_2(i256 %a) {
; CHECK-LABEL: slt_i256_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r0
; CHECK-NEXT:    add 0, r0, r2
; CHECK-NEXT:    add.eq 1, r0, r2
; CHECK-NEXT:    sub.s! code[@CPI9_0], r1, r0
; CHECK-NEXT:    or.gt 1, r2, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp slt i256 %a, 1
  ret i1 %ret
}

define i1 @slt_i256_3(i256 %a) {
; CHECK-LABEL: slt_i256_3:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! 31, r1, r0
; CHECK-NEXT:    add 0, r0, r2
; CHECK-NEXT:    add.lt 1, r0, r2
; CHECK-NEXT:    sub.s! code[@CPI10_0], r1, r0
; CHECK-NEXT:    or.gt 1, r2, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp slt i256 %a, 31
  ret i1 %ret
}

define i1 @sgt_i256_1(i256 %a) {
; CHECK-LABEL: sgt_i256_1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI11_0], r1, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.lt 1, r0, r1
; CHECK-NEXT:    ret
  %ret = icmp sgt i256 %a, -1
  ret i1 %ret
}

define i1 @sgt_i256_2(i256 %a) {
; CHECK-LABEL: sgt_i256_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r0, r0
; CHECK-NEXT:    add 0, r0, r2
; CHECK-NEXT:    add.ne 1, r0, r2
; CHECK-NEXT:    sub.s! code[@CPI12_0], r1, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.lt 1, r0, r1
; CHECK-NEXT:    and r1, r2, r1
; CHECK-NEXT:    ret
  %ret = icmp sgt i256 %a, 0
  ret i1 %ret
}

define i1 @sgt_i256_3(i256 %a) {
; CHECK-LABEL: sgt_i256_3:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! 31, r1, r0
; CHECK-NEXT:    add 0, r0, r2
; CHECK-NEXT:    add.gt 1, r0, r2
; CHECK-NEXT:    sub.s! code[@CPI13_0], r1, r0
; CHECK-NEXT:    add 0, r0, r1
; CHECK-NEXT:    add.lt 1, r0, r1
; CHECK-NEXT:    and r1, r2, r1
; CHECK-NEXT:    ret
  %ret = icmp sgt i256 %a, 31
  ret i1 %ret
}
