; XFAIL: *
; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -O3 -eravm-disable-sha3-sreq-cse -S < %s | FileCheck %s
; RUN: opt -O3 -enable-newgvn -eravm-disable-sha3-sreq-cse -S < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

define i256 @test_srequest_noelim(i256 %address, i256 %sig, i256 %size, ptr noalias nocapture nofree noundef nonnull align 32 %ptr1) {
; CHECK-LABEL: define i256 @test_srequest_noelim
; CHECK-SAME: (i256 [[ADDRESS:%.*]], i256 [[SIG:%.*]], i256 [[SIZE:%.*]], ptr noalias nocapture nofree noundef nonnull readonly align 32 [[PTR1:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VAL1:%.*]] = tail call fastcc i256 @__system_request(i256 [[ADDRESS]], i256 [[SIG]], i256 [[SIZE]], ptr noalias nocapture nofree noundef nonnull align 32 [[PTR1]])
; CHECK-NEXT:    [[VAL2:%.*]] = tail call fastcc i256 @__system_request(i256 [[ADDRESS]], i256 [[SIG]], i256 [[SIZE]], ptr noalias nocapture nofree noundef nonnull align 32 [[PTR1]])
; CHECK-NEXT:    [[RES:%.*]] = add nuw nsw i256 [[VAL2]], [[VAL1]]
; CHECK-NEXT:    ret i256 [[RES]]
;
entry:
  %val1 = call i256 @__system_request(i256 %address, i256 %sig, i256 %size, ptr noalias nocapture nofree noundef nonnull align 32 %ptr1)
  %val2 = call i256 @__system_request(i256 %address, i256 %sig, i256 %size, ptr noalias nocapture nofree noundef nonnull align 32 %ptr1)
  %res = add nuw nsw i256 %val1, %val2
  ret i256 %res
}

define i256 @test_srequest_slice_fallback_noelim(i256 %address, i256 %size, ptr noalias nocapture nofree noundef nonnull align 32 %ptr1) {
; CHECK-LABEL: define i256 @test_srequest_slice_fallback_noelim
; CHECK-SAME: (i256 [[ADDRESS:%.*]], i256 [[SIZE:%.*]], ptr noalias nocapture nofree noundef nonnull readonly align 32 [[PTR1:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RET1:%.*]] = tail call fastcc ptr addrspace(3) @__system_request_slice_fallback(i256 [[ADDRESS]], i256 [[SIZE]], ptr noalias nocapture nofree noundef nonnull align 32 [[PTR1]])
; CHECK-NEXT:    [[RET2:%.*]] = tail call fastcc ptr addrspace(3) @__system_request_slice_fallback(i256 [[ADDRESS]], i256 [[SIZE]], ptr noalias nocapture nofree noundef nonnull align 32 [[PTR1]])
; CHECK-NEXT:    [[VAL1:%.*]] = load i256, ptr addrspace(3) [[RET1]], align 32
; CHECK-NEXT:    [[VAL2:%.*]] = load i256, ptr addrspace(3) [[RET2]], align 32
; CHECK-NEXT:    [[RES:%.*]] = add nuw nsw i256 [[VAL2]], [[VAL1]]
; CHECK-NEXT:    ret i256 [[RES]]
;
entry:
  %ret1 = call i8 addrspace(3)* @__system_request_slice_fallback(i256 %address, i256 %size, ptr noalias nocapture nofree noundef nonnull align 32 %ptr1)
  %ret2 = call i8 addrspace(3)* @__system_request_slice_fallback(i256 %address, i256 %size, ptr noalias nocapture nofree noundef nonnull align 32 %ptr1)
  %val1 = load i256, i8 addrspace(3)* addrspace(3)* %ret1
  %val2 = load i256, i8 addrspace(3)* addrspace(3)* %ret2
  %res = add nuw nsw i256 %val1, %val2
  ret i256 %res
}

define i256 @test_sha3_noelim1(ptr addrspace(1) nocapture %addr) {
; CHECK-LABEL: define i256 @test_sha3_noelim1
; CHECK-SAME: (ptr addrspace(1) nocapture readonly [[ADDR:%.*]]) local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VAL1:%.*]] = tail call fastcc i256 @__sha3(ptr addrspace(1) [[ADDR]])
; CHECK-NEXT:    [[VAL2:%.*]] = tail call fastcc i256 @__sha3(ptr addrspace(1) [[ADDR]])
; CHECK-NEXT:    [[RES:%.*]] = add nuw nsw i256 [[VAL2]], [[VAL1]]
; CHECK-NEXT:    ret i256 [[RES]]
;
entry:
  %val1 = call i256 @__sha3(ptr addrspace(1) %addr, i256 96, i1 true)
  %val2 = call i256 @__sha3(ptr addrspace(1) %addr, i256 96, i1 true)
  %res = add nuw nsw i256 %val1, %val2
  ret i256 %res
}

declare void @dummy()
declare i256 @__system_request(i256, i256, i256, ptr) #0
declare i8 addrspace(3)* @__system_request_slice_fallback(i256, i256, ptr) #0
declare i256 @__sha3(i8 addrspace(1)* %0, i256 %1, i1 %throw_at_failure) #0

attributes #0 = { argmemonly nofree null_pointer_is_valid readonly }
