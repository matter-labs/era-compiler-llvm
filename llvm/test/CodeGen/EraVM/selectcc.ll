; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s | FileCheck %s

target triple = "eravm"
target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"

@val = addrspace(4) global i256 42
@val2 = addrspace(4) global i256 17

define i256 @selopt(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selopt:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.eq r2, r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ne i256 %v3, %v4
  %2 = select i1 %1, i256 %v1, i256 %v2
  ret i256 %2
}

define i256 @selrrr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrrr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.ne r2, r0, r1
; CHECK-NEXT:    ret
  %1 = icmp eq i256 %v3, %v4
  %2 = select i1 %1, i256 %v1, i256 %v2
  ret i256 %2
}

define i256 @selirr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selirr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.gt 42, r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ugt i256 %v3, %v4
  %2 = select i1 %1, i256 42, i256 %v2
  ret i256 %2
}

define i256 @selcrr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcrr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.gt code[@val], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ugt i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %2 = select i1 %1, i256 %const, i256 %v2
  ret i256 %2
}

define i256 @selcrr_zero_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcrr_zero_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    add.lt code[@CPI4_0], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %2 = select i1 %1, i256 123456789, i256 0
  ret i256 %2
}

define i256 @selcrr_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcrr_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.lt code[@CPI5_0], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %2 = select i1 %1, i256 123456789, i256 %v1
  ret i256 %2
}
define i256 @selsrr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selsrr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.gt stack-[1], r0, r1
; CHECK-NEXT:    ret
  %data = alloca i256
  %1 = icmp ugt i256 %v3, %v4
  %val = load i256, i256* %data
  %2 = select i1 %1, i256 %val, i256 %v2
  ret i256 %2
}

define i256 @selrir(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrir:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.ge 42, r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %2 = select i1 %1, i256 %v1, i256 42
  ret i256 %2
}

define i256 @seliir(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: seliir:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add 42, r0, r1
; CHECK-NEXT:    add.lt 17, r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %2 = select i1 %1, i256 17, i256 42
  ret i256 %2
}

define i256 @selcir(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcir:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add 42, r0, r1
; CHECK-NEXT:    add.gt code[@val], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ugt i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %2 = select i1 %1, i256 %const, i256 42
  ret i256 %2
}

define i256 @selcir_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcir_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add 42, r0, r1
; CHECK-NEXT:    add.gt code[@CPI10_0], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ugt i256 %v3, %v4
  %2 = select i1 %1, i256 123456789, i256 42
  ret i256 %2
}

define i256 @selsir(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selsir:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add 42, r0, r1
; CHECK-NEXT:    add.gt stack-[1], r0, r1
; CHECK-NEXT:    ret
  %data = alloca i256
  %1 = icmp ugt i256 %v3, %v4
  %val = load i256, i256* %data
  %2 = select i1 %1, i256 %val, i256 42
  ret i256 %2
}

define i256 @selrcr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrcr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.ge code[@val], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %2 = select i1 %1, i256 %v1, i256 %const
  ret i256 %2
}

define i256 @selrcr_zero_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrcr_zero_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@CPI13_0], r0, r1
; CHECK-NEXT:    add.lt r0, r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %2 = select i1 %1, i256 0, i256 123456789
  ret i256 %2
}

define i256 @selrcr_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrcr_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.ge code[@CPI14_0], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %2 = select i1 %1, i256 %v1, i256 123456789
  ret i256 %2
}

define i256 @selicr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selicr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@val], r0, r1
; CHECK-NEXT:    add.lt 42, r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %2 = select i1 %1, i256 42, i256 %const
  ret i256 %2
}

define i256 @selicr_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selicr_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@CPI16_0], r0, r1
; CHECK-NEXT:    add.lt 42, r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %2 = select i1 %1, i256 42, i256 123456789
  ret i256 %2
}

define i256 @selccr_cl_cl(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selccr_cl_cl:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@val], r0, r1
; CHECK-NEXT:    add.lt code[@val2], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %const2 = load i256, i256 addrspace(4)* @val2
  %2 = select i1 %1, i256 %const2, i256 %const
  ret i256 %2
}

define i256 @selccr_cl_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selccr_cl_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@CPI18_0], r0, r1
; CHECK-NEXT:    add.lt code[@val], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %2 = select i1 %1, i256 %const, i256 12345678
  ret i256 %2
}

define i256 @selccr_cp_cl(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selccr_cp_cl:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@val], r0, r1
; CHECK-NEXT:    add.lt code[@CPI19_0], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %2 = select i1 %1, i256 12345678, i256 %const
  ret i256 %2
}

define i256 @selccr_cp_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selccr_cp_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@CPI20_1], r0, r1
; CHECK-NEXT:    add.lt code[@CPI20_0], r0, r1
; CHECK-NEXT:    ret
  %1 = icmp ult i256 %v3, %v4
  %2 = select i1 %1, i256 12345678, i256 123456789
  ret i256 %2
}

define i256 @selscr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selscr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@val], r0, r1
; CHECK-NEXT:    add.lt stack-[1], r0, r1
; CHECK-NEXT:    ret
  %ptr = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %val2 = load i256, i256* %ptr
  %2 = select i1 %1, i256 %val2, i256 %const
  ret i256 %2
}

define i256 @selscr_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selscr_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@CPI22_0], r0, r1
; CHECK-NEXT:    add.lt stack-[1], r0, r1
; CHECK-NEXT:    ret
  %ptr = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val2 = load i256, i256* %ptr
  %2 = select i1 %1, i256 %val2, i256 123456789
  ret i256 %2
}

define i256 @selrsr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrsr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add.ge stack-[1], r0, r1
; CHECK-NEXT:    ret
  %data = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data
  %2 = select i1 %1, i256 %v1, i256 %val
  ret i256 %2
}

define i256 @selisr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selisr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add stack-[1], r0, r1
; CHECK-NEXT:    add.lt 42, r0, r1
; CHECK-NEXT:    ret
  %data = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data
  %2 = select i1 %1, i256 42, i256 %val
  ret i256 %2
}

define i256 @selcsr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcsr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add stack-[1], r0, r1
; CHECK-NEXT:    add.lt code[@val], r0, r1
; CHECK-NEXT:    ret
  %data = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data
  %const = load i256, i256 addrspace(4)* @val
  %2 = select i1 %1, i256 %const, i256 %val
  ret i256 %2
}

define i256 @selcsr_cp(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcsr_cp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add stack-[1], r0, r1
; CHECK-NEXT:    add.lt code[@CPI26_0], r0, r1
; CHECK-NEXT:    ret
  %data = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data
  %2 = select i1 %1, i256 123456789, i256 %val
  ret i256 %2
}

define i256 @selssr(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selssr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[2 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add stack-[2], r0, r1
; CHECK-NEXT:    add.lt stack-[1], r0, r1
; CHECK-NEXT:    ret
  %data1 = alloca i256
  %data2 = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data1
  %val2 = load i256, i256* %data2
  %2 = select i1 %1, i256 %val2, i256 %val
  ret i256 %2
}

define void @selrrs(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrrs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add r2, r0, stack-[1]
; CHECK-NEXT:    add.eq r1, r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  ; TODO: CPR-986
  %1 = icmp eq i256 %v3, %v4
  %2 = select i1 %1, i256 %v1, i256 %v2
  store i256 %2, i256* %resptr
  ret void
}

define void @selirs(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selirs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add r2, r0, stack-[1]
; CHECK-NEXT:    add.gt 42, r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %1 = icmp ugt i256 %v3, %v4
  ; TODO: CPR-986
  %2 = select i1 %1, i256 42, i256 %v2
  store i256 %2, i256* %resptr
  ret void
}

define void @selcrs(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcrs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add r2, r0, stack-[1]
; CHECK-NEXT:    add.gt code[@val], r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %1 = icmp ugt i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %const, i256 %v2
  store i256 %2, i256* %resptr
  ret void
}

define void @selsrs(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selsrs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[2 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add r2, r0, stack-[2]
; CHECK-NEXT:    add.gt stack-[1], r0, stack-[2]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %data = alloca i256
  %1 = icmp ugt i256 %v3, %v4
  %val = load i256, i256* %data
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %val, i256 %v2
  store i256 %2, i256* %resptr
  ret void
}

define void @selris(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selris:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add 42, r0, stack-[1]
; CHECK-NEXT:    add.lt r1, r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %1 = icmp ult i256 %v3, %v4
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %v1, i256 42
  store i256 %2, i256* %resptr
  ret void
}

define void @seliis(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: seliis:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add 42, r0, stack-[1]
; CHECK-NEXT:    add.lt 17, r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %1 = icmp ult i256 %v3, %v4
  ; TODO: CPR-986
  %2 = select i1 %1, i256 17, i256 42
  store i256 %2, i256* %resptr
  ret void
}

define void @selcis(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcis:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add 42, r0, stack-[1]
; CHECK-NEXT:    add.gt code[@val], r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %1 = icmp ugt i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %const, i256 42
  store i256 %2, i256* %resptr
  ret void
}

define void @selsis(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selsis:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[2 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add 42, r0, stack-[2]
; CHECK-NEXT:    add.gt stack-[1], r0, stack-[2]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %data = alloca i256
  %1 = icmp ugt i256 %v3, %v4
  %val = load i256, i256* %data
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %val, i256 42
  store i256 %2, i256* %resptr
  ret void
}

define void @selrcs(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrcs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@val], r0, stack-[1]
; CHECK-NEXT:    add.lt r1, r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %v1, i256 %const
  store i256 %2, i256* %resptr
  ret void
}

define void @selics(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selics:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@val], r0, stack-[1]
; CHECK-NEXT:    add.lt 42, r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  ; TODO: CPR-986
  %2 = select i1 %1, i256 42, i256 %const
  store i256 %2, i256* %resptr
  ret void
}

define void @selccs(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selccs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[1 + r0]
; CHECK-NEXT:    add code[@val2], r0, r1
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add code[@val], r0, stack-[1]
; CHECK-NEXT:    add.lt r1, r0, stack-[1]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %const2 = load i256, i256 addrspace(4)* @val2
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %const2, i256 %const
  store i256 %2, i256* %resptr
  ret void
}

define void @selscs(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selscs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[2 + r0]
; CHECK-NEXT:    add code[@val], r0, r1
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add r1, r0, stack-[2]
; CHECK-NEXT:    add.lt stack-[1], r0, stack-[2]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %ptr = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %const = load i256, i256 addrspace(4)* @val
  %val2 = load i256, i256* %ptr
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %val2, i256 %const
  store i256 %2, i256* %resptr
  ret void
}

define void @selrss(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selrss:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[2 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add stack-[1], r0, stack-[2]
; CHECK-NEXT:    add.lt r1, r0, stack-[2]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %data = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %v1, i256 %val
  store i256 %2, i256* %resptr
  ret void
}

define void @seliss(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: seliss:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[2 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add stack-[1], r0, stack-[2]
; CHECK-NEXT:    add.lt 42, r0, stack-[2]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %data = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data
  ; TODO: CPR-986
  %2 = select i1 %1, i256 42, i256 %val
  store i256 %2, i256* %resptr
  ret void
}

define void @selcss(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selcss:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[2 + r0]
; CHECK-NEXT:    add code[@val], r0, r1
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add stack-[1], r0, stack-[2]
; CHECK-NEXT:    add.lt r1, r0, stack-[2]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %data = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data
  %const = load i256, i256 addrspace(4)* @val
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %const, i256 %val
  store i256 %2, i256* %resptr
  ret void
}

define void @selsss(i256 %v1, i256 %v2, i256 %v3, i256 %v4) {
; CHECK-LABEL: selsss:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    nop stack+=[3 + r0]
; CHECK-NEXT:    sub! r3, r4, r0
; CHECK-NEXT:    add stack-[2], r0, r1
; CHECK-NEXT:    add.lt stack-[1], r0, r1
; CHECK-NEXT:    add r1, r0, stack-[3]
; CHECK-NEXT:    ret
  %resptr = alloca i256
  %data1 = alloca i256
  %data2 = alloca i256
  %1 = icmp ult i256 %v3, %v4
  %val = load i256, i256* %data1
  %val2 = load i256, i256* %data2
  ; TODO: CPR-986
  %2 = select i1 %1, i256 %val2, i256 %val
  store i256 %2, i256* %resptr
  ret void
}
