; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

define i256 @lshr(i256 %a) {
; CHECK-LABEL: lshr:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    shr.s! 3, r1, r1
; CHECK-NEXT:    add.eq r0, r0, r1
; CHECK-NEXT:  ; %bb.1: ; %else
; CHECK-NEXT:    ret
entry:
  %c = icmp ult i256 %a, 8
  br i1 %c, label %then, label %else

then:
  ret i256 0

else:
  %l = lshr i256 %a, 3
  ret i256 %l
}

define i256 @lshr_not(i256 %a) {
; CHECK-LABEL: lshr_not:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sub.s! 7, r1, r0
; CHECK-NEXT:    shr.s.gt 4, r1, r1
; CHECK-NEXT:    add.le r0, r0, r1
; CHECK-NEXT:    ret
entry:
  %c = icmp ult i256 %a, 8
  br i1 %c, label %then, label %else

then:
  ret i256 0

else:
  %l = lshr i256 %a, 4
  ret i256 %l
}

; Test where overflow intrinsic would be generated if this
; optimization is done in the CodeGenPrepare pass.
define i256 @add_overflow(i256 %a) {
; CHECK-LABEL: add_overflow:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    add! 1, r1, r1
; CHECK-NEXT:    add.eq r0, r0, r1
; CHECK-NEXT:  ; %bb.1: ; %else
; CHECK-NEXT:    ret
entry:
  %c = icmp eq i256 %a, -1
  br i1 %c, label %then, label %else

then:
  ret i256 0

else:
  %l = add i256 %a, 1
  ret i256 %l
}

define i256 @add(i256 %a) {
; CHECK-LABEL: add:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sub.s! 10, r1, r1
; CHECK-NEXT:    add.eq r0, r0, r1
; CHECK-NEXT:  ; %bb.1: ; %else
; CHECK-NEXT:    ret
entry:
  %c = icmp eq i256 %a, 10
  br i1 %c, label %then, label %else

then:
  ret i256 0

else:
  %l = add i256 %a, -10
  ret i256 %l
}

define i256 @add_not(i256 %a) {
; CHECK-LABEL: add_not:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sub.s! 10, r1, r0
; CHECK-NEXT:    add.ne 10, r1, r1
; CHECK-NEXT:    add.eq r0, r0, r1
; CHECK-NEXT:    ret
entry:
  %c = icmp eq i256 %a, 10
  br i1 %c, label %then, label %else

then:
  ret i256 0

else:
  %l = add i256 %a, 10
  ret i256 %l
}

define i256 @sub(i256 %a) {
; CHECK-LABEL: sub:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sub.s! 10, r1, r1
; CHECK-NEXT:    add.eq r0, r0, r1
; CHECK-NEXT:  ; %bb.1: ; %else
; CHECK-NEXT:    ret
entry:
  %c = icmp eq i256 %a, 10
  br i1 %c, label %then, label %else

then:
  ret i256 0

else:
  %l = sub i256 %a, 10
  ret i256 %l
}

define i256 @sub_not(i256 %a) {
; CHECK-LABEL: sub_not:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sub.s! 10, r1, r0
; CHECK-NEXT:    add.ne 10, r1, r1
; CHECK-NEXT:    add.eq r0, r0, r1
; CHECK-NEXT:    ret
entry:
  %c = icmp eq i256 %a, 10
  br i1 %c, label %then, label %else

then:
  ret i256 0

else:
  %l = sub i256 %a, -10
  ret i256 %l
}
