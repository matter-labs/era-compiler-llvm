; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 --disable-eravm-scalar-opt-passes < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

declare { i256, i1 } @llvm.uadd.with.overflow.i256(i256, i256)

@val = addrspace(4) global i256 42

define i256 @test_large_imm1(i256 %a) {
; CHECK-LABEL: test_large_imm1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI0_1], r1, r0
; CHECK-NEXT:    sub.s.lt code[@CPI0_0], r1, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, 26959946660873538059280334323183841250350249843923952699046031785980
  %cmp = icmp ult i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %select = select i1 %cmp, i256 %add, i256 %a
  ret i256 %select
}

define i256 @test_large_imm2(i256 %a) {
; CHECK-LABEL: test_large_imm2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI1_1], r1, r0
; CHECK-NEXT:    sub.s.lt code[@CPI1_0], r1, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %cmp = icmp ult i256 %a, 26959946660873538059280334323183841250350249843923952699046031785980
  %select = select i1 %cmp, i256 %add, i256 %a
  ret i256 %select
}

define i256 @test_large_imm3(i256 %a) {
; CHECK-LABEL: test_large_imm3:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI2_1], r1, r0
; CHECK-NEXT:    sub.s.ge code[@CPI2_0], r1, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, 26959946660873538059280334323183841250350249843923952699046031785980
  %cmp = icmp ult i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %select = select i1 %cmp, i256 %a, i256 %add
  ret i256 %select
}

define i256 @test_large_imm4(i256 %a) {
; CHECK-LABEL: test_large_imm4:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI3_1], r1, r0
; CHECK-NEXT:    sub.s.ge code[@CPI3_0], r1, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %cmp = icmp ult i256 %a, 26959946660873538059280334323183841250350249843923952699046031785980
  %select = select i1 %cmp, i256 %a, i256 %add
  ret i256 %select
}

define i256 @test_small_imm1(i256 %a) {
; CHECK-LABEL: test_small_imm1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI4_0], r1, r0
; CHECK-NEXT:    add.lt 10, r1, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, 10
  %cmp = icmp ult i256 %a, -5
  %select = select i1 %cmp, i256 %add, i256 %a
  ret i256 %select
}

define i256 @test_small_imm2(i256 %a) {
; CHECK-LABEL: test_small_imm2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! code[@CPI5_0], r1, r0
; CHECK-NEXT:    add.ge 10, r1, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, 10
  %cmp = icmp ult i256 %a, -5
  %select = select i1 %cmp, i256 %a, i256 %add
  ret i256 %select
}

define i256 @test_reg1(i256 %a, i256 %b) {
; CHECK-LABEL: test_reg1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r2, r0
; CHECK-NEXT:    add.lt r1, r2, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, %b
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %add, i256 %a
  ret i256 %select
}

define i256 @test_reg1_fold_cond_of(i256 %a, i256 %b, i256 %x, i256 %y) {
; CHECK-LABEL: test_reg1_fold_cond_of:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add! r3, r4, r0
; CHECK-NEXT:    add.lt r1, r2, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, %b
  %res = call {i256, i1} @llvm.uadd.with.overflow.i256(i256 %x, i256 %y)
  %overflow = extractvalue {i256, i1} %res, 1
  %select = select i1 %overflow, i256 %add, i256 %a
  ret i256 %select
}

define i256 @test_reg2(i256 %a, i256 %b) {
; CHECK-LABEL: test_reg2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r2, r0
; CHECK-NEXT:    add.ge r1, r2, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, %b
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %a, i256 %add
  ret i256 %select
}

define i256 @test_reg2_dont_fold_cond_of(i256 %a, i256 %b, i256 %x, i256 %y) {
; CHECK-LABEL: test_reg2_dont_fold_cond_of:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add r1, r2, r2
; CHECK-NEXT:    add! r3, r4, r0
; CHECK-NEXT:    add.lt r1, r0, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, %b
  %res = call {i256, i1} @llvm.uadd.with.overflow.i256(i256 %x, i256 %y)
  %overflow = extractvalue {i256, i1} %res, 1
  %select = select i1 %overflow, i256 %a, i256 %add
  ret i256 %select
}

define i256 @test_reg3(i256 %a, i256 %b) {
; CHECK-LABEL: test_reg3:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r2, r0
; CHECK-NEXT:    add.lt r1, r2, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, %b
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %add, i256 %b
  ret i256 %select
}

define i256 @test_reg3_fold_cond_of(i256 %a, i256 %b) {
; CHECK-LABEL: test_reg3_fold_cond_of:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add! r1, r2, r0
; CHECK-NEXT:    add.lt r1, r2, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, %b
  %res = call {i256, i1} @llvm.uadd.with.overflow.i256(i256 %a, i256 %b)
  %overflow = extractvalue {i256, i1} %res, 1
  %select = select i1 %overflow, i256 %add, i256 %b
  ret i256 %select
}

define i256 @test_reg4(i256 %a, i256 %b) {
; CHECK-LABEL: test_reg4:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r1, r2, r0
; CHECK-NEXT:    add.ge r1, r2, r2
; CHECK-NEXT:    add r2, r0, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, %b
  %cmp = icmp ult i256 %a, %b
  %select = select i1 %cmp, i256 %b, i256 %add
  ret i256 %select
}

define i256 @test_reg4_dont_fold_cond_of(i256 %a, i256 %b) {
; CHECK-LABEL: test_reg4_dont_fold_cond_of:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add r1, r2, r3
; CHECK-NEXT:    add! r1, r2, r0
; CHECK-NEXT:    add.lt r2, r0, r3
; CHECK-NEXT:    add r3, r0, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, %b
  %res = call {i256, i1} @llvm.uadd.with.overflow.i256(i256 %a, i256 %b)
  %overflow = extractvalue {i256, i1} %res, 1
  %select = select i1 %overflow, i256 %b, i256 %add
  ret i256 %select
}

define i256 @test_stack1(i256 %a) {
; CHECK-LABEL: test_stack1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    incsp 1
; CHECK-NEXT:    sub.s! 5, r1, r0
; CHECK-NEXT:    add.lt stack-[1], r1, r1
; CHECK-NEXT:    ret
  %bptr = alloca i256
  %b = load i256, i256* %bptr
  %add = add i256 %a, %b
  %cmp = icmp ult i256 %a, 5
  %select = select i1 %cmp, i256 %add, i256 %a
  ret i256 %select
}

define i256 @test_stack2(i256 %a) {
; CHECK-LABEL: test_stack2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    incsp 1
; CHECK-NEXT:    sub.s! 5, r1, r0
; CHECK-NEXT:    add.ge stack-[1], r1, r1
; CHECK-NEXT:    ret
  %bptr = alloca i256
  %b = load i256, i256* %bptr
  %add = add i256 %a, %b
  %cmp = icmp ult i256 %a, 5
  %select = select i1 %cmp, i256 %a, i256 %add
  ret i256 %select
}

define i256 @test_code1(i256 %a) {
; CHECK-LABEL: test_code1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! 5, r1, r0
; CHECK-NEXT:    add.lt code[@val], r1, r1
; CHECK-NEXT:    ret
  %b = load i256, i256 addrspace(4)* @val
  %add = add i256 %a, %b
  %cmp = icmp ult i256 %a, 5
  %select = select i1 %cmp, i256 %add, i256 %a
  ret i256 %select
}

define i256 @test_code2(i256 %a) {
; CHECK-LABEL: test_code2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s! 5, r1, r0
; CHECK-NEXT:    add.ge code[@val], r1, r1
; CHECK-NEXT:    ret
  %b = load i256, i256 addrspace(4)* @val
  %add = add i256 %a, %b
  %cmp = icmp ult i256 %a, 5
  %select = select i1 %cmp, i256 %a, i256 %add
  ret i256 %select
}

define i256 @test_use_in_other_bb(i256 %a, i1 %cond) {
; CHECK-LABEL: test_use_in_other_bb:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub! r2, r0, r0
; CHECK-NEXT:    jump.eq @.BB18_2
; CHECK-NEXT:  ; %bb.1: ; %then
; CHECK-NEXT:    add r0, r0, r1
; CHECK-NEXT:    ret
; CHECK-NEXT:  .BB18_2: ; %else
; CHECK-NEXT:    sub.s! code[@CPI18_1], r1, r0
; CHECK-NEXT:    sub.s.lt code[@CPI18_0], r1, r1
; CHECK-NEXT:    ret
  %add = add i256 %a, 26959946660873538059280334323183841250350249843923952699046031785980
  br i1 %cond, label %then, label %else

then:
  ret i256 0

else:
  %cmp = icmp ult i256 %a, -26959946660873538059280334323183841250350249843923952699046031785985
  %select = select i1 %cmp, i256 %add, i256 %a
  ret i256 %select
}

; CHECK: CPI4_0:
; CHECK: CPI5_0:
; CHECK:  .cell -5
