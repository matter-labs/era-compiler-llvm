; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

declare void @use(i256)

define i256 @test_this() {
; CHECK-LABEL: test_this:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    context.this r1
; CHECK-NEXT:    near_call r0, @use, @DEFAULT_UNWIND
; CHECK-NEXT:    context.this r1
; CHECK-NEXT:    ret
entry:
  %ret = call i256 @llvm.eravm.this()
  call void @use(i256 %ret)
  ret i256 %ret
}

define i256 @test_caller() {
; CHECK-LABEL: test_caller:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    context.caller r1
; CHECK-NEXT:    near_call r0, @use, @DEFAULT_UNWIND
; CHECK-NEXT:    context.caller r1
; CHECK-NEXT:    ret
entry:
  %ret = call i256 @llvm.eravm.caller()
  call void @use(i256 %ret)
  ret i256 %ret
}

define i256 @test_codesource() {
; CHECK-LABEL: test_codesource:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    context.code_source r1
; CHECK-NEXT:    near_call r0, @use, @DEFAULT_UNWIND
; CHECK-NEXT:    context.code_source r1
; CHECK-NEXT:    ret
entry:
  %ret = call i256 @llvm.eravm.codesource()
  call void @use(i256 %ret)
  ret i256 %ret
}

define i256 @test_getu128() {
; CHECK-LABEL: test_getu128:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    context.get_context_u128 r1
; CHECK-NEXT:    near_call r0, @use, @DEFAULT_UNWIND
; CHECK-NEXT:    context.get_context_u128 r1
; CHECK-NEXT:    ret
entry:
  %ret = call i256 @llvm.eravm.getu128()
  call void @use(i256 %ret)
  ret i256 %ret
}

declare i256 @llvm.eravm.this()
declare i256 @llvm.eravm.caller()
declare i256 @llvm.eravm.codesource()
declare i256 @llvm.eravm.getu128()
