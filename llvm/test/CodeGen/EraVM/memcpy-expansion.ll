; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=eravm-lower-intrinsics -S < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

declare void @llvm.memcpy.p1.p1.i256(ptr addrspace(1), ptr addrspace(1), i256, i1 immarg)
declare void @llvm.memcpy.p1.p3.i256(ptr addrspace(1), ptr addrspace(3), i256, i1 immarg)

define void @expand_unknown_p1_p3(ptr addrspace(1) %dest, ptr addrspace(3) %src, i256 %size) {
; CHECK-LABEL: define void @expand_unknown_p1_p3
; CHECK-SAME: (ptr addrspace(1) [[DEST:%.*]], ptr addrspace(3) [[SRC:%.*]], i256 [[SIZE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOOP_BYTES_COUNT:%.*]] = and i256 [[SIZE]], -32
; CHECK-NEXT:    [[RESIDUAL_BYTES:%.*]] = and i256 [[SIZE]], 31
; CHECK-NEXT:    [[DST_ADDR_END:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[DEST]], i256 [[LOOP_BYTES_COUNT]]
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne i256 [[LOOP_BYTES_COUNT]], 0
; CHECK-NEXT:    br i1 [[TMP0]], label [[LOAD_STORE_LOOP_PREHEADER:%.*]], label [[MEMCPY_RESIDUAL_COND:%.*]]
; CHECK:       load-store-loop-preheader:
; CHECK-NEXT:    br label [[LOAD_STORE_LOOP:%.*]]
; CHECK:       load-store-loop:
; CHECK-NEXT:    [[SRC_ADDR:%.*]] = phi ptr addrspace(3) [ [[SRC]], [[LOAD_STORE_LOOP_PREHEADER]] ], [ [[TMP1:%.*]], [[LOAD_STORE_LOOP]] ]
; CHECK-NEXT:    [[DST_ADDR:%.*]] = phi ptr addrspace(1) [ [[DEST]], [[LOAD_STORE_LOOP_PREHEADER]] ], [ [[TMP2:%.*]], [[LOAD_STORE_LOOP]] ]
; CHECK-NEXT:    [[TMP1]] = getelementptr inbounds i8, ptr addrspace(3) [[SRC_ADDR]], i256 32
; CHECK-NEXT:    [[TMP2]] = getelementptr inbounds i8, ptr addrspace(1) [[DST_ADDR]], i256 32
; CHECK-NEXT:    [[TMP3:%.*]] = load i256, ptr addrspace(3) [[SRC_ADDR]], align 1
; CHECK-NEXT:    store i256 [[TMP3]], ptr addrspace(1) [[DST_ADDR]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq ptr addrspace(1) [[TMP2]], [[DST_ADDR_END]]
; CHECK-NEXT:    br i1 [[TMP4]], label [[LOAD_STORE_LOOP_EXIT:%.*]], label [[LOAD_STORE_LOOP]]
; CHECK:       load-store-loop-exit:
; CHECK-NEXT:    br label [[MEMCPY_RESIDUAL_COND]]
; CHECK:       memcpy-residual-cond:
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ne i256 [[RESIDUAL_BYTES]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[MEMCPY_RESIDUAL:%.*]], label [[MEMCPY_SPLIT:%.*]]
; CHECK:       memcpy-residual:
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i8, ptr addrspace(3) [[SRC]], i256 [[LOOP_BYTES_COUNT]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i256, ptr addrspace(3) [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = shl i256 [[RESIDUAL_BYTES]], 3
; CHECK-NEXT:    [[TMP9:%.*]] = sub i256 256, [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = shl i256 -1, [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = and i256 [[TMP7]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = load i256, ptr addrspace(1) [[DST_ADDR_END]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = lshr i256 -1, [[TMP8]]
; CHECK-NEXT:    [[TMP14:%.*]] = and i256 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = or i256 [[TMP11]], [[TMP14]]
; CHECK-NEXT:    store i256 [[TMP15]], ptr addrspace(1) [[DST_ADDR_END]], align 1
; CHECK-NEXT:    br label [[MEMCPY_SPLIT]]
; CHECK:       memcpy-split:
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.memcpy.p1.p3.i256(ptr addrspace(1) %dest, ptr addrspace(3) %src, i256 %size, i1 false)
  ret void
}

define void @expand_unknown_p1_p1(ptr addrspace(1) %dest, ptr addrspace(1) %src, i256 %size) {
; CHECK-LABEL: define void @expand_unknown_p1_p1
; CHECK-SAME: (ptr addrspace(1) [[DEST:%.*]], ptr addrspace(1) [[SRC:%.*]], i256 [[SIZE:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LOOP_BYTES_COUNT:%.*]] = and i256 [[SIZE]], -32
; CHECK-NEXT:    [[RESIDUAL_BYTES:%.*]] = and i256 [[SIZE]], 31
; CHECK-NEXT:    [[DST_ADDR_END:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[DEST]], i256 [[LOOP_BYTES_COUNT]]
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne i256 [[LOOP_BYTES_COUNT]], 0
; CHECK-NEXT:    br i1 [[TMP0]], label [[LOAD_STORE_LOOP_PREHEADER:%.*]], label [[MEMCPY_RESIDUAL_COND:%.*]]
; CHECK:       load-store-loop-preheader:
; CHECK-NEXT:    br label [[LOAD_STORE_LOOP:%.*]]
; CHECK:       load-store-loop:
; CHECK-NEXT:    [[SRC_ADDR:%.*]] = phi ptr addrspace(1) [ [[SRC]], [[LOAD_STORE_LOOP_PREHEADER]] ], [ [[TMP1:%.*]], [[LOAD_STORE_LOOP]] ]
; CHECK-NEXT:    [[DST_ADDR:%.*]] = phi ptr addrspace(1) [ [[DEST]], [[LOAD_STORE_LOOP_PREHEADER]] ], [ [[TMP2:%.*]], [[LOAD_STORE_LOOP]] ]
; CHECK-NEXT:    [[TMP1]] = getelementptr inbounds i8, ptr addrspace(1) [[SRC_ADDR]], i256 32
; CHECK-NEXT:    [[TMP2]] = getelementptr inbounds i8, ptr addrspace(1) [[DST_ADDR]], i256 32
; CHECK-NEXT:    [[TMP3:%.*]] = load i256, ptr addrspace(1) [[SRC_ADDR]], align 1
; CHECK-NEXT:    store i256 [[TMP3]], ptr addrspace(1) [[DST_ADDR]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq ptr addrspace(1) [[TMP2]], [[DST_ADDR_END]]
; CHECK-NEXT:    br i1 [[TMP4]], label [[LOAD_STORE_LOOP_EXIT:%.*]], label [[LOAD_STORE_LOOP]]
; CHECK:       load-store-loop-exit:
; CHECK-NEXT:    br label [[MEMCPY_RESIDUAL_COND]]
; CHECK:       memcpy-residual-cond:
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ne i256 [[RESIDUAL_BYTES]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[MEMCPY_RESIDUAL:%.*]], label [[MEMCPY_SPLIT:%.*]]
; CHECK:       memcpy-residual:
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i8, ptr addrspace(1) [[SRC]], i256 [[LOOP_BYTES_COUNT]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i256, ptr addrspace(1) [[TMP6]], align 1
; CHECK-NEXT:    [[TMP8:%.*]] = shl i256 [[RESIDUAL_BYTES]], 3
; CHECK-NEXT:    [[TMP9:%.*]] = sub i256 256, [[TMP8]]
; CHECK-NEXT:    [[TMP10:%.*]] = shl i256 -1, [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = and i256 [[TMP7]], [[TMP10]]
; CHECK-NEXT:    [[TMP12:%.*]] = load i256, ptr addrspace(1) [[DST_ADDR_END]], align 1
; CHECK-NEXT:    [[TMP13:%.*]] = lshr i256 -1, [[TMP8]]
; CHECK-NEXT:    [[TMP14:%.*]] = and i256 [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[TMP15:%.*]] = or i256 [[TMP11]], [[TMP14]]
; CHECK-NEXT:    store i256 [[TMP15]], ptr addrspace(1) [[DST_ADDR_END]], align 1
; CHECK-NEXT:    br label [[MEMCPY_SPLIT]]
; CHECK:       memcpy-split:
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.memcpy.p1.p1.i256(ptr addrspace(1) %dest, ptr addrspace(1) %src, i256 %size, i1 false)
  ret void
}

define void @expand_known_p1_p3(ptr addrspace(1) %dest, ptr addrspace(3) %src) {
; CHECK-LABEL: define void @expand_known_p1_p3
; CHECK-SAME: (ptr addrspace(1) [[DEST:%.*]], ptr addrspace(3) [[SRC:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[LOAD_STORE_LOOP:%.*]]
; CHECK:       load-store-loop:
; CHECK-NEXT:    [[LOOP_INDEX:%.*]] = phi i256 [ 0, [[ENTRY:%.*]] ], [ [[TMP3:%.*]], [[LOAD_STORE_LOOP]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds i256, ptr addrspace(3) [[SRC]], i256 [[LOOP_INDEX]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i256, ptr addrspace(3) [[TMP0]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i256, ptr addrspace(1) [[DEST]], i256 [[LOOP_INDEX]]
; CHECK-NEXT:    store i256 [[TMP1]], ptr addrspace(1) [[TMP2]], align 1
; CHECK-NEXT:    [[TMP3]] = add i256 [[LOOP_INDEX]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i256 [[TMP3]], 1
; CHECK-NEXT:    br i1 [[TMP4]], label [[LOAD_STORE_LOOP]], label [[MEMCPY_SPLIT:%.*]]
; CHECK:       memcpy-split:
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i256, ptr addrspace(3) [[SRC]], i256 1
; CHECK-NEXT:    [[TMP6:%.*]] = load i256, ptr addrspace(3) [[TMP5]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = and i256 [[TMP6]], -95780971304118053647396689196894323976171195136475136
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i256, ptr addrspace(1) [[DEST]], i256 1
; CHECK-NEXT:    [[TMP9:%.*]] = load i256, ptr addrspace(1) [[TMP8]], align 1
; CHECK-NEXT:    [[TMP10:%.*]] = and i256 [[TMP9]], 95780971304118053647396689196894323976171195136475135
; CHECK-NEXT:    [[TMP11:%.*]] = or i256 [[TMP7]], [[TMP10]]
; CHECK-NEXT:    store i256 [[TMP11]], ptr addrspace(1) [[TMP8]], align 1
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.memcpy.p1.p3.i256(ptr addrspace(1) %dest, ptr addrspace(3) %src, i256 42, i1 false)
  ret void
}

define void @expand_known_p1_p1(ptr addrspace(1) %dest, ptr addrspace(1) %src) {
; CHECK-LABEL: define void @expand_known_p1_p1
; CHECK-SAME: (ptr addrspace(1) [[DEST:%.*]], ptr addrspace(1) [[SRC:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[LOAD_STORE_LOOP:%.*]]
; CHECK:       load-store-loop:
; CHECK-NEXT:    [[LOOP_INDEX:%.*]] = phi i256 [ 0, [[ENTRY:%.*]] ], [ [[TMP3:%.*]], [[LOAD_STORE_LOOP]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds i256, ptr addrspace(1) [[SRC]], i256 [[LOOP_INDEX]]
; CHECK-NEXT:    [[TMP1:%.*]] = load i256, ptr addrspace(1) [[TMP0]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i256, ptr addrspace(1) [[DEST]], i256 [[LOOP_INDEX]]
; CHECK-NEXT:    store i256 [[TMP1]], ptr addrspace(1) [[TMP2]], align 1
; CHECK-NEXT:    [[TMP3]] = add i256 [[LOOP_INDEX]], 1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i256 [[TMP3]], 1
; CHECK-NEXT:    br i1 [[TMP4]], label [[LOAD_STORE_LOOP]], label [[MEMCPY_SPLIT:%.*]]
; CHECK:       memcpy-split:
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i256, ptr addrspace(1) [[SRC]], i256 1
; CHECK-NEXT:    [[TMP6:%.*]] = load i256, ptr addrspace(1) [[TMP5]], align 1
; CHECK-NEXT:    [[TMP7:%.*]] = and i256 [[TMP6]], -95780971304118053647396689196894323976171195136475136
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i256, ptr addrspace(1) [[DEST]], i256 1
; CHECK-NEXT:    [[TMP9:%.*]] = load i256, ptr addrspace(1) [[TMP8]], align 1
; CHECK-NEXT:    [[TMP10:%.*]] = and i256 [[TMP9]], 95780971304118053647396689196894323976171195136475135
; CHECK-NEXT:    [[TMP11:%.*]] = or i256 [[TMP7]], [[TMP10]]
; CHECK-NEXT:    store i256 [[TMP11]], ptr addrspace(1) [[TMP8]], align 1
; CHECK-NEXT:    ret void
;
entry:
  call void @llvm.memcpy.p1.p1.i256(ptr addrspace(1) %dest, ptr addrspace(1) %src, i256 42, i1 false)
  ret void
}
