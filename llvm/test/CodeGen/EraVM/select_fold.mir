# RUN: llc -x mir -run-pass=eravm-opt-select -verify-machineinstrs < %s | FileCheck %s

# This file tests select optimization pass on various instructions.

--- |

  target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
  target triple = "eravm"
  ; ADD
  define void @test_add_reg() { ret void }
  define void @test_add_code() { ret void }
  define void @test_add_imm() { ret void }
  define void @test_add_stack() { ret void }

  ; SUB
  define void @test_sub_reg() { ret void }
  define void @test_sub_code() { ret void }
  define void @test_sub_code2() { ret void }
  define void @test_sub_imm() { ret void }
  define void @test_sub_imm2() { ret void }
  define void @test_sub_stack() { ret void }
  define void @test_sub_stack2() { ret void }

  ; MUL
  define void @test_mul() { ret void }
  define void @test_mul2() { ret void }

  ; DIV
  define void @test_div() { ret void }
  define void @test_div2() { ret void }

  ;unfeasible cases
  define void @test_non_adjacent_1() { ret void }
  define void @test_non_adjacent_2() { ret void }
  define void @test_non_adjacent_3() { ret void }
  define void @test_unpredicable() { ret void }
  define void @test_unfoldable_mul() { ret void }
  define void @test_unfoldable_div() { ret void }
  define void @test_unfoldable_and() { ret void }

  ; bitwise
  define void @test_bitwise_multiple() { ret void }
  define void @test_ptr_multiple() { ret void }

...
---
# CHECK-LABEL: test_add_reg
# CHECK-LABEL: bb.0:
# CHECK: $r1 = ADDrrr_s $r1, $r1, 9
name: test_add_reg
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = ADDrrr_s $r1, $r1, i256 0
    $r1 = ADDrrr_s killed $r2, $r0, i256 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_add_code
# CHECK-LABEL: bb.0:
# CHECK: $r1 = ADDcrr_s %const.0, 0, $r1, 9
name: test_add_code
constants:
  - id:              0
    value:           i256 10245387
    alignment:       32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = ADDcrr_s %const.0, 0, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_add_imm
# CHECK-LABEL: bb.0:
# CHECK: $r1 = ADDirr_s i256 1024, $r1, 9
name: test_add_imm
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = ADDirr_s i256 1024, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_add_stack
# CHECK-LABEL: bb.0:
# CHECK: $r1 = ADDsrr_s i256 0, $r3, 0, $r1, 9
name: test_add_stack
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3
    $r2 = ADDsrr_s i256 0, $r3, 0, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...

---
# CHECK-LABEL: test_sub_reg
# CHECK-LABEL: bb.0:
# CHECK: $r1 = SUBrrr_s $r1, $r1, 9
name: test_sub_reg
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = SUBrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_sub_code
# CHECK-LABEL: bb.0:
# CHECK: $r1 = SUBcrr_s %const.0, 0, $r1, 9
name: test_sub_code
constants:
  - id:              0
    value:           i256 10245387
    alignment:       32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = SUBcrr_s %const.0, 0, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_sub_code2
# CHECK-LABEL: bb.0:
# CHECK: $r1 = SUByrr_s %const.0, 0, $r1, 9
name: test_sub_code2
constants:
  - id:              0
    value:           i256 10245387
    alignment:       32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = SUByrr_s %const.0, 0, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_sub_imm
# CHECK-LABEL: bb.0:
# CHECK: $r1 = SUBirr_s i256 1024, $r1, 9
name: test_sub_imm
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = SUBirr_s i256 1024, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_sub_imm2
# CHECK-LABEL: bb.0:
# CHECK: $r1 = SUBxrr_s i256 1024, $r1, 9
name: test_sub_imm2
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = SUBxrr_s i256 1024, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_sub_stack
# CHECK-LABEL: bb.0:
# CHECK: $r1 = SUBsrr_s i256 0, $r3, 0, $r1, 9
name: test_sub_stack
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3
    $r2 = SUBsrr_s i256 0, $r3, 0, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_sub_stack2
# CHECK-LABEL: bb.0:
# CHECK: $r1 = SUBzrr_s i256 0, $r3, 0, $r1, 9
name: test_sub_stack2
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3
    $r2 = SUBzrr_s i256 0, $r3, 0, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_mul
# CHECK-LABEL: bb.0:
# CHECK: $r1, dead $r4 = MULrrrr_s $r3, $r1, 9
name: test_mul
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3, $r4
    $r2, dead $r4 = MULrrrr_s $r3, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_mul2
# CHECK-LABEL: bb.0:
# CHECK: dead $r1, $r4 = MULrrrr_s $r3, $r1, 9
name: test_mul2
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3, $r4
    dead $r2, $r4 = MULrrrr_s $r3, $r1, 0
    $r1 = ADDrrr_s killed $r4, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_div
# CHECK-LABEL: bb.0:
# CHECK: $r1, dead $r4 = DIVrrrr_s $r3, $r1, 9
name: test_div
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3, $r4
    $r2, dead $r4 = DIVrrrr_s $r3, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_div2
# CHECK-LABEL: bb.0:
# CHECK: dead $r1, $r4 = DIVrrrr_s $r3, $r1, 9
name: test_div2
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3, $r4
    dead $r2, $r4 = DIVrrrr_s $r3, $r1, 0
    $r1 = ADDrrr_s killed $r4, $r0, 9, implicit $flags
    RET
...
---
# Test folding non-adjacent instructions
# CHECK-LABEL: test_non_adjacent_1
# CHECK-LABEL: bb.0:
# CHECK: $r1 = ADDrrr_s $r1, $r1, 9
# CHECK-NEXT: $r3 = ADDrrr_s $r4, $r5, 0
# CHECK-NEXT: RET
name: test_non_adjacent_1
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r4, $r5
    $r2 = ADDrrr_s $r1, $r1, 0
    $r3 = ADDrrr_s $r4, $r5, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# Test not folding non-adjacent instructions which will break
# the data flow. In this case, folding will cause $r1 to be overwritten.
# CHECK-LABEL: test_non_adjacent_2
# CHECK-LABEL: bb.0:
# CHECK: $r2 = ADDrrr_s $r1, $r1, 0
# CHECK-NEXT: $r3 = ADDrrr_s $r1, $r1, 0
# CHECK-NEXT: $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
# CHECK-NEXT: RET
name: test_non_adjacent_2
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = ADDrrr_s $r1, $r1, 0
    $r3 = ADDrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# Test if we are not folding non-adjacent instructions where we cannot trust
# the flag instruction. In this case, the flag was implicitly defined in between
# so folding is unsafe.
#
# CHECK-LABEL: test_non_adjacent_3
# CHECK-LABEL: bb.0:
# CHECK: $r2 = ADDrrr_s $r1, $r1, 0
# CHECK-NEXT: $r3 = ADDrrr_v $r4, $r5, 0, implicit-def $flags
# CHECK-NEXT: $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
# CHECK-NEXT: RET
name: test_non_adjacent_3
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r4, $r5
    $r2 = ADDrrr_s $r1, $r1, 0
    $r3 = ADDrrr_v $r4, $r5, 0, implicit-def $flags
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# Test we are only folding arithmetic operations
# (not folding instructions with side effects).
# In this case, we are not folding memory loads as
# predicated execution might cause the load to be skipped.
#
# CHECK-LABEL: test_unpredicable
# CHECK-LABEL: bb.0:
name: test_unpredicable
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = LD1 $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# Test MULs with two alive defs are not folded.
# CHECK-LABEL: test_unfoldable_mul
# CHECK-LABEL: bb.0:
# CHECK: $r2, $r4 = MULrrrr_s $r3, $r1, 0
# CHECK-NEXT: $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
# CHECK-NEXT: RET
name: test_unfoldable_mul
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3, $r4
    $r2, $r4 = MULrrrr_s $r3, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# Test DIVs with two alive defs are not folded.
# CHECK-LABEL: test_unfoldable_div
# CHECK-LABEL: bb.0:
# CHECK: $r2, $r4 = DIVrrrr_s $r3, $r1, 0
# CHECK-NEXT: $r1 = ADDrrr_s killed $r4, $r0, 9, implicit $flags
# CHECK-NEXT: RET
name: test_unfoldable_div
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2, $r3, $r4
    $r2, $r4 = DIVrrrr_s $r3, $r1, 0
    $r1 = ADDrrr_s killed $r4, $r0, 9, implicit $flags
    RET
...
---
# Test arithmetics with flag-setting property are not folded.
# CHECK-LABEL: test_unfoldable_and
# CHECK-LABEL: bb.0:
# CHECK: $r2 = ANDrrr_v $r1, $r1, 0, implicit-def $flags
# CHECK-NEXT: $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
name: test_unfoldable_and
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = ANDrrr_v $r1, $r1, 0, implicit-def $flags
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# test bitwise instructions folding, also can test multiple folds in a single MBB.
# CHECK-LABEL: test_bitwise_multiple
# CHECK-LABEL: bb.0:
# CHECK: $r1 = ANDrrr_s $r1, $r1, 9
# CHECK-NEXT: $r1 = ORrrr_s $r1, $r1, 9
# CHECK-NEXT: $r1 = XORrrr_s $r1, $r1, 9
# CHECK-NEXT: $r1 = SHLrrr_s $r1, $r1, 9
# CHECK-NEXT: $r1 = SHRrrr_s $r1, $r1, 9
# CHECK-NEXT: $r1 = ROLrrr_s $r1, $r1, 9
# CHECK-NEXT: $r1 = RORrrr_s $r1, $r1, 9
name: test_bitwise_multiple
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = ANDrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    $r2 = ORrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    $r2 = XORrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    $r2 = SHLrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    $r2 = SHRrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    $r2 = ROLrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    $r2 = RORrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
---
# CHECK-LABEL: test_ptr_multiple
# CHECK-LABEL: bb.0:
# CHECK: $r1 = PTR_ADDrrr_s $r1, $r1, 9
# CHECK-NEXT: $r1 = PTR_PACKrrr_s $r1, $r1, 9
# CHECK-NEXT: $r1 = PTR_SHRINKrrr_s $r1, $r1, 9
name: test_ptr_multiple
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $r1, $r2
    $r2 = PTR_ADDrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    $r2 = PTR_PACKrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    $r2 = PTR_SHRINKrrr_s $r1, $r1, 0
    $r1 = ADDrrr_s killed $r2, $r0, 9, implicit $flags
    RET
...
