; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=eravm-post-codegen-prepare -S < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

define i256 @test() {
; CHECK-LABEL: define i256 @test() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[LOOP:%.*]]
; CHECK:       loop:
; CHECK-NEXT:    [[I:%.*]] = phi i256 [ 0, [[ENTRY:%.*]] ], [ [[INC:%.*]], [[INCREMENT:%.*]] ]
; CHECK-NEXT:    [[RESULT:%.*]] = phi i256 [ 0, [[ENTRY]] ], [ [[NEW_RESULT:%.*]], [[INCREMENT]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i256 [[I]], 10
; CHECK-NEXT:    br i1 [[CMP]], label [[LOOP_BODY:%.*]], label [[EXIT:%.*]]
; CHECK:       loop_body:
; CHECK-NEXT:    switch i256 [[I]], label [[DEFAULT:%.*]] [
; CHECK-NEXT:    i256 0, label [[CASE0:%.*]]
; CHECK-NEXT:    i256 1, label [[CASE1:%.*]]
; CHECK-NEXT:    i256 2, label [[CASE2:%.*]]
; CHECK-NEXT:    ]
; CHECK:       case0:
; CHECK-NEXT:    [[ADD0:%.*]] = add nuw nsw i256 [[RESULT]], 1
; CHECK-NEXT:    br label [[INCREMENT]]
; CHECK:       case1:
; CHECK-NEXT:    [[ADD1:%.*]] = add nuw nsw i256 [[RESULT]], 2
; CHECK-NEXT:    br label [[INCREMENT]]
; CHECK:       case2:
; CHECK-NEXT:    [[ADD2:%.*]] = add nuw nsw i256 [[RESULT]], 64
; CHECK-NEXT:    [[INTTOPTR0:%.*]] = inttoptr i256 [[ADD2]] to ptr addrspace(1)
; CHECK-NEXT:    store i256 0, ptr addrspace(1) [[INTTOPTR0]], align 1
; CHECK-NEXT:    [[ADD3:%.*]] = add nuw nsw i256 [[RESULT]], -64
; CHECK-NEXT:    [[INTTOPTR1:%.*]] = inttoptr i256 [[ADD3]] to ptr addrspace(1)
; CHECK-NEXT:    store i256 0, ptr addrspace(1) [[INTTOPTR1]], align 1
; CHECK-NEXT:    [[CMP1:%.*]] = icmp ugt i256 [[RESULT]], 1000
; CHECK-NEXT:    br i1 [[CMP1]], label [[CASE2_BB1:%.*]], label [[EXIT]]
; CHECK:       case2_bb1:
; CHECK-NEXT:    [[ADD4:%.*]] = add nuw nsw i256 [[RESULT]], -32
; CHECK-NEXT:    [[INTTOPTR2:%.*]] = inttoptr i256 [[ADD4]] to ptr addrspace(1)
; CHECK-NEXT:    store i256 0, ptr addrspace(1) [[INTTOPTR2]], align 1
; CHECK-NEXT:    [[ADD5:%.*]] = add nuw nsw i256 [[RESULT]], -96
; CHECK-NEXT:    [[INTTOPTR3:%.*]] = inttoptr i256 [[ADD5]] to ptr addrspace(1)
; CHECK-NEXT:    store i256 0, ptr addrspace(1) [[INTTOPTR3]], align 1
; CHECK-NEXT:    [[ADD6:%.*]] = add nuw nsw i256 [[RESULT]], 128
; CHECK-NEXT:    [[INTTOPTR4:%.*]] = inttoptr i256 [[ADD6]] to ptr addrspace(1)
; CHECK-NEXT:    store i256 0, ptr addrspace(1) [[INTTOPTR4]], align 1
; CHECK-NEXT:    br label [[INCREMENT]]
; CHECK:       default:
; CHECK-NEXT:    br label [[INCREMENT]]
; CHECK:       increment:
; CHECK-NEXT:    [[NEW_RESULT]] = phi i256 [ [[ADD0]], [[CASE0]] ], [ [[ADD1]], [[CASE1]] ], [ [[ADD6]], [[CASE2_BB1]] ], [ [[RESULT]], [[DEFAULT]] ]
; CHECK-NEXT:    [[INC]] = add i256 [[I]], 1
; CHECK-NEXT:    br label [[LOOP]]
; CHECK:       exit:
; CHECK-NEXT:    ret i256 [[RESULT]]
;
entry:
  br label %loop

loop:
  %i = phi i256 [ 0, %entry ], [ %inc, %increment ]
  %result = phi i256 [ 0, %entry ], [ %new_result, %increment ]
  %cmp = icmp ult i256 %i, 10
  br i1 %cmp, label %loop_body, label %exit

loop_body:
  switch i256 %i, label %default [
  i256 0, label %case0
  i256 1, label %case1
  i256 2, label %case2
  ]

case0:
  %add0 = add nuw nsw i256 %result, 1
  br label %increment

case1:
  %add1 = add nuw nsw i256 %result, 2
  br label %increment

case2:
  %add2 = add nuw nsw i256 %result, 64
  %inttoptr0 = inttoptr i256 %add2 to ptr addrspace(1)
  store i256 0, ptr addrspace(1) %inttoptr0, align 1
  %add3 = add nuw nsw i256 %result, -64
  %inttoptr1 = inttoptr i256 %add3 to ptr addrspace(1)
  store i256 0, ptr addrspace(1) %inttoptr1, align 1
  %cmp1 = icmp ugt i256 %result, 1000
  br i1 %cmp1, label %case2_bb1, label %exit

case2_bb1:
  %add4 = add nuw nsw i256 %result, -32
  %inttoptr2 = inttoptr i256 %add4 to ptr addrspace(1)
  store i256 0, ptr addrspace(1) %inttoptr2, align 1
  %add5 = add nuw nsw i256 %result, -96
  %inttoptr3 = inttoptr i256 %add5 to ptr addrspace(1)
  store i256 0, ptr addrspace(1) %inttoptr3, align 1
  %add6 = add nuw nsw i256 %result, 128
  %inttoptr4 = inttoptr i256 %add6 to ptr addrspace(1)
  store i256 0, ptr addrspace(1) %inttoptr4, align 1
  br label %increment

default:
  br label %increment

increment:
  %new_result = phi i256 [ %add0, %case0 ], [ %add1, %case1 ], [ %add6, %case2_bb1 ], [ %result, %default ]
  %inc = add i256 %i, 1
  br label %loop

exit:
  ret i256 %result
}
