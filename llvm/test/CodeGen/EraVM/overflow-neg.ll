; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O2 < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

declare { i256, i1 } @llvm.uadd.with.overflow.i256(i256, i256)
declare void @has_overflow(i256)
declare void @has_no_overflow(i256)

; TODO: #590 x + y is computed twice which is redundant
define i256 @add_test_neg_1(i256 %a, i256 %b, i256 %x, i256 %y) {
; CHECK-LABEL: add_test_neg_1:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    add! r3, r4, r0
; CHECK-NEXT:    add.lt r1, r0, r2
; CHECK-NEXT:    add r3, r4, r1
; CHECK-NEXT:    add r1, r2, r1
; CHECK-NEXT:    ret
entry:
  %res1 = call {i256, i1} @llvm.uadd.with.overflow.i256(i256 %x, i256 %y)
  %res2 = extractvalue {i256, i1} %res1, 0
  %overflow = extractvalue {i256, i1} %res1, 1
  %selected = select i1 %overflow, i256 %a, i256 %b
  %sum = add i256 %res2, %selected
  ret i256 %sum
}

; TODO: #590 x + y is computed twice which is redundant
define void @add_branch_neg_1(i256 %x, i256 %y) {
; CHECK-LABEL: add_branch_neg_1:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    add r1, r0, r3
; CHECK-NEXT:    add r3, r2, r1
; CHECK-NEXT:    add! r3, r2, r0
; CHECK-NEXT:    jump.lt @.BB1_2
; CHECK-NEXT:  ; %bb.1: ; %no_overflow_detected
; CHECK-NEXT:    near_call r0, @has_no_overflow, @DEFAULT_UNWIND
; CHECK-NEXT:    ret
; CHECK-NEXT:  .BB1_2: ; %overflow_detected
; CHECK-NEXT:    near_call r0, @has_overflow, @DEFAULT_UNWIND
; CHECK-NEXT:    ret
entry:
  %res1 = call {i256, i1} @llvm.uadd.with.overflow.i256(i256 %x, i256 %y)
  %sum = extractvalue {i256, i1} %res1, 0
  %overflow = extractvalue {i256, i1} %res1, 1
  br i1 %overflow, label %overflow_detected, label %no_overflow_detected

overflow_detected:
  call void @has_overflow(i256 %sum)
  br label %exit

no_overflow_detected:
  call void @has_no_overflow(i256 %sum)
  br label %exit

exit:
  ret void
}
