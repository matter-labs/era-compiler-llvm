; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 < %s | FileCheck %s
target datalayout = "E-p:256:256-i256:256:256-S32-a:256:256"
target triple = "eravm"

declare void @llvm.memcpy.p0i256.p0i256.i256(i256 addrspace(0)* noalias nocapture writeonly, i256 addrspace(0)* noalias nocapture readonly, i256, i1 immarg)
declare void @llvm.memcpy.p1i256.p1i256.i256(i256 addrspace(1)* noalias nocapture writeonly, i256 addrspace(1)* noalias nocapture readonly, i256, i1 immarg)
declare void @llvm.memcpy.p2i256.p2i256.i256(i256 addrspace(2)* noalias nocapture writeonly, i256 addrspace(2)* noalias nocapture readonly, i256, i1 immarg)

define fastcc void @huge_copysize0(i256 addrspace(0)* %dest, i256 addrspace(0)* %src) {
; CHECK-LABEL: huge_copysize0:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s code[@CPI0_0], r1, r3
; CHECK-NEXT:  .BB0_1: ; %load-store-loop
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    shr.s 5, r2, r4
; CHECK-NEXT:    add stack[r4], r0, r4
; CHECK-NEXT:    shr.s 5, r1, r5
; CHECK-NEXT:    add r4, r0, stack[r5]
; CHECK-NEXT:    add 32, r2, r2
; CHECK-NEXT:    add 32, r1, r1
; CHECK-NEXT:    sub! r1, r3, r0
; CHECK-NEXT:    jump.ne @.BB0_1
; CHECK-NEXT:  ; %bb.2: ; %memcpy-split
; CHECK-NEXT:    ret
  call void @llvm.memcpy.p0i256.p0i256.i256(i256 addrspace(0)* %dest, i256 addrspace(0)* %src, i256 81129638414606681695789005144064, i1 false)
  ret void
}

define fastcc void @huge_copysize1(i256 addrspace(1)* %dest, i256 addrspace(1)* %src) {
; CHECK-LABEL: huge_copysize1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s code[@CPI1_0], r1, r3
; CHECK-NEXT:    add r2, r0, r4
; CHECK-NEXT:  .BB1_1: ; %load-store-loop
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldmi.h r4, r5, r4
; CHECK-NEXT:    stmi.h r1, r5, r1
; CHECK-NEXT:    sub! r1, r3, r0
; CHECK-NEXT:    jump.ne @.BB1_1
; CHECK-NEXT:  ; %bb.2: ; %memcpy-split
; CHECK-NEXT:    ldm.h r3, r1
; CHECK-NEXT:    and code[@CPI1_1], r1, r1
; CHECK-NEXT:    sub.s code[@CPI1_0], r2, r2
; CHECK-NEXT:    ldm.h r2, r2
; CHECK-NEXT:    and code[@CPI1_2], r2, r2
; CHECK-NEXT:    or r2, r1, r1
; CHECK-NEXT:    stm.h r3, r1
; CHECK-NEXT:    ret
  call void @llvm.memcpy.p1i256.p1i256.i256(i256 addrspace(1)* %dest, i256 addrspace(1)* %src, i256 81129638414606681695789005144065, i1 false)
  ret void
}

define fastcc void @huge_copysize2(i256 addrspace(2)* %dest, i256 addrspace(2)* %src) {
; CHECK-LABEL: huge_copysize2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    sub.s code[@CPI2_0], r1, r3
; CHECK-NEXT:    add r2, r0, r4
; CHECK-NEXT:  .BB2_1: ; %load-store-loop
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldmi.ah r4, r5, r4
; CHECK-NEXT:    stmi.ah r1, r5, r1
; CHECK-NEXT:    sub! r1, r3, r0
; CHECK-NEXT:    jump.ne @.BB2_1
; CHECK-NEXT:  ; %bb.2: ; %memcpy-split
; CHECK-NEXT:    ldm.ah r3, r1
; CHECK-NEXT:    and code[@CPI2_1], r1, r1
; CHECK-NEXT:    sub.s code[@CPI2_0], r2, r2
; CHECK-NEXT:    ldm.ah r2, r2
; CHECK-NEXT:    and code[@CPI2_2], r2, r2
; CHECK-NEXT:    or r2, r1, r1
; CHECK-NEXT:    stm.ah r3, r1
; CHECK-NEXT:    ret
  call void @llvm.memcpy.p2i256.p2i256.i256(i256 addrspace(2)* %dest, i256 addrspace(2)* %src, i256 81129638414606681695789005144065, i1 false)
  ret void
}

define fastcc void @normal_known_size(i256* %dest, i256* %src) {
; CHECK-LABEL: normal_known_size:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add 1024, r1, r3
; CHECK-NEXT:  .BB3_1: ; %load-store-loop
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    shr.s 5, r2, r4
; CHECK-NEXT:    add stack[r4], r0, r4
; CHECK-NEXT:    shr.s 5, r1, r5
; CHECK-NEXT:    add r4, r0, stack[r5]
; CHECK-NEXT:    add 32, r2, r2
; CHECK-NEXT:    add 32, r1, r1
; CHECK-NEXT:    sub! r1, r3, r0
; CHECK-NEXT:    jump.ne @.BB3_1
; CHECK-NEXT:  ; %bb.2: ; %memcpy-split
; CHECK-NEXT:    ret
  call void @llvm.memcpy.p0i256.p0i256.i256(i256* %dest, i256* %src, i256 1024, i1 false)
  ret void
}

define fastcc void @normal_known_size_2(i256* %dest, i256* %src) {
; CHECK-LABEL: normal_known_size_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    add 1056, r1, r3
; CHECK-NEXT:    add r2, r0, r4
; CHECK-NEXT:    add r1, r0, r5
; CHECK-NEXT:  .BB4_1: ; %load-store-loop
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    shr.s 5, r4, r6
; CHECK-NEXT:    add stack[r6], r0, r6
; CHECK-NEXT:    shr.s 5, r5, r7
; CHECK-NEXT:    add r6, r0, stack[r7]
; CHECK-NEXT:    add 32, r4, r4
; CHECK-NEXT:    add 32, r5, r5
; CHECK-NEXT:    sub! r5, r3, r0
; CHECK-NEXT:    jump.ne @.BB4_1
; CHECK-NEXT:  ; %bb.2: ; %memcpy-split
; CHECK-NEXT:    add code[@CPI4_0], r0, r3
; CHECK-NEXT:    shr.s 5, r2, r2
; CHECK-NEXT:    and stack[33 + r2], r3, r2
; CHECK-NEXT:    add code[@CPI4_1], r0, r3
; CHECK-NEXT:    shr.s 5, r1, r1
; CHECK-NEXT:    and stack[33 + r1], r3, r3
; CHECK-NEXT:    or r2, r3, stack[33 + r1]
; CHECK-NEXT:    ret
  call void @llvm.memcpy.p0i256.p0i256.i256(i256* %dest, i256* %src, i256 1060, i1 false)
  ret void
}

; check that in the trailing part, the mask is correct
; CHECK: CPI1_1:
; CHECK: CPI2_1:
; CHECK:  .cell 452312848583266388373324160190187140051835877600158453279131187530910662655
; CHECK: CPI1_2:
; CHECK: CPI2_2:
; CHECK:  .cell -452312848583266388373324160190187140051835877600158453279131187530910662656
