# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -x mir -run-pass=evm-backward-propagation-stackification < %s | FileCheck %s

# This test case is reduced with llvm-reduce.
# Before the change, the test caused stack too deep failure during
# stackification. Since we can't use spills for recursive functions,
# only option we have is to agressively compress the stack across the
# whole function, to resolve stack too deep issues.

--- |
  source_filename = "reduced.ll"
  target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
  target triple = "evm-unknown-unknown"

  define fastcc void @_testRemoveAndInsertBack_rt_707(i256 %0, i256 %1, i256 %storage_load_value12845, ptr addrspace(1) %2, i256 %storage_load_value18549, i256 %shift_right_non_overflow_result6002, i256 %and_result11667, ptr addrspace(5) %storage_load_position_pointer14560, ptr addrspace(5) %storage_load_position_pointer19042, i256 %storage_load_value19083, ptr addrspace(5) %storage_load_position_pointer14550, ptr addrspace(5) %storage_load_position_pointer18694, ptr addrspace(1) %3, i256 %memory_load_result22114.pre) #0 {
  entry:
    store i256 0, ptr addrspace(1) %2, align 16
    store i256 0, ptr addrspace(5) null, align 1
    store i256 %1, ptr addrspace(5) %storage_load_position_pointer14560, align 1
    store i256 %0, ptr addrspace(5) null, align 1
    store i256 0, ptr addrspace(5) %storage_load_position_pointer19042, align 1
    store i256 0, ptr addrspace(5) %storage_load_position_pointer14550, align 1
    store i256 0, ptr addrspace(5) %storage_load_position_pointer18694, align 1
    store i256 0, ptr addrspace(5) %storage_load_position_pointer14560, align 1
    store i256 0, ptr addrspace(1) %3, align 32
    store i256 %storage_load_value12845, ptr addrspace(5) null, align 4294967296
    call fastcc void @_testRemoveAndInsertBack_rt_707(i256 0, i256 0, i256 0, ptr addrspace(1) null, i256 0, i256 0, i256 0, ptr addrspace(5) null, ptr addrspace(5) null, i256 0, ptr addrspace(5) null, ptr addrspace(5) null, ptr addrspace(1) null, i256 0)
    ret void
  }

  attributes #0 = { "evm-recursive" }

...
---
name:            _testRemoveAndInsertBack_rt_707
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr, preferred-register: '' }
  - { id: 1, class: gpr, preferred-register: '' }
  - { id: 2, class: gpr, preferred-register: '' }
  - { id: 3, class: gpr, preferred-register: '' }
  - { id: 4, class: gpr, preferred-register: '' }
  - { id: 5, class: gpr, preferred-register: '' }
  - { id: 6, class: gpr, preferred-register: '' }
  - { id: 7, class: gpr, preferred-register: '' }
  - { id: 8, class: gpr, preferred-register: '' }
  - { id: 9, class: gpr, preferred-register: '' }
  - { id: 10, class: gpr, preferred-register: '' }
  - { id: 11, class: gpr, preferred-register: '' }
  - { id: 12, class: gpr, preferred-register: '' }
  - { id: 13, class: gpr, preferred-register: '' }
  - { id: 14, class: gpr, preferred-register: '' }
  - { id: 15, class: gpr, preferred-register: '' }
  - { id: 16, class: gpr, preferred-register: '' }
  - { id: 17, class: gpr, preferred-register: '' }
  - { id: 18, class: gpr, preferred-register: '' }
  - { id: 19, class: gpr, preferred-register: '' }
  - { id: 20, class: gpr, preferred-register: '' }
  - { id: 21, class: gpr, preferred-register: '' }
  - { id: 22, class: gpr, preferred-register: '' }
  - { id: 23, class: gpr, preferred-register: '' }
  - { id: 24, class: gpr, preferred-register: '' }
  - { id: 25, class: gpr, preferred-register: '' }
  - { id: 26, class: gpr, preferred-register: '' }
  - { id: 27, class: gpr, preferred-register: '' }
  - { id: 28, class: gpr, preferred-register: '' }
  - { id: 29, class: gpr, preferred-register: '' }
  - { id: 30, class: gpr, preferred-register: '' }
  - { id: 31, class: gpr, preferred-register: '' }
  - { id: 32, class: gpr, preferred-register: '' }
liveins:
  - { reg: '$arguments', virtual-reg: '' }
  - { reg: '$value_stack', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  isStackified:    false
  numberOfParameters: 14
  hasPushDeployAddress: false
body:             |
  bb.0.entry:
    liveins: $arguments, $value_stack

    ; CHECK-LABEL: name: _testRemoveAndInsertBack_rt_707
    ; CHECK: liveins: $arguments, $value_stack
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: SWAP6_S
    ; CHECK-NEXT: POP_S
    ; CHECK-NEXT: SWAP4_S
    ; CHECK-NEXT: POP_S
    ; CHECK-NEXT: SWAP11_S
    ; CHECK-NEXT: POP_S
    ; CHECK-NEXT: SWAP7_S
    ; CHECK-NEXT: SWAP5_S
    ; CHECK-NEXT: SWAP4_S
    ; CHECK-NEXT: SWAP8_S
    ; CHECK-NEXT: SWAP6_S
    ; CHECK-NEXT: POP_S
    ; CHECK-NEXT: POP_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: SSTORE_S
    ; CHECK-NEXT: DUP7_S
    ; CHECK-NEXT: SSTORE_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: SSTORE_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: SWAP1_S
    ; CHECK-NEXT: SSTORE_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: SWAP1_S
    ; CHECK-NEXT: SSTORE_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: SWAP1_S
    ; CHECK-NEXT: SSTORE_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: SWAP1_S
    ; CHECK-NEXT: MSTORE_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: SWAP1_S
    ; CHECK-NEXT: SSTORE_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: SWAP1_S
    ; CHECK-NEXT: MSTORE_S
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: SSTORE_S
    ; CHECK-NEXT: PUSH_LABEL <mcsymbol >
    ; CHECK-NEXT: PUSH0_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: DUP1_S
    ; CHECK-NEXT: PseudoCALL @_testRemoveAndInsertBack_rt_707, <mcsymbol >
    ; CHECK-NEXT: PseudoRET
    %3:gpr = ARGUMENT 0, implicit $arguments
    %1:gpr = ARGUMENT 1, implicit $arguments
    %9:gpr = ARGUMENT 2, implicit $arguments
    %7:gpr = ARGUMENT 3, implicit $arguments
    %2:gpr = ARGUMENT 7, implicit $arguments
    %4:gpr = ARGUMENT 8, implicit $arguments
    %5:gpr = ARGUMENT 10, implicit $arguments
    %6:gpr = ARGUMENT 11, implicit $arguments
    %8:gpr = ARGUMENT 12, implicit $arguments
    %0:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %32:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    SSTORE %32, %0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into `ptr addrspace(5) null`, align 1, addrspace 5)
    SSTORE %2, %1, implicit-def dead $arguments :: (store (s256) into %ir.storage_load_position_pointer14560, align 1, addrspace 5)
    %31:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    SSTORE %31, %3, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into `ptr addrspace(5) null`, align 1, addrspace 5)
    %30:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    SSTORE %4, %30, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into %ir.storage_load_position_pointer19042, align 1, addrspace 5)
    %29:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    SSTORE %5, %29, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into %ir.storage_load_position_pointer14550, align 1, addrspace 5)
    %28:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    SSTORE %6, %28, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into %ir.storage_load_position_pointer18694, align 1, addrspace 5)
    %27:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    MSTORE %7, %27, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into %ir.2, align 16, addrspace 1)
    %26:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    SSTORE %2, %26, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into %ir.storage_load_position_pointer14560, align 1, addrspace 5)
    %25:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    MSTORE %8, %25, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into %ir.3, addrspace 1)
    %24:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    SSTORE %24, %9, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into `ptr addrspace(5) null`, align 4294967296, addrspace 5)
    %23:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %22:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %21:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %20:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %19:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %18:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %17:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %16:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %15:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %14:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %13:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %12:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %11:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %10:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    FCALL @_testRemoveAndInsertBack_rt_707, %10, %11, %12, %13, %14, %15, %16, %17, %18, %19, %20, %21, %22, %23, implicit-def dead $arguments, implicit $sp, implicit-def $value_stack, implicit $value_stack
    RET implicit-def dead $arguments

...
