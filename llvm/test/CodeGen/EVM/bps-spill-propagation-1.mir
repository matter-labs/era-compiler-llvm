# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# REQUIRES: asserts
# RUN: llc -x mir -run-pass=evm-backward-propagation-stackification -evm-force-reg-spills=2 < %s | FileCheck %s

# In bb.0 we have def and use of %2:gpr and two uses in bb.2.
# When spilling %2:gpr, test that in bb.0 we are not doing reload
# immediately after spill, and we are doing only one reload in bb.2,
# even there are two uses of %2:gpr in bb.2.

--- |
  source_filename = "test_rename.ll"
  target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
  target triple = "evm"

  define i256 @test(i256 %arg) {
  bb:
    %icmp = icmp sgt i256 %arg, 0
    br i1 %icmp, label %bb1, label %bb4

  bb1:                                              ; preds = %bb
    %xor = xor i256 %arg, 10
    %or = or i256 %arg, 1234
    %add = add nuw nsw i256 %or, 5
    %add2 = add nuw nsw i256 %add, %xor
    br label %bb4

  bb4:                                              ; preds = %bb, %bb1
    %phi = phi i256 [ %add2, %bb1 ], [ 10, %bb ]
    ret i256 %phi
  }

...
---
name:            test
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr, preferred-register: '' }
  - { id: 1, class: gpr, preferred-register: '' }
  - { id: 2, class: gpr, preferred-register: '' }
  - { id: 3, class: gpr, preferred-register: '' }
  - { id: 4, class: gpr, preferred-register: '' }
  - { id: 5, class: gpr, preferred-register: '' }
  - { id: 6, class: gpr, preferred-register: '' }
  - { id: 7, class: gpr, preferred-register: '' }
  - { id: 8, class: gpr, preferred-register: '' }
  - { id: 9, class: gpr, preferred-register: '' }
  - { id: 10, class: gpr, preferred-register: '' }
  - { id: 11, class: gpr, preferred-register: '' }
  - { id: 12, class: gpr, preferred-register: '' }
liveins:
  - { reg: '$arguments', virtual-reg: '' }
  - { reg: '$value_stack', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  isStackified:    false
  numberOfParameters: 1
  hasPushDeployAddress: false
body:             |
  ; CHECK-LABEL: name: test
  ; CHECK: bb.0.bb:
  ; CHECK-NEXT:   successors: %bb.2(0x50000000), %bb.1(0x30000000)
  ; CHECK-NEXT:   liveins: $arguments, $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   DUP1_S
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MSTORE_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT:   LT_S
  ; CHECK-NEXT:   PseudoJUMP_UNLESS %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH1_S i256 10
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT:   PseudoJUMP %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.bb1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MLOAD_S
  ; CHECK-NEXT:   PUSH2_S i256 1234
  ; CHECK-NEXT:   PUSH1_S i256 10
  ; CHECK-NEXT:   DUP3_S
  ; CHECK-NEXT:   XOR_S
  ; CHECK-NEXT:   SWAP2_S
  ; CHECK-NEXT:   OR_S
  ; CHECK-NEXT:   ADD_S
  ; CHECK-NEXT:   PUSH1_S i256 5
  ; CHECK-NEXT:   ADD_S
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.bb4:
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET
  bb.0.bb:
    successors: %bb.2(0x50000000), %bb.1(0x30000000)
    liveins: $arguments, $value_stack

    %2:gpr = ARGUMENT 0, implicit $arguments
    %4:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %5:gpr = LT %2, %4, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    JUMP_UNLESS %bb.2, %5, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack

  bb.1:
    successors: %bb.3(0x80000000)
    liveins: $value_stack

    %12:gpr = CONST_I256 i256 10, implicit-def dead $arguments
    JUMP %bb.3, implicit-def $arguments

  bb.2.bb1:
    successors: %bb.3(0x80000000)
    liveins: $value_stack

    %11:gpr = CONST_I256 i256 5, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %6:gpr = CONST_I256 i256 10, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %7:gpr = XOR %2, %6, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %8:gpr = CONST_I256 i256 1234, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %9:gpr = OR %2, %8, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %10:gpr = nuw ADD %9, %7, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %12:gpr = nuw ADD %10, %11, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack

  bb.3.bb4:
    liveins: $value_stack

    RET %12, implicit-def dead $arguments

...
