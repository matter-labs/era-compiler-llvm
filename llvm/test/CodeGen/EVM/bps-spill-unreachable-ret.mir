# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -x mir -run-pass=evm-backward-propagation-stackification < %s | FileCheck %s

# Test that regs (%1:gpr, %2:gpr, %4:gpr, %5:gpr) that have unreachable defs
# are not taken into account when spilling, and we chose other reachable register
# to spill, so we compile successfully. If we chose one of them, we would hit an
# assert, since we would exceed the depth of DUP instruction.

--- |
  source_filename = "test.ll"
  target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
  target triple = "evm-unknown-unknown"

  declare void @llvm.memcpy.p1.p2.i256(ptr addrspace(1) noalias nocapture writeonly, ptr addrspace(2) noalias nocapture readonly, i256, i1 immarg) #0

  declare { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } @foo()

  define fastcc void @main() {
  entry:
    %ret = call { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } @foo()
    %comparison_result4030.not = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 0
    %calldata_load_result2605 = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 1
    %stack_var_012.36954 = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 2
    %comparison_result3399.not = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 3
    %calldata_load_result3245 = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 4
    %calldata_load_result1899 = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 5
    %shift_left_non_overflow_result3390 = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 6
    %addition_result2798 = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 7
    %calldata_load_result2781 = extractvalue { i1, i256, i256, i1, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256, i256 } %ret, 8
    br label %conditional_rt_187_join_block

  "block_rt_2/0":                                   ; preds = %conditional_rt_187_join_block, %conditional_rt_181_join_block, %"block_rt_165/1"
    unreachable

  "block_rt_160/3":                                 ; preds = %"block_rt_165/1"
    %calldatacopy_destination_pointer3688 = inttoptr i256 %stack_var_021.0.in6947 to ptr addrspace(1)
    %calldatacopy_source_pointer3689 = inttoptr i256 %addition_result3756 to ptr addrspace(2)
    tail call void @llvm.evm.memcpyas1as2(ptr addrspace(1) %calldatacopy_destination_pointer3688, ptr addrspace(2) %calldatacopy_source_pointer3689, i256 %shift_left_non_overflow_result3390, i1 false)
    br i1 %comparison_result3909.not, label %conditional_rt_181_join_block, label %"block_rt_181/0"

  "block_rt_165/1":                                 ; preds = %conditional_rt_181_join_block
    %addition_result3756 = or i256 %calldata_load_result1899, %addition_result4054
    br i1 %comparison_result3399.not, label %"block_rt_2/0", label %"block_rt_160/3"

  "block_rt_181/0":                                 ; preds = %"block_rt_160/3"
    %addition_result4064 = or i256 %stack_var_011.36953, 1
    %comparison_result4003.not = icmp ult i256 %stack_var_013.36955, %calldata_load_result2605
    br i1 %comparison_result4003.not, label %conditional_rt_187_join_block, label %"block_rt_187/0.loopexit"

  "block_rt_187/0.loopexit":                        ; preds = %"block_rt_181/0"
    store i256 %stack_var_021.06950, ptr addrspace(1) null, align 64
    unreachable

  "block_rt_188/0":                                 ; preds = %conditional_rt_187_join_block
    %addition_result4054 = or i256 %stack_var_012.36954, 1
    %addition_result1909 = or i256 %calldata_load_result3245, 1
    br label %conditional_rt_181_join_block

  conditional_rt_181_join_block:                    ; preds = %"block_rt_188/0", %"block_rt_160/3"
    %stack_var_021.06950 = phi i256 [ 0, %"block_rt_188/0" ], [ %addition_result2798, %"block_rt_160/3" ]
    %comparison_result3909.not = phi i1 [ true, %"block_rt_188/0" ], [ false, %"block_rt_160/3" ]
    %stack_var_021.0.in6947 = phi i256 [ 0, %"block_rt_188/0" ], [ %addition_result2798, %"block_rt_160/3" ]
    store i256 %calldata_load_result2781, ptr addrspace(1) null, align 1
    %comparison_result1913.not = icmp slt i256 0, %addition_result1909
    br i1 %comparison_result1913.not, label %"block_rt_165/1", label %"block_rt_2/0"

  conditional_rt_187_join_block:                    ; preds = %"block_rt_181/0", %entry
    %stack_var_013.36955 = phi i256 [ 0, %entry ], [ 1, %"block_rt_181/0" ]
    %stack_var_011.36953 = phi i256 [ 0, %entry ], [ %addition_result4064, %"block_rt_181/0" ]
    br i1 %comparison_result4030.not, label %"block_rt_188/0", label %"block_rt_2/0"
  }

  declare void @llvm.evm.memcpyas1as2(ptr addrspace(1) noalias nocapture writeonly, ptr addrspace(2) noalias nocapture readonly, i256, i1 immarg) #0

  attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

...
---
name:            main
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr, preferred-register: '' }
  - { id: 1, class: gpr, preferred-register: '' }
  - { id: 2, class: gpr, preferred-register: '' }
  - { id: 3, class: gpr, preferred-register: '' }
  - { id: 4, class: gpr, preferred-register: '' }
  - { id: 5, class: gpr, preferred-register: '' }
  - { id: 6, class: gpr, preferred-register: '' }
  - { id: 7, class: gpr, preferred-register: '' }
  - { id: 8, class: gpr, preferred-register: '' }
  - { id: 9, class: gpr, preferred-register: '' }
  - { id: 10, class: gpr, preferred-register: '' }
  - { id: 11, class: gpr, preferred-register: '' }
  - { id: 12, class: gpr, preferred-register: '' }
  - { id: 13, class: gpr, preferred-register: '' }
  - { id: 14, class: gpr, preferred-register: '' }
  - { id: 15, class: gpr, preferred-register: '' }
  - { id: 16, class: gpr, preferred-register: '' }
  - { id: 17, class: gpr, preferred-register: '' }
  - { id: 18, class: gpr, preferred-register: '' }
  - { id: 19, class: gpr, preferred-register: '' }
  - { id: 20, class: gpr, preferred-register: '' }
  - { id: 21, class: gpr, preferred-register: '' }
  - { id: 22, class: gpr, preferred-register: '' }
  - { id: 23, class: gpr, preferred-register: '' }
  - { id: 24, class: gpr, preferred-register: '' }
  - { id: 25, class: gpr, preferred-register: '' }
  - { id: 26, class: gpr, preferred-register: '' }
  - { id: 27, class: gpr, preferred-register: '' }
  - { id: 28, class: gpr, preferred-register: '' }
  - { id: 29, class: gpr, preferred-register: '' }
  - { id: 30, class: gpr, preferred-register: '' }
  - { id: 31, class: gpr, preferred-register: '' }
  - { id: 32, class: gpr, preferred-register: '' }
  - { id: 33, class: gpr, preferred-register: '' }
  - { id: 34, class: gpr, preferred-register: '' }
  - { id: 35, class: gpr, preferred-register: '' }
  - { id: 36, class: gpr, preferred-register: '' }
  - { id: 37, class: gpr, preferred-register: '' }
  - { id: 38, class: gpr, preferred-register: '' }
  - { id: 39, class: gpr, preferred-register: '' }
  - { id: 40, class: gpr, preferred-register: '' }
  - { id: 41, class: gpr, preferred-register: '' }
  - { id: 42, class: gpr, preferred-register: '' }
  - { id: 43, class: gpr, preferred-register: '' }
  - { id: 44, class: gpr, preferred-register: '' }
  - { id: 45, class: gpr, preferred-register: '' }
  - { id: 46, class: gpr, preferred-register: '' }
  - { id: 47, class: gpr, preferred-register: '' }
  - { id: 48, class: gpr, preferred-register: '' }
  - { id: 49, class: gpr, preferred-register: '' }
  - { id: 50, class: gpr, preferred-register: '' }
  - { id: 51, class: gpr, preferred-register: '' }
  - { id: 52, class: gpr, preferred-register: '' }
  - { id: 53, class: gpr, preferred-register: '' }
  - { id: 54, class: gpr, preferred-register: '' }
  - { id: 55, class: gpr, preferred-register: '' }
  - { id: 56, class: gpr, preferred-register: '' }
  - { id: 57, class: gpr, preferred-register: '' }
  - { id: 58, class: gpr, preferred-register: '' }
liveins:
  - { reg: '$arguments', virtual-reg: '' }
  - { reg: '$value_stack', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  isStackified:    false
  numberOfParameters: 0
  hasPushDeployAddress: false
body:             |
  ; CHECK-LABEL: name: main
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $arguments, $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   PUSH_LABEL <mcsymbol >
  ; CHECK-NEXT:   PseudoCALL @foo, <mcsymbol >
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   SWAP9_S
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT:   SWAP4_S
  ; CHECK-NEXT:   SWAP3_S
  ; CHECK-NEXT:   SWAP7_S
  ; CHECK-NEXT:   SWAP5_S
  ; CHECK-NEXT:   SWAP2_S
  ; CHECK-NEXT:   SWAP8_S
  ; CHECK-NEXT:   AND_S
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MSTORE_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   AND_S
  ; CHECK-NEXT:   SWAP5_S
  ; CHECK-NEXT:   PUSH0_S
  ; CHECK-NEXT:   SWAP7_S
  ; CHECK-NEXT:   PUSH0_S
  ; CHECK-NEXT:   SWAP6_S
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.conditional_rt_187_join_block:
  ; CHECK-NEXT:   successors: %bb.11(0x80000000), %bb.2(0x00000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MLOAD_S
  ; CHECK-NEXT:   PseudoJUMPI %bb.11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors:
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   successors: %bb.5(0x00000000), %bb.6(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   DUP13_S
  ; CHECK-NEXT:   PseudoJUMP_UNLESS %bb.6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PseudoJUMP %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6:
  ; CHECK-NEXT:   successors: %bb.7(0x7c000000), %bb.8(0x04000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   DUP7_S
  ; CHECK-NEXT:   DUP5_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   SWAP4_S
  ; CHECK-NEXT:   CALLDATACOPY_S
  ; CHECK-NEXT:   AND_S
  ; CHECK-NEXT:   PUSH0_S
  ; CHECK-NEXT:   DUP10_S
  ; CHECK-NEXT:   SWAP2_S
  ; CHECK-NEXT:   PseudoJUMP_UNLESS %bb.8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7:
  ; CHECK-NEXT:   successors: %bb.12(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   DUP14_S
  ; CHECK-NEXT:   SWAP15_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PseudoJUMP %bb.12
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8:
  ; CHECK-NEXT:   successors: %bb.9(0x80000000), %bb.10(0x00000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   DUP7_S
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT:   ULT_S
  ; CHECK-NEXT:   SWAP8_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   DUP1_S
  ; CHECK-NEXT:   SWAP9_S
  ; CHECK-NEXT:   OR_S
  ; CHECK-NEXT:   SWAP9_S
  ; CHECK-NEXT:   PseudoJUMP_UNLESS %bb.10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.9:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   SWAP8_S
  ; CHECK-NEXT:   SWAP7_S
  ; CHECK-NEXT:   SWAP9_S
  ; CHECK-NEXT:   SWAP10_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PseudoJUMP %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.10:
  ; CHECK-NEXT:   successors:
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PUSH0_S
  ; CHECK-NEXT:   MSTORE_S
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.11:
  ; CHECK-NEXT:   successors: %bb.12(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   DUP10_S
  ; CHECK-NEXT:   SWAP9_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   PUSH0_S
  ; CHECK-NEXT:   PUSH0_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   DUP9_S
  ; CHECK-NEXT:   OR_S
  ; CHECK-NEXT:   GT_S
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   DUP6_S
  ; CHECK-NEXT:   OR_S
  ; CHECK-NEXT:   DUP8_S
  ; CHECK-NEXT:   OR_S
  ; CHECK-NEXT:   SWAP3_S
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.12.conditional_rt_181_join_block:
  ; CHECK-NEXT:   successors: %bb.4(0x80000000), %bb.13(0x00000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   DUP3_S
  ; CHECK-NEXT:   DUP3_S
  ; CHECK-NEXT:   SWAP16_S
  ; CHECK-NEXT:   PUSH0_S
  ; CHECK-NEXT:   MSTORE_S
  ; CHECK-NEXT:   PseudoJUMPI %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.13:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PseudoJUMP %bb.3
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $arguments, $value_stack

    %52:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %0:gpr, %1:gpr, %2:gpr, %3:gpr, %4:gpr, %5:gpr, %6:gpr, %7:gpr, %8:gpr, dead %19:gpr, dead %20:gpr, dead %21:gpr, dead %22:gpr, dead %23:gpr, dead %24:gpr, dead %25:gpr, dead %26:gpr, dead %27:gpr, dead %28:gpr, dead %29:gpr, dead %30:gpr, dead %31:gpr = FCALL @foo, implicit-def dead $arguments, implicit $sp, implicit-def $value_stack, implicit $value_stack
    %33:gpr = AND %0, %52, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %51:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %39:gpr = AND %51, %3, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %16:gpr = CONST_I256 i256 0, implicit-def dead $arguments
    %17:gpr = CONST_I256 i256 0, implicit-def dead $arguments

  bb.1.conditional_rt_187_join_block:
    successors: %bb.7(0x80000000), %bb.10(0x00000000)
    liveins: $value_stack

    JUMPI %bb.7, %33, implicit-def $arguments

  bb.10:
    successors: %bb.2(0x80000000)
    liveins: $value_stack

  bb.2:
    successors:
    liveins: $value_stack

  bb.3:
    successors: %bb.12(0x00000000), %bb.4(0x80000000)
    liveins: $value_stack

    JUMP_UNLESS %bb.4, %39, implicit-def $arguments

  bb.12:
    successors: %bb.2(0x80000000)
    liveins: $value_stack

    JUMP %bb.2, implicit-def $arguments

  bb.4:
    successors: %bb.13(0x7c000000), %bb.5(0x04000000)
    liveins: $value_stack

    CALLDATACOPY %15, %9, %6, implicit-def dead $arguments
    %53:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %42:gpr = AND %14, %53, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %14:gpr = CONST_I256 i256 0, implicit-def dead $arguments
    %15:gpr = COPY_I256 %7, implicit-def $arguments
    JUMP_UNLESS %bb.5, %42, implicit-def $arguments

  bb.13:
    successors: %bb.8(0x80000000)
    liveins: $value_stack

    JUMP %bb.8, implicit-def $arguments

  bb.5:
    successors: %bb.9(0x80000000), %bb.6(0x00000000)
    liveins: $value_stack

    %44:gpr = ULT %16, %1, implicit-def dead $arguments
    %16:gpr = CONST_I256 i256 1, implicit-def dead $arguments
    %54:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %17:gpr = OR %17, %54, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    JUMP_UNLESS %bb.6, %44, implicit-def $arguments

  bb.9:
    successors: %bb.1(0x80000000)
    liveins: $value_stack

    JUMP %bb.1, implicit-def $arguments

  bb.6:
    successors:
    liveins: $value_stack

    %45:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    MSTORE %45, %13, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into `ptr addrspace(1) null`, align 64, addrspace 1)

  bb.7:
    successors: %bb.8(0x80000000)
    liveins: $value_stack

    %14:gpr = CONST_I256 i256 1, implicit-def dead $arguments
    %15:gpr = CONST_I256 i256 0, implicit-def dead $arguments
    %57:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %56:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %12:gpr = OR %4, %56, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %37:gpr = GT %12, %57, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %55:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %11:gpr = OR %2, %55, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %9:gpr = OR %5, %11, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack

  bb.8.conditional_rt_181_join_block:
    successors: %bb.3(0x80000000), %bb.11(0x00000000)
    liveins: $value_stack

    %13:gpr = COPY_I256 %15, implicit-def $arguments
    %58:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    MSTORE %58, %8, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack :: (store (s256) into `ptr addrspace(1) null`, align 1, addrspace 1)
    JUMPI %bb.3, %37, implicit-def $arguments

  bb.11:
    successors: %bb.2(0x80000000)
    liveins: $value_stack

    JUMP %bb.2, implicit-def $arguments

...
