# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# REQUIRES: asserts
# RUN: llc -x mir -run-pass=evm-backward-propagation-stackification -evm-force-reg-spills=5 < %s | FileCheck %s

# Test how we are propagating second operand of commutable instruction that is spilled.

--- |
  source_filename = "test.ll"
  target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
  target triple = "evm"

  define i256 @test(i256 %arg1, i256 %arg2, i256 %arg3, i256 %arg4) {
  entry:
    %cmp1 = icmp sgt i256 %arg1, 0
    br i1 %cmp1, label %bb1, label %bb2

  bb1:                                              ; preds = %entry
    %cmp3 = icmp sgt i256 %arg2, 0
    br i1 %cmp3, label %bb2, label %bb3

  bb2:                                              ; preds = %bb1, %entry
    %cmp2 = icmp sgt i256 %arg3, 0
    br i1 %cmp2, label %bb3, label %bb4

  bb3:                                              ; preds = %bb2, %bb1
    %add1 = add nuw nsw i256 %arg1, %arg4
    br label %bb4

  bb4:                                              ; preds = %bb3, %bb2
    %phi1 = phi i256 [ %add1, %bb3 ], [ 10, %bb2 ]
    ret i256 %phi1
  }

...
---
name:            test
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr, preferred-register: '' }
  - { id: 1, class: gpr, preferred-register: '' }
  - { id: 2, class: gpr, preferred-register: '' }
  - { id: 3, class: gpr, preferred-register: '' }
  - { id: 4, class: gpr, preferred-register: '' }
  - { id: 5, class: gpr, preferred-register: '' }
  - { id: 6, class: gpr, preferred-register: '' }
  - { id: 7, class: gpr, preferred-register: '' }
  - { id: 8, class: gpr, preferred-register: '' }
  - { id: 9, class: gpr, preferred-register: '' }
  - { id: 10, class: gpr, preferred-register: '' }
  - { id: 11, class: gpr, preferred-register: '' }
  - { id: 12, class: gpr, preferred-register: '' }
  - { id: 13, class: gpr, preferred-register: '' }
  - { id: 14, class: gpr, preferred-register: '' }
  - { id: 15, class: gpr, preferred-register: '' }
  - { id: 16, class: gpr, preferred-register: '' }
liveins:
  - { reg: '$arguments', virtual-reg: '' }
  - { reg: '$value_stack', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  isStackified:    false
  numberOfParameters: 4
  hasPushDeployAddress: false
body:             |
  ; CHECK-LABEL: name: test
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x50000000), %bb.1(0x30000000)
  ; CHECK-NEXT:   liveins: $arguments, $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   DUP4_S
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MSTORE_S
  ; CHECK-NEXT:   SWAP2_S
  ; CHECK-NEXT:   SWAP4_S
  ; CHECK-NEXT:   SWAP3_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   DUP3_S
  ; CHECK-NEXT:   LT_S
  ; CHECK-NEXT:   PseudoJUMP_UNLESS %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.5(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PseudoJUMP %bb.5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.bb1:
  ; CHECK-NEXT:   successors: %bb.4(0x50000000), %bb.3(0x30000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT:   LT_S
  ; CHECK-NEXT:   PseudoJUMP_UNLESS %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.8(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MLOAD_S
  ; CHECK-NEXT:   SWAP2_S
  ; CHECK-NEXT:   SWAP3_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PseudoJUMP %bb.8
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   successors: %bb.5(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5.bb2:
  ; CHECK-NEXT:   successors: %bb.7(0x50000000), %bb.6(0x30000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH1_S i256 1
  ; CHECK-NEXT:   PUSH1_S i256 10
  ; CHECK-NEXT:   SWAP4_S
  ; CHECK-NEXT:   LT_S
  ; CHECK-NEXT:   PseudoJUMP_UNLESS %bb.7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6:
  ; CHECK-NEXT:   successors: %bb.9(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PseudoJUMP %bb.9
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7:
  ; CHECK-NEXT:   successors: %bb.8(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MLOAD_S
  ; CHECK-NEXT:   SWAP2_S
  ; CHECK-NEXT:   SWAP3_S
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8.bb3:
  ; CHECK-NEXT:   successors: %bb.9(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADD_S
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.9.bb4:
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PseudoRET
  bb.0.entry:
    successors: %bb.1(0x50000000), %bb.5(0x30000000)
    liveins: $arguments, $value_stack

    %2:gpr = ARGUMENT 0, implicit $arguments
    %3:gpr = ARGUMENT 1, implicit $arguments
    %4:gpr = ARGUMENT 2, implicit $arguments
    %5:gpr = ARGUMENT 3, implicit $arguments
    %14:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %7:gpr = LT %2, %14, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    JUMP_UNLESS %bb.1, %7, implicit-def $arguments, implicit-def $value_stack, implicit $value_stack

  bb.5:
    successors: %bb.2(0x80000000)
    liveins: $value_stack

    JUMP %bb.2, implicit-def $arguments

  bb.1.bb1:
    successors: %bb.6(0x50000000), %bb.7(0x30000000)
    liveins: $value_stack

    %15:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %9:gpr = LT %3, %15, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    JUMP_UNLESS %bb.6, %9, implicit-def $arguments, implicit-def $value_stack, implicit $value_stack

  bb.7:
    successors: %bb.3(0x80000000)
    liveins: $value_stack

    JUMP %bb.3, implicit-def $arguments

  bb.6:
    successors: %bb.2(0x80000000)
    liveins: $value_stack

  bb.2.bb2:
    successors: %bb.8(0x50000000), %bb.9(0x30000000)
    liveins: $value_stack

    %13:gpr = CONST_I256 i256 10, implicit-def dead $arguments
    %16:gpr = CONST_I256 i256 1, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %12:gpr = LT %4, %16, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    JUMP_UNLESS %bb.8, %12, implicit-def $arguments, implicit-def $value_stack, implicit $value_stack

  bb.9:
    successors: %bb.4(0x80000000)
    liveins: $value_stack

    JUMP %bb.4, implicit-def $arguments

  bb.8:
    successors: %bb.3(0x80000000)
    liveins: $value_stack

  bb.3.bb3:
    successors: %bb.4(0x80000000)
    liveins: $value_stack

    %13:gpr = nuw nsw ADD %2, %5, implicit-def dead $arguments

  bb.4.bb4:
    liveins: $value_stack

    RET %13, implicit-def dead $arguments

...
