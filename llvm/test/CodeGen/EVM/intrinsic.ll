; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i256 @sdiv(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: sdiv:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SDIV
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.sdiv(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @div(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: div:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DIV
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.div(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @smod(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: smod:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SMOD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.smod(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @mod(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: mod:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MOD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.mod(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @shl(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: shl:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SHL
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.shl(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @shr(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: shr:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.shr(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @sar(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: sar:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SAR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.sar(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @addmod(i256 %rs1, i256 %rs2, i256 %rs3) nounwind {
; CHECK-LABEL: addmod:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    ADDMOD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.addmod(i256 %rs1, i256 %rs2, i256 %rs3)
  ret i256 %res
}

define i256 @mulmod(i256 %rs1, i256 %rs2, i256 %rs3) nounwind {
; CHECK-LABEL: mulmod:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MULMOD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.mulmod(i256 %rs1, i256 %rs2, i256 %rs3)
  ret i256 %res
}

define i256 @exp(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: exp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EXP
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.exp(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @sha3(ptr addrspace(1) %offset, i256 %size) nounwind {
; CHECK-LABEL: sha3:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SHA3
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.sha3(ptr addrspace(1) %offset, i256 %size)
  ret i256 %res
}

define i256 @signextend(i256 %bytesize, i256 %val) nounwind {
; CHECK-LABEL: signextend:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SIGNEXTEND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.signextend(i256 %bytesize, i256 %val)
  ret i256 %res
}

define i256 @byte(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: byte:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.byte(i256 %rs1, i256 %rs2)
  ret i256 %res
}

define i256 @pc() nounwind {
; CHECK-LABEL: pc:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PC
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.pc()
  ret i256 %res
}

define i256 @msize() nounwind {
; CHECK-LABEL: msize:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MSIZE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.msize()
  ret i256 %res
}

define i256 @address() nounwind {
; CHECK-LABEL: address:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    ADDRESS
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.address()
  ret i256 %res
}

define i256 @origin() nounwind {
; CHECK-LABEL: origin:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    ORIGIN
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.origin()
  ret i256 %res
}

define i256 @caller() nounwind {
; CHECK-LABEL: caller:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CALLER
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.caller()
  ret i256 %res
}

define i256 @balance(i256 %rs1) nounwind {
; CHECK-LABEL: balance:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    BALANCE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.balance(i256 %rs1)
  ret i256 %res
}

define i256 @calldatasize() nounwind {
; CHECK-LABEL: calldatasize:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CALLDATASIZE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.calldatasize()
  ret i256 %res
}

define i256 @calldataload(ptr addrspace(2) %rs1) nounwind {
; CHECK-LABEL: calldataload:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CALLDATALOAD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.calldataload(ptr addrspace(2) %rs1)
  ret i256 %res
}

define i256 @callvalue() nounwind {
; CHECK-LABEL: callvalue:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CALLVALUE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.callvalue()
  ret i256 %res
}

define i256 @codesize() nounwind {
; CHECK-LABEL: codesize:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CODESIZE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.codesize()
  ret i256 %res
}

define i256 @gasprice() nounwind {
; CHECK-LABEL: gasprice:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    GASPRICE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.gasprice()
  ret i256 %res
}

define i256 @extcodesize(i256 %rs1) nounwind {
; CHECK-LABEL: extcodesize:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EXTCODESIZE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.extcodesize(i256 %rs1)
  ret i256 %res
}

define void @extcodecopy(i256 %addr, ptr addrspace(1) %dst, ptr addrspace(4) %src, i256 %size) nounwind {
; CHECK-LABEL: extcodecopy:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EXTCODECOPY
; CHECK-NEXT:    JUMP

  call void @llvm.evm.extcodecopy(i256 %addr, ptr addrspace(1) %dst, ptr addrspace(4) %src, i256 %size)
  ret void
}

define i256 @extcodehash(i256 %rs1) nounwind {
; CHECK-LABEL: extcodehash:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EXTCODEHASH
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.extcodehash(i256 %rs1)
  ret i256 %res
}

define i256 @returndatasize() nounwind {
; CHECK-LABEL: returndatasize:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    RETURNDATASIZE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.returndatasize()
  ret i256 %res
}

define i256 @blockhash(i256 %rs1) nounwind {
; CHECK-LABEL: blockhash:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    BLOCKHASH
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.blockhash(i256 %rs1)
  ret i256 %res
}

define i256 @blobhash(i256 %rs1) nounwind {
; CHECK-LABEL: blobhash:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    BLOBHASH
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.blobhash(i256 %rs1)
  ret i256 %res
}

define i256 @coinbase() nounwind {
; CHECK-LABEL: coinbase:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    COINBASE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.coinbase()
  ret i256 %res
}

define i256 @timestamp() nounwind {
; CHECK-LABEL: timestamp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    TIMESTAMP
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.timestamp()
  ret i256 %res
}

define i256 @number() nounwind {
; CHECK-LABEL: number:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    NUMBER
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.number()
  ret i256 %res
}

define i256 @difficulty() nounwind {
; CHECK-LABEL: difficulty:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DIFFICULTY
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.difficulty()
  ret i256 %res
}

define i256 @gaslimit() nounwind {
; CHECK-LABEL: gaslimit:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    GASLIMIT
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.gaslimit()
  ret i256 %res
}

define i256 @chainid() nounwind {
; CHECK-LABEL: chainid:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CHAINID
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.chainid()
  ret i256 %res
}

define i256 @selfbalance() nounwind {
; CHECK-LABEL: selfbalance:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SELFBALANCE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.selfbalance()
  ret i256 %res
}

define i256 @basefee() nounwind {
; CHECK-LABEL: basefee:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    BASEFEE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.basefee()
  ret i256 %res
}

define i256 @blobbasefee() nounwind {
; CHECK-LABEL: blobbasefee:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    BLOBBASEFEE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.evm.blobbasefee()
  ret i256 %res
}

define void @log0(ptr addrspace(1) %off, i256 %size) nounwind {
; CHECK-LABEL: log0:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    LOG0
; CHECK-NEXT:    JUMP

  call void @llvm.evm.log0(ptr addrspace(1) %off, i256 %size)
  ret void
}

define void @log1(ptr addrspace(1) %off, i256 %size, i256 %t1) nounwind {
; CHECK-LABEL: log1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    LOG1
; CHECK-NEXT:    JUMP

  call void @llvm.evm.log1(ptr addrspace(1) %off, i256 %size, i256 %t1)
  ret void
}

define void @log2(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2) nounwind {
; CHECK-LABEL: log2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    LOG2
; CHECK-NEXT:    JUMP

  call void @llvm.evm.log2(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2)
  ret void
}

define void @log3(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3) nounwind {
; CHECK-LABEL: log3:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    LOG3
; CHECK-NEXT:    JUMP

  call void @llvm.evm.log3(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3)
  ret void
}

define void @log4(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3, i256 %t4) nounwind {
; CHECK-LABEL: log4:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    LOG4
; CHECK-NEXT:    JUMP

  call void @llvm.evm.log4(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3, i256 %t4)
  ret void
}

define i256 @create(i256 %val, ptr addrspace(1) %off, i256 %size) nounwind {
; CHECK-LABEL: create:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CREATE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %ret = call i256 @llvm.evm.create(i256 %val, ptr addrspace(1) %off, i256 %size)
  ret i256 %ret
}

define i256 @call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size) nounwind {
; CHECK-LABEL: call:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CALL
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %ret = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size)
  ret i256 %ret
}

define i256 @delegatecall(i256 %gas, i256 %addr, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size) nounwind {
; CHECK-LABEL: delegatecall:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DELEGATECALL
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %ret = call i256 @llvm.evm.delegatecall(i256 %gas, i256 %addr, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace (1) %ret_off, i256 %ret_size)
  ret i256 %ret
}

define i256 @create2(i256 %val, ptr addrspace(1) %off, i256 %size, i256 %salt) nounwind {
; CHECK-LABEL: create2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    CREATE2
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %ret = call i256 @llvm.evm.create2(i256 %val, ptr addrspace(1) %off, i256 %size, i256 %salt)
  ret i256 %ret
}

define i256 @staticcall(i256 %gas, i256 %addr, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size) nounwind {
; CHECK-LABEL: staticcall:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    STATICCALL
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %ret = call i256 @llvm.evm.staticcall(i256 %gas, i256 %addr, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size)
  ret i256 %ret
}

define void @selfdestruct(i256 %addr) nounwind {
; CHECK-LABEL: selfdestruct:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SELFDESTRUCT
; CHECK-NEXT:    JUMP

  call void @llvm.evm.selfdestruct(i256 %addr)
  ret void
}

define void @return(ptr addrspace(1) %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: return:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    RETURN
; CHECK-NEXT:    JUMP

  call void @llvm.evm.return(ptr addrspace(1) %rs1, i256 %rs2)
  ret void
}

define void @revert(ptr addrspace(1) %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: revert:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    REVERT
; CHECK-NEXT:    JUMP

  call void @llvm.evm.revert(ptr addrspace(1) %rs1, i256 %rs2)
  ret void
}

define void @invalid() nounwind {
; CHECK-LABEL: invalid:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    INVALID
; CHECK-NEXT:    JUMP

  call void @llvm.evm.invalid()
  ret void
}

declare i256 @llvm.evm.sdiv(i256, i256)
declare i256 @llvm.evm.div(i256, i256)
declare i256 @llvm.evm.mod(i256, i256)
declare i256 @llvm.evm.smod(i256, i256)
declare i256 @llvm.evm.shl(i256, i256)
declare i256 @llvm.evm.shr(i256, i256)
declare i256 @llvm.evm.sar(i256, i256)
declare i256 @llvm.evm.addmod(i256, i256, i256)
declare i256 @llvm.evm.mulmod(i256, i256, i256)
declare i256 @llvm.evm.exp(i256, i256)
declare i256 @llvm.evm.sha3(ptr addrspace(1), i256)
declare i256 @llvm.evm.signextend(i256, i256)
declare i256 @llvm.evm.byte(i256, i256)
declare i256 @llvm.evm.pc()
declare i256 @llvm.evm.msize()
declare i256 @llvm.evm.address()
declare i256 @llvm.evm.origin()
declare i256 @llvm.evm.caller()
declare i256 @llvm.evm.balance(i256)
declare i256 @llvm.evm.calldatasize()
declare i256 @llvm.evm.calldataload(ptr addrspace(2))
declare i256 @llvm.evm.callvalue()
declare i256 @llvm.evm.codesize()
declare i256 @llvm.evm.gasprice()
declare i256 @llvm.evm.extcodesize(i256)
declare void @llvm.evm.extcodecopy(i256, ptr addrspace(1), ptr addrspace(4), i256)
declare i256 @llvm.evm.extcodehash(i256)
declare i256 @llvm.evm.blockhash(i256)
declare i256 @llvm.evm.blobhash(i256)
declare i256 @llvm.evm.returndatasize()
declare i256 @llvm.evm.coinbase()
declare i256 @llvm.evm.timestamp()
declare i256 @llvm.evm.number()
declare i256 @llvm.evm.difficulty()
declare i256 @llvm.evm.gaslimit()
declare i256 @llvm.evm.chainid()
declare i256 @llvm.evm.selfbalance()
declare i256 @llvm.evm.basefee()
declare i256 @llvm.evm.blobbasefee()
declare void @llvm.evm.log0(ptr addrspace(1), i256)
declare void @llvm.evm.log1(ptr addrspace(1), i256, i256)
declare void @llvm.evm.log2(ptr addrspace(1), i256, i256, i256)
declare void @llvm.evm.log3(ptr addrspace(1), i256, i256, i256, i256)
declare void @llvm.evm.log4(ptr addrspace(1), i256, i256, i256, i256, i256)
declare i256 @llvm.evm.create(i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.call(i256, i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.delegatecall(i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.create2(i256, ptr addrspace(1), i256, i256)
declare i256 @llvm.evm.staticcall(i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare void @llvm.evm.selfdestruct(i256)
declare void @llvm.evm.return(ptr addrspace(1), i256)
declare void @llvm.evm.revert(ptr addrspace(1), i256)
declare void @llvm.evm.invalid()
declare void @llvm.evm.pop(i256)
