; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s | FileCheck %s
target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

; Check that we do the following transformation:
; AND (SRL imm, v), 0xFF' -> 'BYTE (31 - imm / 8), v',
; where imm % 8 == 0, and imm / 8 < 32.

define i256 @byte_lshr_0(i256 %0) {
; CHECK-LABEL: byte_lshr_0:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %r = and i256 %0, 255
  ret i256 %r
}

define i256 @byte_lshr_8(i256 %0) {
; CHECK-LABEL: byte_lshr_8:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1E
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %s = lshr i256 %0, 8
  %r = and i256 %s, 255
  ret i256 %r
}

define i256 @byte_lshr_16(i256 %0) {
; CHECK-LABEL: byte_lshr_16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1D
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %s = lshr i256 %0, 16
  %r = and i256 %s, 255
  ret i256 %r
}

define i256 @byte_lshr_248(i256 %0) {
; CHECK-LABEL: byte_lshr_248:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %s = lshr i256 %0, 248
  %r = and i256 %s, 255
  ret i256 %r
}

; Should not apply: imm = 9 (not divisible by 8)
define i256 @shift_not_multiple_of_8(i256 %0) {
; CHECK-LABEL: shift_not_multiple_of_8:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0x9
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %s = lshr i256 %0, 9
  %r = and i256 %s, 255
  ret i256 %r
}

; Should not apply: imm = 256 (256 / 8 > 31)
define i256 @shift_too_large(i256 %0) {
; CHECK-LABEL: shift_too_large:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    POP
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %s = lshr i256 %0, 256
  %r = and i256 %s, 255
  ret i256 %r
}
