; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=instcombine -S < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i256 @test_const(i256 %x) {
; CHECK-LABEL: define i256 @test_const(
; CHECK-SAME: i256 [[X:%.*]]) {
; CHECK-NEXT:    [[SIGNEXT1:%.*]] = call i256 @llvm.evm.signextend(i256 15, i256 [[X]])
; CHECK-NEXT:    [[SIGNEXT2:%.*]] = call i256 @llvm.evm.signextend(i256 15, i256 [[SIGNEXT1]])
; CHECK-NEXT:    ret i256 [[SIGNEXT2]]
;
  %signext1 = call i256 @llvm.evm.signextend(i256 15, i256 %x)
  %signext2 = call i256 @llvm.evm.signextend(i256 15, i256 %signext1)
  ret i256 %signext2
}

define i256 @test_const_ne(i256 %x) {
; CHECK-LABEL: define i256 @test_const_ne(
; CHECK-SAME: i256 [[X:%.*]]) {
; CHECK-NEXT:    [[SIGNEXT1:%.*]] = call i256 @llvm.evm.signextend(i256 15, i256 [[X]])
; CHECK-NEXT:    [[SIGNEXT2:%.*]] = call i256 @llvm.evm.signextend(i256 10, i256 [[SIGNEXT1]])
; CHECK-NEXT:    ret i256 [[SIGNEXT2]]
;
  %signext1 = call i256 @llvm.evm.signextend(i256 15, i256 %x)
  %signext2 = call i256 @llvm.evm.signextend(i256 10, i256 %signext1)
  ret i256 %signext2
}

define i256 @test_var(i256 %b, i256 %x) {
; CHECK-LABEL: define i256 @test_var(
; CHECK-SAME: i256 [[B:%.*]], i256 [[X:%.*]]) {
; CHECK-NEXT:    [[SIGNEXT1:%.*]] = call i256 @llvm.evm.signextend(i256 [[B]], i256 [[X]])
; CHECK-NEXT:    [[SIGNEXT2:%.*]] = call i256 @llvm.evm.signextend(i256 [[B]], i256 [[SIGNEXT1]])
; CHECK-NEXT:    ret i256 [[SIGNEXT2]]
;
  %signext1 = call i256 @llvm.evm.signextend(i256 %b, i256 %x)
  %signext2 = call i256 @llvm.evm.signextend(i256 %b, i256 %signext1)
  ret i256 %signext2
}

define i256 @test_var_ne(i256 %b1, i256 %b2, i256 %x) {
; CHECK-LABEL: define i256 @test_var_ne(
; CHECK-SAME: i256 [[B1:%.*]], i256 [[B2:%.*]], i256 [[X:%.*]]) {
; CHECK-NEXT:    [[SIGNEXT1:%.*]] = call i256 @llvm.evm.signextend(i256 [[B1]], i256 [[X]])
; CHECK-NEXT:    [[SIGNEXT2:%.*]] = call i256 @llvm.evm.signextend(i256 [[B2]], i256 [[SIGNEXT1]])
; CHECK-NEXT:    ret i256 [[SIGNEXT2]]
;
  %signext1 = call i256 @llvm.evm.signextend(i256 %b1, i256 %x)
  %signext2 = call i256 @llvm.evm.signextend(i256 %b2, i256 %signext1)
  ret i256 %signext2
}

declare i256 @llvm.evm.signextend(i256, i256)
