# RUN: llc -x mir -mtriple=evm-unknown-unknown -run-pass=evm-peephole < %s | FileCheck %s

--- |
  target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
  target triple = "evm-unknown-unknown"

  define void @iszero_fallthrough() {
    ret void
  }

  define void @iszero_iszero_fallthrough() {
    ret void
  }

  define void @iszero_iszero_or_fallthrough() {
    ret void
  }
...
---
name:            iszero_fallthrough
liveins:
  - { reg: '$arguments', virtual-reg: '' }
  - { reg: '$value_stack', virtual-reg: '' }
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $arguments, $value_stack
  
    ISZERO_S
  
  bb.1:
    successors:
    liveins: $value_stack
  
...
---
name:            iszero_iszero_fallthrough
liveins:
  - { reg: '$arguments', virtual-reg: '' }
  - { reg: '$value_stack', virtual-reg: '' }
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $arguments, $value_stack
  
    ISZERO_S
    ISZERO_S
  
  bb.1:
    successors:
    liveins: $value_stack
  
...
---
name:            iszero_iszero_or_fallthrough
liveins:
  - { reg: '$arguments', virtual-reg: '' }
  - { reg: '$value_stack', virtual-reg: '' }
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $arguments, $value_stack
  
    ISZERO_S
    ISZERO_S
    OR_S
  
  bb.1:
    successors:
    liveins: $value_stack
  
...

# CHECK-LABEL: name:            iszero_fallthrough
# CHECK: ISZERO_S
#
# CHECK-LABEL: name:            iszero_iszero_fallthrough
# CHECK: ISZERO_S
# CHECK-NEXT: ISZERO_S
#
# CHECK-LABEL: name:            iszero_iszero_or_fallthrough
# CHECK: ISZERO_S
# CHECK-NEXT: ISZERO_S
# CHECK-NEXT: OR_S

