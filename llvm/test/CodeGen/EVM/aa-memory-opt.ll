; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -O3 -S < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i256 @test_offset(ptr addrspace(1) %addr) {
; CHECK-LABEL: define noundef i256 @test_offset
; CHECK-SAME: (ptr addrspace(1) [[ADDR:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[PTRTOINT:%.*]] = ptrtoint ptr addrspace(1) [[ADDR]] to i256
; CHECK-NEXT:    [[ADD1:%.*]] = add i256 [[PTRTOINT]], 32
; CHECK-NEXT:    [[INTTOPTR1:%.*]] = inttoptr i256 [[ADD1]] to ptr addrspace(1)
; CHECK-NEXT:    store i256 3, ptr addrspace(1) [[INTTOPTR1]], align 1
; CHECK-NEXT:    [[ADD2:%.*]] = add i256 [[PTRTOINT]], 64
; CHECK-NEXT:    [[INTTOPTR2:%.*]] = inttoptr i256 [[ADD2]] to ptr addrspace(1)
; CHECK-NEXT:    store i256 58, ptr addrspace(1) [[INTTOPTR2]], align 1
; CHECK-NEXT:    ret i256 3
;
  %ptrtoint = ptrtoint ptr addrspace(1) %addr to i256
  %add1 = add i256 %ptrtoint, 32
  %inttoptr1 = inttoptr i256 %add1 to ptr addrspace(1)
  store i256 3, ptr addrspace(1) %inttoptr1, align 1
  %add2 = add i256 %ptrtoint, 64
  %inttoptr2 = inttoptr i256 %add2 to ptr addrspace(1)
  store i256 58, ptr addrspace(1) %inttoptr2, align 1
  %load = load i256, ptr addrspace(1) %inttoptr1, align 1
  ret i256 %load
}

define i256 @test_memcpy() {
; CHECK-LABEL: define noundef i256 @test_memcpy
; CHECK-SAME: () local_unnamed_addr #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
; CHECK-NEXT:    tail call void @llvm.memcpy.p1.p1.i256(ptr addrspace(1) noundef nonnull align 32 dereferenceable(53) inttoptr (i256 96 to ptr addrspace(1)), ptr addrspace(1) noundef nonnull align 256 dereferenceable(53) inttoptr (i256 256 to ptr addrspace(1)), i256 53, i1 false)
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
  tail call void @llvm.memcpy.p1.p1.i256(ptr addrspace(1) inttoptr (i256 96 to ptr addrspace(1)), ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 53, i1 false)
  %ret = load i256, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
  ret i256 %ret
}

define i256 @test_different_locsizes() {
; CHECK-LABEL: define noundef i256 @test_different_locsizes
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
; CHECK-NEXT:    store i8 1, ptr addrspace(1) inttoptr (i8 1 to ptr addrspace(1)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
  store i8 1, ptr addrspace(1) inttoptr (i8 1 to ptr addrspace(1)), align 64
  %ret = load i256, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
  ret i256 %ret
}

; TODO: #904: It is safe to remove load in this test, but it is not done since benchmark
; numbers showed that it is not profitable to do that for heap address space.
define i256 @test_gas_as1() {
; CHECK-LABEL: define i256 @test_gas_as1
; CHECK-SAME: () local_unnamed_addr #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
; CHECK-NEXT:    [[GAS:%.*]] = tail call i256 @llvm.evm.gas()
; CHECK-NEXT:    [[LOAD:%.*]] = load i256, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[LOAD]], [[GAS]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 2, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
  %gas = call i256 @llvm.evm.gas()
  %load = load i256, ptr addrspace(1) inttoptr (i256 2 to ptr addrspace(1)), align 64
  %ret = add i256 %load, %gas
  ret i256 %ret
}

define i256 @test_gas_as5() {
; CHECK-LABEL: define i256 @test_gas_as5
; CHECK-SAME: () local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
; CHECK-NEXT:    [[GAS:%.*]] = tail call i256 @llvm.evm.gas()
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[GAS]], 2
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 2, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
  %gas = call i256 @llvm.evm.gas()
  %load = load i256, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
  %ret = add i256 %load, %gas
  ret i256 %ret
}

define i256 @test_gas_as6() {
; CHECK-LABEL: define i256 @test_gas_as6
; CHECK-SAME: () local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(6) inttoptr (i256 2 to ptr addrspace(6)), align 64
; CHECK-NEXT:    [[GAS:%.*]] = tail call i256 @llvm.evm.gas()
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[GAS]], 2
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 2, ptr addrspace(6) inttoptr (i256 2 to ptr addrspace(6)), align 64
  %gas = call i256 @llvm.evm.gas()
  %load = load i256, ptr addrspace(6) inttoptr (i256 2 to ptr addrspace(6)), align 64
  %ret = add i256 %load, %gas
  ret i256 %ret
}

define i256 @test_log0() {
; CHECK-LABEL: define noundef i256 @test_log0
; CHECK-SAME: () local_unnamed_addr #[[ATTR3:[0-9]+]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) null, align 4294967296
; CHECK-NEXT:    store i256 7, ptr addrspace(1) null, align 4294967296
; CHECK-NEXT:    tail call void @llvm.evm.log0(ptr addrspace(1) null, i256 32)
; CHECK-NEXT:    ret i256 9
;
  store i256 2, ptr addrspace(5) null, align 32
  store i256 7, ptr addrspace(1) null, align 32
  call void @llvm.evm.log0(ptr addrspace(1) null, i256 32)
  %tmp = load i256, ptr addrspace(5) null, align 32
  %tmp2 = load i256, ptr addrspace(1) null, align 32
  %ret = add i256 %tmp, %tmp2
  ret i256 %ret
}

define i256 @test_log1() {
; CHECK-LABEL: define noundef i256 @test_log1
; CHECK-SAME: () local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) null, align 4294967296
; CHECK-NEXT:    store i256 7, ptr addrspace(1) null, align 4294967296
; CHECK-NEXT:    tail call void @llvm.evm.log1(ptr addrspace(1) null, i256 32, i256 0)
; CHECK-NEXT:    ret i256 9
;
  store i256 2, ptr addrspace(5) null, align 32
  store i256 7, ptr addrspace(1) null, align 32
  call void @llvm.evm.log1(ptr addrspace(1) null, i256 32, i256 0)
  %tmp = load i256, ptr addrspace(5) null, align 32
  %tmp2 = load i256, ptr addrspace(1) null, align 32
  %ret = add i256 %tmp, %tmp2
  ret i256 %ret
}

define i256 @test_log2() {
; CHECK-LABEL: define noundef i256 @test_log2
; CHECK-SAME: () local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) null, align 4294967296
; CHECK-NEXT:    store i256 7, ptr addrspace(1) null, align 4294967296
; CHECK-NEXT:    tail call void @llvm.evm.log2(ptr addrspace(1) null, i256 32, i256 0, i256 0)
; CHECK-NEXT:    ret i256 9
;
  store i256 2, ptr addrspace(5) null, align 32
  store i256 7, ptr addrspace(1) null, align 32
  call void @llvm.evm.log2(ptr addrspace(1) null, i256 32, i256 0, i256 0)
  %tmp = load i256, ptr addrspace(5) null, align 32
  %tmp2 = load i256, ptr addrspace(1) null, align 32
  %ret = add i256 %tmp, %tmp2
  ret i256 %ret
}

define i256 @test_log3() {
; CHECK-LABEL: define noundef i256 @test_log3
; CHECK-SAME: () local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) null, align 4294967296
; CHECK-NEXT:    store i256 7, ptr addrspace(1) null, align 4294967296
; CHECK-NEXT:    tail call void @llvm.evm.log3(ptr addrspace(1) null, i256 32, i256 0, i256 0, i256 0)
; CHECK-NEXT:    ret i256 9
;
  store i256 2, ptr addrspace(5) null, align 32
  store i256 7, ptr addrspace(1) null, align 32
  call void @llvm.evm.log3(ptr addrspace(1) null, i256 32, i256 0, i256 0, i256 0)
  %tmp = load i256, ptr addrspace(5) null, align 32
  %tmp2 = load i256, ptr addrspace(1) null, align 32
  %ret = add i256 %tmp, %tmp2
  ret i256 %ret
}

define i256 @test_log4() {
; CHECK-LABEL: define noundef i256 @test_log4
; CHECK-SAME: () local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) null, align 4294967296
; CHECK-NEXT:    store i256 7, ptr addrspace(1) null, align 4294967296
; CHECK-NEXT:    tail call void @llvm.evm.log4(ptr addrspace(1) null, i256 32, i256 0, i256 0, i256 0, i256 0)
; CHECK-NEXT:    ret i256 9
;
  store i256 2, ptr addrspace(5) null, align 32
  store i256 7, ptr addrspace(1) null, align 32
  call void @llvm.evm.log4(ptr addrspace(1) null, i256 32, i256 0, i256 0, i256 0, i256 0)
  %tmp = load i256, ptr addrspace(5) null, align 32
  %tmp2 = load i256, ptr addrspace(1) null, align 32
  %ret = add i256 %tmp, %tmp2
  ret i256 %ret
}

define i256 @test_as() {
; CHECK-LABEL: define noundef i256 @test_as
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
; CHECK-NEXT:    store i256 1, ptr addrspace(1) inttoptr (i256 1 to ptr addrspace(1)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
  store i256 1, ptr addrspace(1) inttoptr (i256 1 to ptr addrspace(1)), align 64
  %ret = load i256, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
  ret i256 %ret
}

define i256 @test_as1_overlap() {
; CHECK-LABEL: define i256 @test_as1_overlap
; CHECK-SAME: () local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(1) null, align 4294967296
; CHECK-NEXT:    store i256 1, ptr addrspace(1) inttoptr (i256 31 to ptr addrspace(1)), align 64
; CHECK-NEXT:    [[RET:%.*]] = load i256, ptr addrspace(1) null, align 4294967296
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 2, ptr addrspace(1) null, align 64
  store i256 1, ptr addrspace(1) inttoptr (i256 31 to ptr addrspace(1)), align 64
  %ret = load i256, ptr addrspace(1) null, align 64
  ret i256 %ret
}

define i256 @test_as1_null() {
; CHECK-LABEL: define noundef i256 @test_as1_null
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(1) null, align 4294967296
; CHECK-NEXT:    store i256 1, ptr addrspace(1) inttoptr (i256 32 to ptr addrspace(1)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(1) null, align 64
  store i256 1, ptr addrspace(1) inttoptr (i256 32 to ptr addrspace(1)), align 64
  %ret = load i256, ptr addrspace(1) null, align 64
  ret i256 %ret
}

define i256 @test_as1_small() {
; CHECK-LABEL: define noundef i256 @test_as1_small
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(1) inttoptr (i256 33 to ptr addrspace(1)), align 64
; CHECK-NEXT:    store i256 1, ptr addrspace(1) inttoptr (i256 1 to ptr addrspace(1)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(1) inttoptr (i256 33 to ptr addrspace(1)), align 64
  store i256 1, ptr addrspace(1) inttoptr (i256 1 to ptr addrspace(1)), align 64
  %ret = load i256, ptr addrspace(1) inttoptr (i256 33 to ptr addrspace(1)), align 64
  ret i256 %ret
}

define i256 @test_as1_large() {
; CHECK-LABEL: define noundef i256 @test_as1_large
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(1) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533664 to ptr addrspace(1)), align 64
; CHECK-NEXT:    store i256 1, ptr addrspace(1) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533632 to ptr addrspace(1)), align 4294967296
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(1) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533664 to ptr addrspace(1)), align 64
  store i256 1, ptr addrspace(1) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533632 to ptr addrspace(1)), align 64
  %ret = load i256, ptr addrspace(1) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533664 to ptr addrspace(1)), align 64
  ret i256 %ret
}

define i256 @test_as5_null() {
; CHECK-LABEL: define noundef i256 @test_as5_null
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) null, align 4294967296
; CHECK-NEXT:    store i256 1, ptr addrspace(5) inttoptr (i256 1 to ptr addrspace(5)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(5) null, align 64
  store i256 1, ptr addrspace(5) inttoptr (i256 1 to ptr addrspace(5)), align 64
  %ret = load i256, ptr addrspace(5) null, align 64
  ret i256 %ret
}

define i256 @test_as5_small() {
; CHECK-LABEL: define noundef i256 @test_as5_small
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
; CHECK-NEXT:    store i256 1, ptr addrspace(5) inttoptr (i256 1 to ptr addrspace(5)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
  store i256 1, ptr addrspace(5) inttoptr (i256 1 to ptr addrspace(5)), align 64
  %ret = load i256, ptr addrspace(5) inttoptr (i256 2 to ptr addrspace(5)), align 64
  ret i256 %ret
}

define i256 @test_as5_large() {
; CHECK-LABEL: define noundef i256 @test_as5_large
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(5) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533632 to ptr addrspace(5)), align 4294967296
; CHECK-NEXT:    store i256 1, ptr addrspace(5) inttoptr (i256 1 to ptr addrspace(5)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(5) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533632 to ptr addrspace(5)), align 64
  store i256 1, ptr addrspace(5) inttoptr (i256 1 to ptr addrspace(5)), align 64
  %ret = load i256, ptr addrspace(5) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533632 to ptr addrspace(5)), align 64
  ret i256 %ret
}

define i256 @test_as6_small() {
; CHECK-LABEL: define noundef i256 @test_as6_small
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(6) inttoptr (i256 2 to ptr addrspace(6)), align 64
; CHECK-NEXT:    store i256 1, ptr addrspace(6) inttoptr (i256 1 to ptr addrspace(6)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(6) inttoptr (i256 2 to ptr addrspace(6)), align 64
  store i256 1, ptr addrspace(6) inttoptr (i256 1 to ptr addrspace(6)), align 64
  %ret = load i256, ptr addrspace(6) inttoptr (i256 2 to ptr addrspace(6)), align 64
  ret i256 %ret
}

define i256 @test_as6_large() {
; CHECK-LABEL: define noundef i256 @test_as6_large
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    store i256 2, ptr addrspace(6) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533632 to ptr addrspace(6)), align 4294967296
; CHECK-NEXT:    store i256 1, ptr addrspace(6) inttoptr (i256 1 to ptr addrspace(6)), align 64
; CHECK-NEXT:    ret i256 2
;
  store i256 2, ptr addrspace(6) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533632 to ptr addrspace(6)), align 64
  store i256 1, ptr addrspace(6) inttoptr (i256 1 to ptr addrspace(6)), align 64
  %ret = load i256, ptr addrspace(6) inttoptr (i256 53919893334301279589334030174039261352344891250716429051063678533632 to ptr addrspace(6)), align 64
  ret i256 %ret
}

define i256 @test_opt_staticcall(ptr addrspace(5) %ptr1, ptr addrspace(6) %ptr2) {
; CHECK-LABEL: define noundef i256 @test_opt_staticcall
; CHECK-SAME: (ptr addrspace(5) nocapture writeonly [[PTR1:%.*]], ptr addrspace(6) nocapture writeonly [[PTR2:%.*]]) local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 1, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    store i256 2, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i256 @llvm.evm.staticcall(i256 1, i256 1, ptr addrspace(1) null, i256 1, ptr addrspace(1) null, i256 1)
; CHECK-NEXT:    ret i256 3
;
  store i256 1, ptr addrspace(5) %ptr1, align 32
  store i256 2, ptr addrspace(6) %ptr2, align 32
  call i256 @llvm.evm.staticcall(i256 1, i256 1, ptr addrspace(1) null, i256 1, ptr addrspace(1) null, i256 1)
  %ret1 = load i256, ptr addrspace(5) %ptr1
  %ret2 = load i256, ptr addrspace(6) %ptr2
  %ret = add i256 %ret1, %ret2
  ret i256 %ret
}

; Verify that in the following tests all load operations are preserved.

define i256 @test_noopt_create(ptr addrspace(5) %ptr1, ptr addrspace(6) %ptr2) {
; CHECK-LABEL: define i256 @test_noopt_create
; CHECK-SAME: (ptr addrspace(5) nocapture [[PTR1:%.*]], ptr addrspace(6) nocapture [[PTR2:%.*]]) local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 1, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    store i256 2, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i256 @llvm.evm.create(i256 0, ptr addrspace(1) null, i256 1)
; CHECK-NEXT:    [[RET1:%.*]] = load i256, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    [[RET2:%.*]] = load i256, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[RET2]], [[RET1]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 1, ptr addrspace(5) %ptr1, align 32
  store i256 2, ptr addrspace(6) %ptr2, align 32
  call i256 @llvm.evm.create(i256 0, ptr addrspace(1) null, i256 1)
  %ret1 = load i256, ptr addrspace(5) %ptr1
  %ret2 = load i256, ptr addrspace(6) %ptr2
  %ret = add i256 %ret1, %ret2
  ret i256 %ret
}

define i256 @test_noopt_create2(ptr addrspace(5) %ptr1, ptr addrspace(6) %ptr2) {
; CHECK-LABEL: define i256 @test_noopt_create2
; CHECK-SAME: (ptr addrspace(5) nocapture [[PTR1:%.*]], ptr addrspace(6) nocapture [[PTR2:%.*]]) local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 1, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    store i256 2, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i256 @llvm.evm.create2(i256 0, ptr addrspace(1) null, i256 1, i256 0)
; CHECK-NEXT:    [[RET1:%.*]] = load i256, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    [[RET2:%.*]] = load i256, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[RET2]], [[RET1]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 1, ptr addrspace(5) %ptr1, align 32
  store i256 2, ptr addrspace(6) %ptr2, align 32
  call i256 @llvm.evm.create2(i256 0, ptr addrspace(1) null, i256 1, i256 0)
  %ret1 = load i256, ptr addrspace(5) %ptr1
  %ret2 = load i256, ptr addrspace(6) %ptr2
  %ret = add i256 %ret1, %ret2
  ret i256 %ret
}

define i256 @test_noopt_call(ptr addrspace(5) %ptr1, ptr addrspace(6) %ptr2) {
; CHECK-LABEL: define i256 @test_noopt_call
; CHECK-SAME: (ptr addrspace(5) nocapture [[PTR1:%.*]], ptr addrspace(6) nocapture [[PTR2:%.*]]) local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 1, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    store i256 2, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i256 @llvm.evm.call(i256 1, i256 1, i256 1, ptr addrspace(1) null, i256 1, ptr addrspace(1) null, i256 1)
; CHECK-NEXT:    [[RET1:%.*]] = load i256, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    [[RET2:%.*]] = load i256, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[RET2]], [[RET1]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 1, ptr addrspace(5) %ptr1, align 32
  store i256 2, ptr addrspace(6) %ptr2, align 32
  call i256 @llvm.evm.call(i256 1, i256 1, i256 1, ptr addrspace(1) null, i256 1, ptr addrspace(1) null, i256 1)
  %ret1 = load i256, ptr addrspace(5) %ptr1
  %ret2 = load i256, ptr addrspace(6) %ptr2
  %ret = add i256 %ret1, %ret2
  ret i256 %ret
}

define i256 @test_noopt_callcode(ptr addrspace(5) %ptr1, ptr addrspace(6) %ptr2) {
; CHECK-LABEL: define i256 @test_noopt_callcode
; CHECK-SAME: (ptr addrspace(5) nocapture [[PTR1:%.*]], ptr addrspace(6) nocapture [[PTR2:%.*]]) local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 1, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    store i256 2, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i256 @llvm.evm.callcode(i256 1, i256 1, i256 1, ptr addrspace(1) null, i256 1, ptr addrspace(1) null, i256 1)
; CHECK-NEXT:    [[RET1:%.*]] = load i256, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    [[RET2:%.*]] = load i256, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[RET2]], [[RET1]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 1, ptr addrspace(5) %ptr1, align 32
  store i256 2, ptr addrspace(6) %ptr2, align 32
  call i256 @llvm.evm.callcode(i256 1, i256 1, i256 1, ptr addrspace(1) null, i256 1, ptr addrspace(1) null, i256 1)
  %ret1 = load i256, ptr addrspace(5) %ptr1
  %ret2 = load i256, ptr addrspace(6) %ptr2
  %ret = add i256 %ret1, %ret2
  ret i256 %ret
}

define i256 @test_noopt_delegatecall(ptr addrspace(5) %ptr1, ptr addrspace(6) %ptr2) {
; CHECK-LABEL: define i256 @test_noopt_delegatecall
; CHECK-SAME: (ptr addrspace(5) nocapture [[PTR1:%.*]], ptr addrspace(6) nocapture [[PTR2:%.*]]) local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    store i256 1, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    store i256 2, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[TMP1:%.*]] = tail call i256 @llvm.evm.delegatecall(i256 1, i256 1, ptr addrspace(1) null, i256 1, ptr addrspace(1) null, i256 1)
; CHECK-NEXT:    [[RET1:%.*]] = load i256, ptr addrspace(5) [[PTR1]], align 32
; CHECK-NEXT:    [[RET2:%.*]] = load i256, ptr addrspace(6) [[PTR2]], align 32
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[RET2]], [[RET1]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  store i256 1, ptr addrspace(5) %ptr1, align 32
  store i256 2, ptr addrspace(6) %ptr2, align 32
  call i256 @llvm.evm.delegatecall(i256 1, i256 1, ptr addrspace(1) null, i256 1, ptr addrspace(1) null, i256 1)
  %ret1 = load i256, ptr addrspace(5) %ptr1
  %ret2 = load i256, ptr addrspace(6) %ptr2
  %ret = add i256 %ret1, %ret2
  ret i256 %ret
}

declare i256 @llvm.evm.create(i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.call(i256, i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.callcode(i256, i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.delegatecall(i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.create2(i256, ptr addrspace(1), i256, i256)
declare i256 @llvm.evm.staticcall(i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare void @llvm.memcpy.p1.p1.i256(ptr addrspace(1), ptr addrspace(1), i256, i1 immarg)
declare i256 @llvm.evm.gas()
declare void @llvm.evm.log0(ptr addrspace(1), i256)
declare void @llvm.evm.log1(ptr addrspace(1), i256, i256)
declare void @llvm.evm.log2(ptr addrspace(1), i256, i256, i256)
declare void @llvm.evm.log3(ptr addrspace(1), i256, i256, i256, i256)
declare void @llvm.evm.log4(ptr addrspace(1), i256, i256, i256, i256, i256)
