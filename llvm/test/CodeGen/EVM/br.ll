; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i256 @diamond(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: diamond:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    EQ
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH4 @.BB0_2
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.1: ; %true_bb
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    POP
; CHECK-NEXT:    MUL
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB0_2: ; %false_bb
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %cmp = icmp eq i256 %rs1, %rs2
  br i1 %cmp, label %true_bb, label %false_bb

true_bb:
  %mul = mul i256 %rs1, %rs1
  br label %end_bb

false_bb:
  %add = add i256 %rs1, %rs2
  br label %end_bb

end_bb:
  %res = phi i256 [%mul, %true_bb], [%add, %false_bb]
  ret i256 %res
}


define i256 @loop(i256 %p1) nounwind {
; CHECK-LABEL: loop:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SWAP3
; CHECK-NEXT:  .BB1_1: ; %loop.cond
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    EQ
; CHECK-NEXT:    PUSH4 @.BB1_3
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.2: ; %loop.body
; CHECK-NEXT:    ; in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    SWAP3
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 1
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP4
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH4 @.BB1_1
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB1_3: ; %loop.exit
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    POP
; CHECK-NEXT:    POP
; CHECK-NEXT:    JUMP
entry:
  br label %loop.cond

loop.cond:
  %i = phi i256 [0, %entry], [%i.next, %loop.body]
  %res = phi i256 [0, %entry], [%res.next, %loop.body]
  %cond = icmp ne i256 %i, %p1
  br i1 %cond, label %loop.body, label %loop.exit

loop.body:
  %i.next = add i256 %i, 1
  %res.next = add i256 %res, %i
  br label %loop.cond

loop.exit:
  ret i256 %res
}
