; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i256 @select_and(i256 %a0, i256 %a1, i256 %a2, i256 %a3, i256 %a4, i256 %a5) {
; CHECK-LABEL: select_and:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SWAP3
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    LT
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    LT
; CHECK-NEXT:    AND
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH4 @.BB0_2
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.1:
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    POP
; CHECK-NEXT:    PUSH4 @.BB0_3
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB0_2:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    POP
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:  .BB0_3:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    JUMP
  %cmp1 = icmp ult i256 %a0, %a1
  %cmp2 = icmp ult i256 %a2, %a3
  %and = and i1 %cmp1, %cmp2
  %select = select i1 %and, i256 %a4, i256 %a5
  ret i256 %select
}

define i256 @select_or(i256 %a0, i256 %a1, i256 %a2, i256 %a3, i256 %a4, i256 %a5) {
; CHECK-LABEL: select_or:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SWAP3
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    LT
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    LT
; CHECK-NEXT:    OR
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH4 @.BB1_2
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.1:
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    POP
; CHECK-NEXT:    PUSH4 @.BB1_3
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB1_2:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    POP
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:  .BB1_3:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    JUMP
  %cmp1 = icmp ult i256 %a0, %a1
  %cmp2 = icmp ult i256 %a2, %a3
  %or = or i1 %cmp1, %cmp2
  %select = select i1 %or, i256 %a4, i256 %a5
  ret i256 %select
}

define i256 @select_select_to_and(i1 %cond1, i1 %cond2, i256 %a, i256 %b) {
; CHECK-LABEL: select_select_to_and:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    AND
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH4 @.BB2_2
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.1:
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    POP
; CHECK-NEXT:    PUSH4 @.BB2_3
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB2_2:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    POP
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:  .BB2_3:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    JUMP
  %select1 = select i1 %cond1, i256 %a, i256 %b
  %select2 = select i1 %cond2, i256 %select1, i256 %b
  ret i256 %select2
}

define i256 @select_select_to_or(i1 %cond1, i1 %cond2, i256 %a, i256 %b) {
; CHECK-LABEL: select_select_to_or:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    OR
; CHECK-NEXT:    AND
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH4 @.BB3_2
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.1:
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    POP
; CHECK-NEXT:    PUSH4 @.BB3_3
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB3_2:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    POP
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:  .BB3_3:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    JUMP
  %select1 = select i1 %cond1, i256 %a, i256 %b
  %select2 = select i1 %cond2, i256 %a, i256 %select1
  ret i256 %select2
}
