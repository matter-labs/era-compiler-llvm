; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes='require<profile-summary>,function(codegenprepare)' < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

@glob = external addrspace(1) global i256

define i256 @test_as1(i256 %arg) {
; CHECK-LABEL: define i256 @test_as1(
; CHECK-SAME: i256 [[ARG:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[ADD:%.*]] = add i256 [[ARG]], 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i256 [[ARG]], 10
; CHECK-NEXT:    br i1 [[CMP]], label %[[THEN:.*]], label %[[EXIT:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[INTTOPTR:%.*]] = inttoptr i256 [[ADD]] to ptr addrspace(1)
; CHECK-NEXT:    [[LOAD:%.*]] = load i256, ptr addrspace(1) [[INTTOPTR]], align 1
; CHECK-NEXT:    br label %[[EXIT]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i256 [ [[LOAD]], %[[THEN]] ], [ 0, %[[ENTRY]] ]
; CHECK-NEXT:    ret i256 [[PHI]]
;
entry:
  %add = add i256 %arg, 4
  %cmp = icmp ugt i256 %arg, 10
  br i1 %cmp, label %then, label %exit

then:
  %inttoptr = inttoptr i256 %add to ptr addrspace(1)
  %load = load i256, ptr addrspace(1) %inttoptr, align 1
  br label %exit

exit:
  %phi = phi i256 [ %load, %then ], [ 0, %entry ]
  ret i256 %phi
}

define i256 @test_as5(i256 %arg) {
; CHECK-LABEL: define i256 @test_as5(
; CHECK-SAME: i256 [[ARG:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[ADD:%.*]] = add i256 [[ARG]], 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i256 [[ARG]], 10
; CHECK-NEXT:    br i1 [[CMP]], label %[[THEN:.*]], label %[[EXIT:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[INTTOPTR:%.*]] = inttoptr i256 [[ADD]] to ptr addrspace(5)
; CHECK-NEXT:    [[LOAD:%.*]] = load i256, ptr addrspace(5) [[INTTOPTR]], align 1
; CHECK-NEXT:    br label %[[EXIT]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i256 [ [[LOAD]], %[[THEN]] ], [ 0, %[[ENTRY]] ]
; CHECK-NEXT:    ret i256 [[PHI]]
;
entry:
  %add = add i256 %arg, 4
  %cmp = icmp ugt i256 %arg, 10
  br i1 %cmp, label %then, label %exit

then:
  %inttoptr = inttoptr i256 %add to ptr addrspace(5)
  %load = load i256, ptr addrspace(5) %inttoptr, align 1
  br label %exit

exit:
  %phi = phi i256 [ %load, %then ], [ 0, %entry ]
  ret i256 %phi
}

define i256 @test_no_as2(i256 %arg) {
; CHECK-LABEL: define i256 @test_no_as2(
; CHECK-SAME: i256 [[ARG:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[ADD:%.*]] = add i256 [[ARG]], 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i256 [[ARG]], 10
; CHECK-NEXT:    br i1 [[CMP]], label %[[THEN:.*]], label %[[EXIT:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[INTTOPTR:%.*]] = inttoptr i256 [[ADD]] to ptr addrspace(2)
; CHECK-NEXT:    [[LOAD:%.*]] = load i256, ptr addrspace(2) [[INTTOPTR]], align 1
; CHECK-NEXT:    br label %[[EXIT]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i256 [ [[LOAD]], %[[THEN]] ], [ 0, %[[ENTRY]] ]
; CHECK-NEXT:    ret i256 [[PHI]]
;
entry:
  %add = add i256 %arg, 4
  %cmp = icmp ugt i256 %arg, 10
  br i1 %cmp, label %then, label %exit

then:
  %inttoptr = inttoptr i256 %add to ptr addrspace(2)
  %load = load i256, ptr addrspace(2) %inttoptr, align 1
  br label %exit

exit:
  %phi = phi i256 [ %load, %then ], [ 0, %entry ]
  ret i256 %phi
}

define i256 @test_no_scale(i256 %arg) {
; CHECK-LABEL: define i256 @test_no_scale(
; CHECK-SAME: i256 [[ARG:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[MUL:%.*]] = mul i256 [[ARG]], 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i256 [[ARG]], 10
; CHECK-NEXT:    br i1 [[CMP]], label %[[THEN:.*]], label %[[EXIT:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[INTTOPTR:%.*]] = inttoptr i256 [[MUL]] to ptr addrspace(1)
; CHECK-NEXT:    [[LOAD:%.*]] = load i256, ptr addrspace(1) [[INTTOPTR]], align 1
; CHECK-NEXT:    br label %[[EXIT]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i256 [ [[LOAD]], %[[THEN]] ], [ 0, %[[ENTRY]] ]
; CHECK-NEXT:    ret i256 [[PHI]]
;
entry:
  %mul = mul i256 %arg, 4
  %cmp = icmp ugt i256 %arg, 10
  br i1 %cmp, label %then, label %exit

then:
  %inttoptr = inttoptr i256 %mul to ptr addrspace(1)
  %load = load i256, ptr addrspace(1) %inttoptr, align 1
  br label %exit

exit:
  %phi = phi i256 [ %load, %then ], [ 0, %entry ]
  ret i256 %phi
}

define i256 @test_no_glob(i256 %arg) {
; CHECK-LABEL: define i256 @test_no_glob(
; CHECK-SAME: i256 [[ARG:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LOAD1:%.*]] = load i256, ptr addrspace(1) @glob, align 64
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i256 [[ARG]], 10
; CHECK-NEXT:    br i1 [[CMP]], label %[[THEN:.*]], label %[[EXIT:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[INTTOPTR:%.*]] = inttoptr i256 [[LOAD1]] to ptr addrspace(1)
; CHECK-NEXT:    [[LOAD2:%.*]] = load i256, ptr addrspace(1) [[INTTOPTR]], align 1
; CHECK-NEXT:    br label %[[EXIT]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i256 [ [[LOAD2]], %[[THEN]] ], [ 0, %[[ENTRY]] ]
; CHECK-NEXT:    ret i256 [[PHI]]
;
entry:
  %load1 = load i256, ptr addrspace(1) @glob, align 64
  %cmp = icmp ugt i256 %arg, 10
  br i1 %cmp, label %then, label %exit

then:
  %inttoptr = inttoptr i256 %load1 to ptr addrspace(1)
  %load2 = load i256, ptr addrspace(1) %inttoptr, align 1
  br label %exit

exit:
  %phi = phi i256 [ %load2, %then ], [ 0, %entry ]
  ret i256 %phi
}
