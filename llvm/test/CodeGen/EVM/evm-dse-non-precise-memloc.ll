; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -O3 -S < %s | FileCheck %s
target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

; This test verifies that the dead store to (i256 32 to ptr addrspace(1)) is eliminated.

declare i256 @llvm.evm.datasize(metadata) #0

declare i256 @llvm.evm.dataoffset(metadata) #0

declare i256 @llvm.evm.callvalue() #1

declare void @llvm.evm.return(ptr addrspace(1) readonly, i256) #2

declare void @llvm.evm.revert(ptr addrspace(1) readonly, i256) #3

declare void @llvm.memcpy.p1.p4.i256(ptr addrspace(1) noalias nocapture writeonly, ptr addrspace(4) noalias nocapture readonly, i256, i1 immarg) #4

define void @__entry() local_unnamed_addr #5 {
; CHECK-LABEL: define void @__entry(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR5:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store i256 129, ptr addrspace(1) inttoptr (i256 100 to ptr addrspace(1)), align 64
; CHECK-NEXT:    [[CALLVALUE:%.*]] = tail call i256 @llvm.evm.callvalue()
; CHECK-NEXT:    [[IF_CONDITION_COMPARED_NOT:%.*]] = icmp eq i256 [[CALLVALUE]], 0
; CHECK-NEXT:    br i1 [[IF_CONDITION_COMPARED_NOT]], label %[[IF_JOIN:.*]], label %[[IF_MAIN:.*]]
; CHECK:       [[IF_MAIN]]:
; CHECK-NEXT:    tail call void @llvm.evm.revert(ptr addrspace(1) noalias nocapture nofree noundef nonnull align 32 null, i256 32)
; CHECK-NEXT:    unreachable
; CHECK:       [[IF_JOIN]]:
; CHECK-NEXT:    store i256 42, ptr addrspace(5) null, align 4294967296
; CHECK-NEXT:    [[DATASIZE:%.*]] = tail call i256 @llvm.evm.datasize(metadata [[META0:![0-9]+]])
; CHECK-NEXT:    [[DATAOFFSET:%.*]] = tail call i256 @llvm.evm.dataoffset(metadata [[META0]])
; CHECK-NEXT:    [[CODECOPY_SOURCE_POINTER:%.*]] = inttoptr i256 [[DATAOFFSET]] to ptr addrspace(4)
; CHECK-NEXT:    tail call void @llvm.memcpy.p1.p4.i256(ptr addrspace(1) nonnull align 128 inttoptr (i256 128 to ptr addrspace(1)), ptr addrspace(4) align 1 [[CODECOPY_SOURCE_POINTER]], i256 [[DATASIZE]], i1 false)
; CHECK-NEXT:    tail call void @llvm.evm.return(ptr addrspace(1) noalias nocapture nofree noundef nonnull align 32 inttoptr (i256 128 to ptr addrspace(1)), i256 [[DATASIZE]])
; CHECK-NEXT:    unreachable
;
entry:
  ; To be removed
  store i256 128, ptr addrspace(1) inttoptr (i256 32 to ptr addrspace(1)), align 64
  store i256 129, ptr addrspace(1) inttoptr (i256 100 to ptr addrspace(1)), align 64
  %callvalue = tail call i256 @llvm.evm.callvalue()
  %if_condition_compared.not = icmp eq i256 %callvalue, 0
  br i1 %if_condition_compared.not, label %if_join, label %if_main

if_main:
  tail call void @llvm.evm.revert(ptr addrspace(1) noalias nocapture nofree noundef nonnull align 32 null, i256 32)
  unreachable

if_join:
  store i256 42, ptr addrspace(5) null, align 4294967296
  %datasize = tail call i256 @llvm.evm.datasize(metadata !0)
  %dataoffset = tail call i256 @llvm.evm.dataoffset(metadata !0)
  %codecopy_source_pointer = inttoptr i256 %dataoffset to ptr addrspace(4)
  tail call void @llvm.memcpy.p1.p4.i256(ptr addrspace(1) nonnull align 128 inttoptr (i256 128 to ptr addrspace(1)), ptr addrspace(4) align 1 %codecopy_source_pointer, i256 %datasize, i1 false)
  tail call void @llvm.evm.return(ptr addrspace(1) noalias nocapture nofree noundef nonnull align 32 inttoptr (i256 128 to ptr addrspace(1)), i256 %datasize)
  unreachable
}

attributes #0 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #1 = { mustprogress nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nofree noreturn nounwind memory(read) }
attributes #3 = { nofree noreturn nounwind memory(argmem: read) }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { nofree noreturn nounwind null_pointer_is_valid memory(readwrite, inaccessiblemem: read) "evm-entry-function" }

!0 = !{!"Test_16_deployed"}
;.
; CHECK: [[META0]] = !{!"Test_16_deployed"}
;.
