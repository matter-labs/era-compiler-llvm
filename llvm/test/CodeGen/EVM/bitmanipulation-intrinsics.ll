; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

declare i256 @llvm.bitreverse.i256(i256)
declare i256 @llvm.bswap.i256(i256)
declare i256 @llvm.ctpop.i256(i256)
declare i256 @llvm.ctlz.i256(i256, i1)
declare i256 @llvm.cttz.i256(i256, i1)

define i256 @bitreversetest(i256 %v) {
; CHECK-LABEL: bitreversetest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    PUSH2 0xFF00
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xE8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH3 0xFF0000
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xD8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH4 0xFF000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0xC8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH5 0xFF00000000
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xB8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH6 0xFF0000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0xA8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH7 0xFF000000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x98
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH8 0xFF00000000000000
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x88
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH9 0xFF0000000000000000
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x78
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH10 0xFF000000000000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x68
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH11 0xFF00000000000000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x58
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH12 0xFF0000000000000000000000
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x48
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH13 0xFF000000000000000000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x38
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH14 0xFF00000000000000000000000000
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x28
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH15 0xFF0000000000000000000000000000
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x18
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH16 0xFF000000000000000000000000000000
; CHECK-NEXT:    DUP6
; CHECK-NEXT:    PUSH1 0x8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0x80
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0x8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0x88
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x18
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0x90
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x28
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0x98
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x38
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xA0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x48
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xA8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x58
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xB0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x68
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xB8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x78
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xC0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0x88
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xC8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x98
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xD0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xA8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xD8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0xB8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xE0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0xC8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xE8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xD8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xF0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0xE8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xF8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH32 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHL
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHL
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH32 0x5555555555555555555555555555555555555555555555555555555555555555
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SHL
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.bitreverse.i256(i256 %v)
  ret i256 %res
}

define i256 @bswaptest(i256 %v) {
; CHECK-LABEL: bswaptest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    PUSH2 0xFF00
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xE8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH3 0xFF0000
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xD8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH4 0xFF000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0xC8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH5 0xFF00000000
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xB8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH6 0xFF0000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0xA8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH7 0xFF000000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x98
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH8 0xFF00000000000000
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x88
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH9 0xFF0000000000000000
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x78
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH10 0xFF000000000000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x68
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH11 0xFF00000000000000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x58
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH12 0xFF0000000000000000000000
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x48
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH13 0xFF000000000000000000000000
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x38
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH14 0xFF00000000000000000000000000
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x28
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH15 0xFF0000000000000000000000000000
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x18
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH16 0xFF000000000000000000000000000000
; CHECK-NEXT:    DUP6
; CHECK-NEXT:    PUSH1 0x8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0x80
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0x8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0x88
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x18
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0x90
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x28
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0x98
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x38
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xA0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x48
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xA8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x58
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xB0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0x68
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xB8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 0x78
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xC0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0x88
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xC8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x98
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xD0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xA8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xD8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 0xB8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xE0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0xC8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xE8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0xD8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xFF
; CHECK-NEXT:    PUSH1 0xF0
; CHECK-NEXT:    SHL
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0xE8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 0xF8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.bswap.i256(i256 %v)
  ret i256 %res
}

define i256 @ctpoptest(i256 %v) {
; CHECK-LABEL: ctpoptest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH32 0x101010101010101010101010101010101010101010101010101010101010101
; CHECK-NEXT:    PUSH16 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333
; CHECK-NEXT:    DUP6
; CHECK-NEXT:    PUSH16 0x55555555555555555555555555555555
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    SWAP8
; CHECK-NEXT:    PUSH1 0x81
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0x80
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SUB
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP7
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
; CHECK-NEXT:    AND
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP5
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 0x10
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    SWAP3
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 0x10
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.ctpop.i256(i256 %v)
  ret i256 %res
}

define i256 @ctlztest(i256 %v) {
; CHECK-LABEL: ctlztest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH32 0x101010101010101010101010101010101010101010101010101010101010101
; CHECK-NEXT:    PUSH16 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333
; CHECK-NEXT:    DUP6
; CHECK-NEXT:    PUSH16 0x55555555555555555555555555555555
; CHECK-NEXT:    SWAP7
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x10
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x20
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x40
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x80
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    NOT
; CHECK-NEXT:    PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
; CHECK-NEXT:    DUP8
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x81
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x80
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SUB
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP8
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP5
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 0x10
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    SWAP3
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 0x10
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.ctlz.i256(i256 %v, i1 false)
  ret i256 %res
}

define i256 @cttztest(i256 %v) {
; CHECK-LABEL: cttztest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH32 0x101010101010101010101010101010101010101010101010101010101010101
; CHECK-NEXT:    PUSH16 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH32 0x3333333333333333333333333333333333333333333333333333333333333333
; CHECK-NEXT:    DUP6
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    PUSH16 0x55555555555555555555555555555555
; CHECK-NEXT:    SWAP8
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    NOT
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
; CHECK-NEXT:    DUP8
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x81
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x80
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SUB
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP8
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP5
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 0x10
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    SWAP3
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 0x10
; CHECK-NEXT:    BYTE
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.cttz.i256(i256 %v, i1 false)
  ret i256 %res
}
