; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

declare i256 @llvm.bitreverse.i256(i256)
declare i256 @llvm.bswap.i256(i256)
declare i256 @llvm.ctpop.i256(i256)
declare i256 @llvm.ctlz.i256(i256, i1)
declare i256 @llvm.cttz.i256(i256, i1)

define i256 @bitreversetest(i256 %v) {
; CHECK-LABEL: bitreversetest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 248
; CHECK-NEXT:    SHR
; CHECK-NEXT:    PUSH2 65280
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 232
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH3 16711680
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 216
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH4 4278190080
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 200
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH5 1095216660480
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 184
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH6 280375465082880
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 168
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH7 71776119061217280
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 152
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH8 18374686479671623680
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 136
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH9 4703919738795935662080
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH10 1204203453131759529492480
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 104
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH11 308276084001730439550074880
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 88
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH12 78918677504442992524819169280
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 72
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH13 20203181441137406086353707335680
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 56
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH14 5172014448931175958106549077934080
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 40
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH15 1324035698926381045275276563951124480
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 24
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH16 338953138925153547590470800371487866880
; CHECK-NEXT:    DUP6
; CHECK-NEXT:    PUSH1 8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH17 86772003564839308183160524895100893921280
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH18 22213632912598862894889094373145828843847680
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 24
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH19 5686690025625308901091608159525332184025006080
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 40
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH20 1455792646560079078679451688838485039110401556480
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 56
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH21 372682917519380244141939632342652170012262798458880
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 72
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH22 95406826884961342500336545879718955523139276405473280
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 88
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH23 24424147682550103680086155745208052613923654759801159680
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 104
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH24 6252581806732826542102055870773261469164455618509096878080
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH25 1600660942523603594778126302917954936106100638338328800788480
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 136
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH26 409769201286042520263200333546996463643161763414612173001850880
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 152
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH27 104900915529226885187379285388031094692649411434140716288473825280
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 168
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH28 26854634375482082607969097059335960241318249327140023369849299271680
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 184
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH29 6874786400123413147640088847190005821777471827747845982681420613550080
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 200
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH30 1759945318431593765795862744880641490375032787903448571566443677068820480
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 216
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH31 450546001518488004043740862689444221536008393703282834321009581329618042880
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 232
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 248
; CHECK-NEXT:    SHL
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH32 6811299366900952671974763824040465167839410862684739061144563765171360567055
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHL
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH32 23158417847463239084714197001737581570653996933128112807891516801582625927987
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHL
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH32 38597363079105398474523661669562635951089994888546854679819194669304376546645
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 1
; CHECK-NEXT:    SHL
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    PUSH1 1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.bitreverse.i256(i256 %v)
  ret i256 %res
}

define i256 @bswaptest(i256 %v) {
; CHECK-LABEL: bswaptest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 248
; CHECK-NEXT:    SHR
; CHECK-NEXT:    PUSH2 65280
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 232
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH3 16711680
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 216
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH4 4278190080
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 200
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH5 1095216660480
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 184
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH6 280375465082880
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 168
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH7 71776119061217280
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 152
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH8 18374686479671623680
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 136
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH9 4703919738795935662080
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH10 1204203453131759529492480
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 104
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH11 308276084001730439550074880
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 88
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH12 78918677504442992524819169280
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 72
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH13 20203181441137406086353707335680
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 56
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH14 5172014448931175958106549077934080
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 40
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH15 1324035698926381045275276563951124480
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 24
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH16 338953138925153547590470800371487866880
; CHECK-NEXT:    DUP6
; CHECK-NEXT:    PUSH1 8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH17 86772003564839308183160524895100893921280
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 8
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH18 22213632912598862894889094373145828843847680
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 24
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH19 5686690025625308901091608159525332184025006080
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 40
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH20 1455792646560079078679451688838485039110401556480
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 56
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH21 372682917519380244141939632342652170012262798458880
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 72
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH22 95406826884961342500336545879718955523139276405473280
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 88
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH23 24424147682550103680086155745208052613923654759801159680
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 104
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH24 6252581806732826542102055870773261469164455618509096878080
; CHECK-NEXT:    DUP5
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH25 1600660942523603594778126302917954936106100638338328800788480
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 136
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH26 409769201286042520263200333546996463643161763414612173001850880
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 152
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    PUSH27 104900915529226885187379285388031094692649411434140716288473825280
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 168
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH28 26854634375482082607969097059335960241318249327140023369849299271680
; CHECK-NEXT:    DUP4
; CHECK-NEXT:    PUSH1 184
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH29 6874786400123413147640088847190005821777471827747845982681420613550080
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 200
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH30 1759945318431593765795862744880641490375032787903448571566443677068820480
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 216
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH31 450546001518488004043740862689444221536008393703282834321009581329618042880
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 232
; CHECK-NEXT:    SHL
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH1 248
; CHECK-NEXT:    SHL
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    OR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.bswap.i256(i256 %v)
  ret i256 %res
}

define i256 @ctpoptest(i256 %v) {
; CHECK-LABEL: ctpoptest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 255
; CHECK-NEXT:    PUSH32 454086624460063511464984254936031011189294057512315937409637584344757371137
; CHECK-NEXT:    PUSH16 20016609818878733144904388672456953615
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH16 113427455640312821154458202477256070485
; CHECK-NEXT:    DUP8
; CHECK-NEXT:    PUSH1 129
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    DUP8
; CHECK-NEXT:    PUSH1 128
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SUB
; CHECK-NEXT:    PUSH32 23158417847463239084714197001737581570653996933128112807891516801582625927987
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP7
; CHECK-NEXT:    PUSH16 113427455640312821154458202477256070485
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    PUSH1 1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    PUSH16 340282366920938463463374607431768211455
; CHECK-NEXT:    AND
; CHECK-NEXT:    SUB
; CHECK-NEXT:    PUSH32 23158417847463239084714197001737581570653996933128112807891516801582625927987
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP7
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP4
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.ctpop.i256(i256 %v)
  ret i256 %res
}

define i256 @ctlztest(i256 %v) {
; CHECK-LABEL: ctlztest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 8
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 16
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 32
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 64
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 128
; CHECK-NEXT:    SHR
; CHECK-NEXT:    OR
; CHECK-NEXT:    NOT
; CHECK-NEXT:    PUSH1 255
; CHECK-NEXT:    PUSH32 454086624460063511464984254936031011189294057512315937409637584344757371137
; CHECK-NEXT:    PUSH16 20016609818878733144904388672456953615
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH16 113427455640312821154458202477256070485
; CHECK-NEXT:    DUP8
; CHECK-NEXT:    PUSH1 129
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    DUP8
; CHECK-NEXT:    PUSH1 128
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SUB
; CHECK-NEXT:    PUSH32 23158417847463239084714197001737581570653996933128112807891516801582625927987
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP7
; CHECK-NEXT:    PUSH16 340282366920938463463374607431768211455
; CHECK-NEXT:    PUSH16 113427455640312821154458202477256070485
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    SUB
; CHECK-NEXT:    PUSH32 23158417847463239084714197001737581570653996933128112807891516801582625927987
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP7
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP4
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.ctlz.i256(i256 %v, i1 false)
  ret i256 %res
}

define i256 @cttztest(i256 %v) {
; CHECK-LABEL: cttztest:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 1
; CHECK-NEXT:    DUP2
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    NOT
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 255
; CHECK-NEXT:    PUSH32 454086624460063511464984254936031011189294057512315937409637584344757371137
; CHECK-NEXT:    PUSH16 20016609818878733144904388672456953615
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH16 113427455640312821154458202477256070485
; CHECK-NEXT:    DUP8
; CHECK-NEXT:    PUSH1 129
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    DUP8
; CHECK-NEXT:    PUSH1 128
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SUB
; CHECK-NEXT:    PUSH32 23158417847463239084714197001737581570653996933128112807891516801582625927987
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP7
; CHECK-NEXT:    PUSH16 340282366920938463463374607431768211455
; CHECK-NEXT:    PUSH16 113427455640312821154458202477256070485
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 1
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    SUB
; CHECK-NEXT:    PUSH32 23158417847463239084714197001737581570653996933128112807891516801582625927987
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    DUP3
; CHECK-NEXT:    PUSH1 2
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP7
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP4
; CHECK-NEXT:    DUP1
; CHECK-NEXT:    PUSH1 4
; CHECK-NEXT:    SHR
; CHECK-NEXT:    ADD
; CHECK-NEXT:    AND
; CHECK-NEXT:    MUL
; CHECK-NEXT:    PUSH1 120
; CHECK-NEXT:    SHR
; CHECK-NEXT:    AND
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %res = call i256 @llvm.cttz.i256(i256 %v, i1 false)
  ret i256 %res
}
