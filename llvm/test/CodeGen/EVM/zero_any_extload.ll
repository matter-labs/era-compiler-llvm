; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i8 @load_anyext_i8(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_anyext_i8:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 248
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i8, ptr addrspace(1) %ptr
  ret i8 %load
}

define i16 @load_anyext_i16(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_anyext_i16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 240
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i16, ptr addrspace(1) %ptr
  ret i16 %load
}

define i32 @load_anyext_i32(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_anyext_i32:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 224
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i32, ptr addrspace(1) %ptr
  ret i32 %load
}

define i64 @load_anyext_i64(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_anyext_i64:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 192
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i64, ptr addrspace(1) %ptr
  ret i64 %load
}

define i128 @load_anyext_i128(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_anyext_i128:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 128
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i128, ptr addrspace(1) %ptr
  ret i128 %load
}

define i256 @load_zeroext_i8(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_zeroext_i8:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 248
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i8, ptr addrspace(1) %ptr
  %zext = zext i8 %load to i256
  ret i256 %zext
}

define i256 @load_zeroext_i16(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_zeroext_i16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 240
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i16, ptr addrspace(1) %ptr
  %zext = zext i16 %load to i256
  ret i256 %zext
}

define i256 @load_zeroext_i32(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_zeroext_i32:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 224
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i32, ptr addrspace(1) %ptr
  %zext = zext i32 %load to i256
  ret i256 %zext
}

define i256 @load_zeroext_i64(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_zeroext_i64:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 192
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i64, ptr addrspace(1) %ptr
  %zext = zext i64 %load to i256
  ret i256 %zext
}

define i256 @load_zeroext_i128(ptr addrspace(1) %ptr) nounwind {
; CHECK-LABEL: load_zeroext_i128:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    MLOAD
; CHECK-NEXT:    PUSH1 128
; CHECK-NEXT:    SHR
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP

  %load = load i128, ptr addrspace(1) %ptr
  %zext = zext i128 %load to i256
  ret i256 %zext
}
