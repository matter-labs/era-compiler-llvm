; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -O3 -S < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i256 @addmod_dce(i256 %rs1, i256 %rs2, i256 %rs3) nounwind {
; CHECK-LABEL: define noundef i256 @addmod_dce
; CHECK-SAME: (i256 [[RS1:%.*]], i256 [[RS2:%.*]], i256 [[RS3:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.addmod(i256 %rs1, i256 %rs2, i256 %rs3)
  ret i256 0
}

define i256 @sha3_dce(ptr addrspace(1) %offset, i256 %size) nounwind {
; CHECK-LABEL: define noundef i256 @sha3_dce
; CHECK-SAME: (ptr addrspace(1) nocapture readnone [[OFFSET:%.*]], i256 [[SIZE:%.*]]) local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.sha3(ptr addrspace(1) %offset, i256 %size)
  ret i256 0
}

define i256 @pc_dce() nounwind {
; CHECK-LABEL: define noundef i256 @pc_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.pc()
  ret i256 0
}

define i256 @gas_dce() nounwind {
; CHECK-LABEL: define noundef i256 @gas_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.gas()
  ret i256 0
}

define i256 @msize_dce() nounwind {
; CHECK-LABEL: define noundef i256 @msize_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.msize()
  ret i256 0
}

define i256 @balance_dce(i256 %rs1) nounwind {
; CHECK-LABEL: define noundef i256 @balance_dce
; CHECK-SAME: (i256 [[RS1:%.*]]) local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.balance(i256 %rs1)
  ret i256 0
}

define i256 @selfbalance_dce() nounwind {
; CHECK-LABEL: define noundef i256 @selfbalance_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.selfbalance()
  ret i256 0
}

define i256 @returndatasize_dce() nounwind {
; CHECK-LABEL: define noundef i256 @returndatasize_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.returndatasize()
  ret i256 0
}

define i256 @origin_dce() nounwind {
; CHECK-LABEL: define noundef i256 @origin_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.origin()
  ret i256 0
}

define i256 @gasprice_dce() nounwind {
; CHECK-LABEL: define noundef i256 @gasprice_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.gasprice()
  ret i256 0
}

define i256 @blockhash_dce(i256 %rs1) nounwind {
; CHECK-LABEL: define noundef i256 @blockhash_dce
; CHECK-SAME: (i256 [[RS1:%.*]]) local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.blockhash(i256 %rs1)
  ret i256 0
}

define i256 @blobhash_dce(i256 %rs1) nounwind {
; CHECK-LABEL: define noundef i256 @blobhash_dce
; CHECK-SAME: (i256 [[RS1:%.*]]) local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.blobhash(i256 %rs1)
  ret i256 0
}

define i256 @coinbase_dce() nounwind {
; CHECK-LABEL: define noundef i256 @coinbase_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.coinbase()
  ret i256 0
}

define i256 @timestamp_dce() nounwind {
; CHECK-LABEL: define noundef i256 @timestamp_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.timestamp()
  ret i256 0
}

define i256 @number_dce() nounwind {
; CHECK-LABEL: define noundef i256 @number_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.number()
  ret i256 0
}

define i256 @difficulty_dce() nounwind {
; CHECK-LABEL: define noundef i256 @difficulty_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.difficulty()
  ret i256 0
}

define i256 @gaslimit_dce() nounwind {
; CHECK-LABEL: define noundef i256 @gaslimit_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.gaslimit()
  ret i256 0
}

define i256 @chainid_dce() nounwind {
; CHECK-LABEL: define noundef i256 @chainid_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.chainid()
  ret i256 0
}

define i256 @basefee_dce() nounwind {
; CHECK-LABEL: define noundef i256 @basefee_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.basefee()
  ret i256 0
}

define i256 @blobbasefee_dce() nounwind {
; CHECK-LABEL: define noundef i256 @blobbasefee_dce
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    ret i256 0
;
  %res = call i256 @llvm.evm.blobbasefee()
  ret i256 0
}

define i256 @addmod(i256 %rs1, i256 %rs2, i256 %rs3) nounwind {
; CHECK-LABEL: define i256 @addmod
; CHECK-SAME: (i256 [[RS1:%.*]], i256 [[RS2:%.*]], i256 [[RS3:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.addmod(i256 [[RS1]], i256 [[RS2]], i256 [[RS3]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.addmod(i256 %rs1, i256 %rs2, i256 %rs3)
  %res2 = call i256 @llvm.evm.addmod(i256 %rs1, i256 %rs2, i256 %rs3)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @mulmod(i256 %rs1, i256 %rs2, i256 %rs3) nounwind {
; CHECK-LABEL: define i256 @mulmod
; CHECK-SAME: (i256 [[RS1:%.*]], i256 [[RS2:%.*]], i256 [[RS3:%.*]]) local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.mulmod(i256 [[RS1]], i256 [[RS2]], i256 [[RS3]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.mulmod(i256 %rs1, i256 %rs2, i256 %rs3)
  %res2 = call i256 @llvm.evm.mulmod(i256 %rs1, i256 %rs2, i256 %rs3)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @exp(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: define i256 @exp
; CHECK-SAME: (i256 [[RS1:%.*]], i256 [[RS2:%.*]]) local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.exp(i256 [[RS1]], i256 [[RS2]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.exp(i256 %rs1, i256 %rs2)
  %res2 = call i256 @llvm.evm.exp(i256 %rs1, i256 %rs2)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @sha3(ptr addrspace(1) %offset, i256 %size) nounwind {
; CHECK-LABEL: define i256 @sha3
; CHECK-SAME: (ptr addrspace(1) nocapture readonly [[OFFSET:%.*]], i256 [[SIZE:%.*]]) local_unnamed_addr #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.sha3(ptr addrspace(1) [[OFFSET]], i256 [[SIZE]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.sha3(ptr addrspace(1) %offset, i256 %size)
  %res2 = call i256 @llvm.evm.sha3(ptr addrspace(1) %offset, i256 %size)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @signextend(i256 %bytesize, i256 %val) nounwind {
; CHECK-LABEL: define i256 @signextend
; CHECK-SAME: (i256 [[BYTESIZE:%.*]], i256 [[VAL:%.*]]) local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.signextend(i256 [[BYTESIZE]], i256 [[VAL]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.signextend(i256 %bytesize, i256 %val)
  %res2 = call i256 @llvm.evm.signextend(i256 %bytesize, i256 %val)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @byte(i256 %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: define i256 @byte
; CHECK-SAME: (i256 [[RS1:%.*]], i256 [[RS2:%.*]]) local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.byte(i256 [[RS1]], i256 [[RS2]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.byte(i256 %rs1, i256 %rs2)
  %res2 = call i256 @llvm.evm.byte(i256 %rs1, i256 %rs2)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @pc() nounwind {
; CHECK-LABEL: define i256 @pc
; CHECK-SAME: () local_unnamed_addr #[[ATTR3:[0-9]+]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.pc()
; CHECK-NEXT:    [[RES2:%.*]] = tail call i256 @llvm.evm.pc()
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[RES2]], [[RES1]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.pc()
  %res2 = call i256 @llvm.evm.pc()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @gas() nounwind {
; CHECK-LABEL: define i256 @gas
; CHECK-SAME: () local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.gas()
; CHECK-NEXT:    [[RES2:%.*]] = tail call i256 @llvm.evm.gas()
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[RES2]], [[RES1]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.gas()
  %res2 = call i256 @llvm.evm.gas()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @msize() nounwind {
; CHECK-LABEL: define i256 @msize
; CHECK-SAME: () local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.msize()
; CHECK-NEXT:    [[RES2:%.*]] = tail call i256 @llvm.evm.msize()
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[RES2]], [[RES1]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.msize()
  %res2 = call i256 @llvm.evm.msize()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @address() nounwind {
; CHECK-LABEL: define i256 @address
; CHECK-SAME: () local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.address()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.address()
  %res2 = call i256 @llvm.evm.address()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @origin() nounwind {
; CHECK-LABEL: define i256 @origin
; CHECK-SAME: () local_unnamed_addr #[[ATTR4:[0-9]+]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.origin()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.origin()
  %res2 = call i256 @llvm.evm.origin()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @caller() nounwind {
; CHECK-LABEL: define i256 @caller
; CHECK-SAME: () local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.caller()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.caller()
  %res2 = call i256 @llvm.evm.caller()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @balance(i256 %rs1) nounwind {
; CHECK-LABEL: define i256 @balance
; CHECK-SAME: (i256 [[RS1:%.*]]) local_unnamed_addr #[[ATTR5:[0-9]+]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.balance(i256 [[RS1]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.balance(i256 %rs1)
  %res2 = call i256 @llvm.evm.balance(i256 %rs1)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @balance_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @balance_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6:[0-9]+]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.balance(i256 [[ADDR]])
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.balance(i256 [[ADDR]])
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.balance(i256 %addr)
  %v2 = call i256 @llvm.evm.balance(i256 %addr)
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.balance(i256 %addr)
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @origin_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @origin_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR3]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.origin()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.origin()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.origin()
  %v2 = call i256 @llvm.evm.origin()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.origin()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @gasprice_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @gasprice_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.gasprice()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.gasprice()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.gasprice()
  %v2 = call i256 @llvm.evm.gasprice()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.gasprice()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @blockhash_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @blockhash_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.blockhash(i256 [[ADDR]])
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.blockhash(i256 [[ADDR]])
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.blockhash(i256 %addr)
  %v2 = call i256 @llvm.evm.blockhash(i256 %addr)
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.blockhash(i256 %addr)
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @blobhash_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @blobhash_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.blobhash(i256 [[ADDR]])
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.blobhash(i256 [[ADDR]])
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.blobhash(i256 %addr)
  %v2 = call i256 @llvm.evm.blobhash(i256 %addr)
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.blobhash(i256 %addr)
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @coinbase_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @coinbase_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.coinbase()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.coinbase()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.coinbase()
  %v2 = call i256 @llvm.evm.coinbase()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.coinbase()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @timestamp_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @timestamp_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.timestamp()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.timestamp()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.timestamp()
  %v2 = call i256 @llvm.evm.timestamp()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.timestamp()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @number_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @number_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.number()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.number()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.number()
  %v2 = call i256 @llvm.evm.number()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.number()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @difficulty_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @difficulty_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.difficulty()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.difficulty()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.difficulty()
  %v2 = call i256 @llvm.evm.difficulty()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.difficulty()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @gaslimit_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @gaslimit_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.gaslimit()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.gaslimit()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.gaslimit()
  %v2 = call i256 @llvm.evm.gaslimit()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.gaslimit()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @chainid_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @chainid_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.chainid()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.chainid()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.chainid()
  %v2 = call i256 @llvm.evm.chainid()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.chainid()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @basefee_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @basefee_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.basefee()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.basefee()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.basefee()
  %v2 = call i256 @llvm.evm.basefee()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.basefee()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @blobbasefee_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @blobbasefee_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.blobbasefee()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.blobbasefee()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.blobbasefee()
  %v2 = call i256 @llvm.evm.blobbasefee()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.blobbasefee()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

define i256 @calldatasize() nounwind {
; CHECK-LABEL: define i256 @calldatasize
; CHECK-SAME: () local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.calldatasize()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.calldatasize()
  %res2 = call i256 @llvm.evm.calldatasize()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @calldataload(ptr addrspace(2) %rs1) nounwind {
; CHECK-LABEL: define i256 @calldataload
; CHECK-SAME: (ptr addrspace(2) [[RS1:%.*]]) local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.calldataload(ptr addrspace(2) [[RS1]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.calldataload(ptr addrspace(2) %rs1)
  %res2 = call i256 @llvm.evm.calldataload(ptr addrspace(2) %rs1)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @callvalue() nounwind {
; CHECK-LABEL: define i256 @callvalue
; CHECK-SAME: () local_unnamed_addr #[[ATTR1]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.callvalue()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.callvalue()
  %res2 = call i256 @llvm.evm.callvalue()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @codesize() nounwind {
; CHECK-LABEL: define i256 @codesize
; CHECK-SAME: () local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.codesize()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.codesize()
  %res2 = call i256 @llvm.evm.codesize()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @gasprice() nounwind {
; CHECK-LABEL: define i256 @gasprice
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.gasprice()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.gasprice()
  %res2 = call i256 @llvm.evm.gasprice()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @extcodesize(i256 %rs1) nounwind {
; CHECK-LABEL: define i256 @extcodesize
; CHECK-SAME: (i256 [[RS1:%.*]]) local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.extcodesize(i256 [[RS1]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.extcodesize(i256 %rs1)
  %res2 = call i256 @llvm.evm.extcodesize(i256 %rs1)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @extcodesize_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @extcodesize_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.extcodesize(i256 [[ADDR]])
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.extcodesize(i256 [[ADDR]])
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.extcodesize(i256 %addr)
  %v2 = call i256 @llvm.evm.extcodesize(i256 %addr)
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.extcodesize(i256 %addr)
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

define i256 @extcodehash(i256 %rs1) nounwind {
; CHECK-LABEL: define i256 @extcodehash
; CHECK-SAME: (i256 [[RS1:%.*]]) local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.extcodehash(i256 [[RS1]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.extcodehash(i256 %rs1)
  %res2 = call i256 @llvm.evm.extcodehash(i256 %rs1)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @extcodehash_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @extcodehash_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.extcodehash(i256 [[ADDR]])
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.extcodehash(i256 [[ADDR]])
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.extcodehash(i256 %addr)
  %v2 = call i256 @llvm.evm.extcodehash(i256 %addr)
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.extcodehash(i256 %addr)
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @extcodecopy_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @extcodecopy_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    tail call void @llvm.evm.extcodecopy(i256 [[ADDR]], ptr addrspace(1) null, ptr addrspace(4) null, i256 32)
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.extcodehash(i256 [[ADDR]])
; CHECK-NEXT:    tail call void @llvm.evm.extcodecopy(i256 [[ADDR]], ptr addrspace(1) null, ptr addrspace(4) null, i256 32)
; CHECK-NEXT:    [[V2:%.*]] = tail call i256 @llvm.evm.extcodehash(i256 [[ADDR]])
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.extcodehash(i256 [[ADDR]])
; CHECK-NEXT:    [[TMP:%.*]] = add i256 [[V2]], [[V1]]
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[TMP]], [[V3]]
; CHECK-NEXT:    tail call void @llvm.evm.extcodecopy(i256 [[ADDR]], ptr addrspace(1) null, ptr addrspace(4) null, i256 32)
; CHECK-NEXT:    ret i256 [[RET]]
;
  call void @llvm.evm.extcodecopy(i256 %addr, ptr addrspace(1) null, ptr addrspace(4) null, i256 32)
  %v1 = call i256 @llvm.evm.extcodehash(i256 %addr)
  call void @llvm.evm.extcodecopy(i256 %addr, ptr addrspace(1) null, ptr addrspace(4) null, i256 32)
  %v2 = call i256 @llvm.evm.extcodehash(i256 %addr)
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.extcodehash(i256 %addr)
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  call void @llvm.evm.extcodecopy(i256 %addr, ptr addrspace(1) null, ptr addrspace(4) null, i256 32)
  ret i256 %ret
}

define i256 @returndatasize() nounwind {
; CHECK-LABEL: define i256 @returndatasize
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.returndatasize()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.returndatasize()
  %res2 = call i256 @llvm.evm.returndatasize()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @blockhash(i256 %rs1) nounwind {
; CHECK-LABEL: define i256 @blockhash
; CHECK-SAME: (i256 [[RS1:%.*]]) local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.blockhash(i256 [[RS1]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.blockhash(i256 %rs1)
  %res2 = call i256 @llvm.evm.blockhash(i256 %rs1)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @blobhash(i256 %rs1) nounwind {
; CHECK-LABEL: define i256 @blobhash
; CHECK-SAME: (i256 [[RS1:%.*]]) local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.blobhash(i256 [[RS1]])
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.blobhash(i256 %rs1)
  %res2 = call i256 @llvm.evm.blobhash(i256 %rs1)
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @coinbase() nounwind {
; CHECK-LABEL: define i256 @coinbase
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.coinbase()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.coinbase()
  %res2 = call i256 @llvm.evm.coinbase()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @timestamp() nounwind {
; CHECK-LABEL: define i256 @timestamp
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.timestamp()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.timestamp()
  %res2 = call i256 @llvm.evm.timestamp()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @number() nounwind {
; CHECK-LABEL: define i256 @number
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.number()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.number()
  %res2 = call i256 @llvm.evm.number()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @difficulty() nounwind {
; CHECK-LABEL: define i256 @difficulty
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.difficulty()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.difficulty()
  %res2 = call i256 @llvm.evm.difficulty()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @gaslimit() nounwind {
; CHECK-LABEL: define i256 @gaslimit
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.gaslimit()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.gaslimit()
  %res2 = call i256 @llvm.evm.gaslimit()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @chainid() nounwind {
; CHECK-LABEL: define i256 @chainid
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.chainid()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.chainid()
  %res2 = call i256 @llvm.evm.chainid()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @selfbalance() nounwind {
; CHECK-LABEL: define i256 @selfbalance
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.selfbalance()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.selfbalance()
  %res2 = call i256 @llvm.evm.selfbalance()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

; Check that the %v2 gets CSEed, but %v3 is not because of the @llvm.evm.call call.
define i256 @selfbalance_call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %roff, i256 %rsize) nounwind {
; CHECK-LABEL: define i256 @selfbalance_call
; CHECK-SAME: (i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) nocapture writeonly [[ROFF:%.*]], i256 [[RSIZE:%.*]]) local_unnamed_addr #[[ATTR6]] {
; CHECK-NEXT:    [[V1:%.*]] = tail call i256 @llvm.evm.selfbalance()
; CHECK-NEXT:    [[UNUSED:%.*]] = tail call i256 @llvm.evm.call(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) nonnull inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) [[ROFF]], i256 [[RSIZE]])
; CHECK-NEXT:    [[V3:%.*]] = tail call i256 @llvm.evm.selfbalance()
; CHECK-NEXT:    [[TMP:%.*]] = shl i256 [[V1]], 1
; CHECK-NEXT:    [[RET:%.*]] = add i256 [[V3]], [[TMP]]
; CHECK-NEXT:    ret i256 [[RET]]
;
  %v1 = call i256 @llvm.evm.selfbalance()
  %v2 = call i256 @llvm.evm.selfbalance()
  %unused = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) inttoptr (i256 256 to ptr addrspace(1)), i256 32, ptr addrspace(1) %roff, i256 %rsize)
  %v3 = call i256 @llvm.evm.selfbalance()
  %tmp = add i256 %v1, %v2
  %ret = add i256 %tmp, %v3
  ret i256 %ret
}

define i256 @basefee() nounwind {
; CHECK-LABEL: define i256 @basefee
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.basefee()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.basefee()
  %res2 = call i256 @llvm.evm.basefee()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define i256 @blobbasefee() nounwind {
; CHECK-LABEL: define i256 @blobbasefee
; CHECK-SAME: () local_unnamed_addr #[[ATTR5]] {
; CHECK-NEXT:    [[RES1:%.*]] = tail call i256 @llvm.evm.blobbasefee()
; CHECK-NEXT:    [[RET:%.*]] = shl i256 [[RES1]], 1
; CHECK-NEXT:    ret i256 [[RET]]
;
  %res1 = call i256 @llvm.evm.blobbasefee()
  %res2 = call i256 @llvm.evm.blobbasefee()
  %ret = add i256 %res1, %res2
  ret i256 %ret
}

define void @log0(ptr addrspace(1) %off, i256 %size) nounwind {
; CHECK-LABEL: define void @log0
; CHECK-SAME: (ptr addrspace(1) nocapture readonly [[OFF:%.*]], i256 [[SIZE:%.*]]) local_unnamed_addr #[[ATTR7:[0-9]+]] {
; CHECK-NEXT:    tail call void @llvm.evm.log0(ptr addrspace(1) [[OFF]], i256 [[SIZE]])
; CHECK-NEXT:    tail call void @llvm.evm.log0(ptr addrspace(1) [[OFF]], i256 [[SIZE]])
; CHECK-NEXT:    ret void
;
  call void @llvm.evm.log0(ptr addrspace(1) %off, i256 %size)
  call void @llvm.evm.log0(ptr addrspace(1) %off, i256 %size)
  ret void
}

define void @log1(ptr addrspace(1) %off, i256 %size, i256 %t1) nounwind {
; CHECK-LABEL: define void @log1
; CHECK-SAME: (ptr addrspace(1) nocapture readonly [[OFF:%.*]], i256 [[SIZE:%.*]], i256 [[T1:%.*]]) local_unnamed_addr #[[ATTR7]] {
; CHECK-NEXT:    tail call void @llvm.evm.log1(ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[T1]])
; CHECK-NEXT:    tail call void @llvm.evm.log1(ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[T1]])
; CHECK-NEXT:    ret void
;
  call void @llvm.evm.log1(ptr addrspace(1) %off, i256 %size, i256 %t1)
  call void @llvm.evm.log1(ptr addrspace(1) %off, i256 %size, i256 %t1)
  ret void
}

define void @log2(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2) nounwind {
; CHECK-LABEL: define void @log2
; CHECK-SAME: (ptr addrspace(1) nocapture readonly [[OFF:%.*]], i256 [[SIZE:%.*]], i256 [[T1:%.*]], i256 [[T2:%.*]]) local_unnamed_addr #[[ATTR7]] {
; CHECK-NEXT:    tail call void @llvm.evm.log2(ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[T1]], i256 [[T2]])
; CHECK-NEXT:    tail call void @llvm.evm.log2(ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[T1]], i256 [[T2]])
; CHECK-NEXT:    ret void
;
  call void @llvm.evm.log2(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2)
  call void @llvm.evm.log2(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2)
  ret void
}

define void @log3(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3) nounwind {
; CHECK-LABEL: define void @log3
; CHECK-SAME: (ptr addrspace(1) nocapture readonly [[OFF:%.*]], i256 [[SIZE:%.*]], i256 [[T1:%.*]], i256 [[T2:%.*]], i256 [[T3:%.*]]) local_unnamed_addr #[[ATTR7]] {
; CHECK-NEXT:    tail call void @llvm.evm.log3(ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[T1]], i256 [[T2]], i256 [[T3]])
; CHECK-NEXT:    tail call void @llvm.evm.log3(ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[T1]], i256 [[T2]], i256 [[T3]])
; CHECK-NEXT:    ret void
;
  call void @llvm.evm.log3(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3)
  call void @llvm.evm.log3(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3)
  ret void
}

define void @log4(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3, i256 %t4) nounwind {
; CHECK-LABEL: define void @log4
; CHECK-SAME: (ptr addrspace(1) nocapture readonly [[OFF:%.*]], i256 [[SIZE:%.*]], i256 [[T1:%.*]], i256 [[T2:%.*]], i256 [[T3:%.*]], i256 [[T4:%.*]]) local_unnamed_addr #[[ATTR7]] {
; CHECK-NEXT:    tail call void @llvm.evm.log4(ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[T1]], i256 [[T2]], i256 [[T3]], i256 [[T4]])
; CHECK-NEXT:    tail call void @llvm.evm.log4(ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[T1]], i256 [[T2]], i256 [[T3]], i256 [[T4]])
; CHECK-NEXT:    ret void
;
  call void @llvm.evm.log4(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3, i256 %t4)
  call void @llvm.evm.log4(ptr addrspace(1) %off, i256 %size, i256 %t1, i256 %t2, i256 %t3, i256 %t4)
  ret void
}

declare i256 @llvm.evm.addmod(i256, i256, i256)
declare i256 @llvm.evm.mulmod(i256, i256, i256)
declare i256 @llvm.evm.exp(i256, i256)
declare i256 @llvm.evm.sha3(ptr addrspace(1), i256)
declare i256 @llvm.evm.signextend(i256, i256)
declare i256 @llvm.evm.byte(i256, i256)
declare i256 @llvm.evm.pc()
declare i256 @llvm.evm.gas()
declare i256 @llvm.evm.msize()
declare i256 @llvm.evm.address()
declare i256 @llvm.evm.origin()
declare i256 @llvm.evm.caller()
declare i256 @llvm.evm.balance(i256)
declare i256 @llvm.evm.calldatasize()
declare i256 @llvm.evm.calldataload(ptr addrspace(2))
declare i256 @llvm.evm.callvalue()
declare i256 @llvm.evm.codesize()
declare i256 @llvm.evm.gasprice()
declare i256 @llvm.evm.extcodesize(i256)
declare i256 @llvm.evm.extcodehash(i256)
declare void @llvm.evm.extcodecopy(i256, ptr addrspace(1), ptr addrspace(4), i256)
declare i256 @llvm.evm.blockhash(i256)
declare i256 @llvm.evm.blobhash(i256)
declare i256 @llvm.evm.returndatasize()
declare i256 @llvm.evm.coinbase()
declare i256 @llvm.evm.timestamp()
declare i256 @llvm.evm.number()
declare i256 @llvm.evm.difficulty()
declare i256 @llvm.evm.gaslimit()
declare i256 @llvm.evm.chainid()
declare i256 @llvm.evm.selfbalance()
declare i256 @llvm.evm.basefee()
declare i256 @llvm.evm.blobbasefee()
declare void @llvm.evm.log0(ptr addrspace(1), i256)
declare void @llvm.evm.log1(ptr addrspace(1), i256, i256)
declare void @llvm.evm.log2(ptr addrspace(1), i256, i256, i256)
declare void @llvm.evm.log3(ptr addrspace(1), i256, i256, i256, i256)
declare void @llvm.evm.log4(ptr addrspace(1), i256, i256, i256, i256, i256)
declare i256 @llvm.evm.call(i256, i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
