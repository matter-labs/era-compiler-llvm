; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

declare i256 @bar()

define i256 @test1(i256 %arg) {
; CHECK-LABEL: test1:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 10
; CHECK-NEXT:    EQ
; CHECK-NEXT:    PUSH4 @.BB0_2
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.1:
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB0_2: ; %bb1
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH4 @.FUNC_RET0
; CHECK-NEXT:    PUSH4 @bar
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .FUNC_RET0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
entry:
  %cmp = icmp eq i256 %arg, 10
  br i1 %cmp, label %bb1, label %bb2

bb1:
  %call = tail call i256 @bar()
  br label %bb2

bb2:
  %phi = phi i256 [ %call, %bb1 ], [ 0, %entry ]
  ret i256 %phi
}

define i256 @test2(i256 %arg) {
; CHECK-LABEL: test2:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 10
; CHECK-NEXT:    EQ
; CHECK-NEXT:    PUSH4 @.BB1_2
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.1:
; CHECK-NEXT:    ADDRESS
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB1_2: ; %bb1
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH4 @.FUNC_RET1
; CHECK-NEXT:    PUSH4 @bar
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .FUNC_RET1:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
entry:
  %address = call i256 @llvm.evm.address()
  %cmp = icmp eq i256 %arg, 10
  br i1 %cmp, label %bb1, label %bb2

bb1:
  %call = tail call i256 @bar()
  br label %bb2

bb2:
  %phi = phi i256 [ %call, %bb1 ], [ %address, %entry ]
  ret i256 %phi
}

declare i256 @llvm.evm.address()
