; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -stop-after=finalize-isel < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

; select C, X, 0 -> X * C
define i256 @sel_x_or_0(i1 %cond, i256 %x) {
  ; CHECK-LABEL: name: sel_x_or_0
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL
  ; CHECK-NEXT:  RET killed [[MUL]]
%val = select i1 %cond, i256 %x, i256 0
ret i256 %val
}

; select C, 0, Y -> not C * Y
define i256 @sel_0_or_y(i1 %cond, i256 %y) {
  ; CHECK-LABEL: name: sel_0_or_y
  ; CHECK:       [[ISZERO:%[0-9]+]]:gpr = ISZERO
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL killed [[ISZERO]], killed {{.*}}
  ; CHECK-NEXT:  RET killed [[MUL]], implicit-def dead $arguments
%val = select i1 %cond, i256 0, i256 %y
ret i256 %val
}

; select C, X, 1 -> C * X + not C
define i256 @sel_x_or_1(i1 %cond, i256 %x) {
  ; CHECK-LABEL: name: sel_x_or_1
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, [[COND:%[0-9]+]]
  ; CHECK-NEXT:  [[ISZERO:%[0-9]+]]:gpr = ISZERO [[COND]]
  ; CHECK-NEXT:  [[ADD:%[0-9]+]]:gpr = ADD killed [[ISZERO]], killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[ADD]]
%val = select i1 %cond, i256 %x, i256 1
ret i256 %val
}

; select C, 1, Y -> C + not C * Y
define i256 @sel_1_or_y(i1 %cond, i256 %y) {
  ; CHECK-LABEL: name: sel_1_or_y
  ; CHECK:       [[ISZERO:%[0-9]+]]:gpr = ISZERO [[COND:%[0-9]+]]
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed [[ISZERO]]
  ; CHECK-NEXT:  [[ADD:%[0-9]+]]:gpr = ADD [[COND]], killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[ADD]]
%val = select i1 %cond, i256 1, i256 %y
ret i256 %val
}

; select C, X, -1 -> (C - 1) | X*
define i256 @sel_x_or_m1(i1 %cond, i256 %x) {
  ; CHECK-LABEL: name: sel_x_or_m1
  ; CHECK:       [[CONST_1:%[0-9]+]]:gpr = CONST_I256 i256 1
  ; CHECK-NEXT:  [[AND:%[0-9]+]]:gpr = AND {{.*}}, [[CONST_1]]
  ; CHECK-NEXT:  [[SUB:%[0-9]+]]:gpr = SUB killed [[AND]], [[CONST_1]]
  ; CHECK-NEXT:  [[X:%[0-9]+]]:gpr = COPY killed {{.*}}
  ; CHECK-NEXT:  [[OR:%[0-9]+]]:gpr = OR killed [[SUB]], killed [[X]]
  ; CHECK-NEXT:  RET killed [[OR]]
  %val = select i1 %cond, i256 %x, i256 -1
  ret i256 %val
}

; select C, -1, Y -> -C | Y*
define i256 @sel_m1_or_y(i1 %cond, i256 %y) {
  ; CHECK-LABEL: name: sel_m1_or_y
  ; CHECK:       [[CONST_1:%[0-9]+]]:gpr = CONST_I256 i256 1
  ; CHECK-NEXT:  [[AND:%[0-9]+]]:gpr = AND {{.*}}, killed [[CONST_1]]       
  ; CHECK-NEXT:  [[CONST_0:%[0-9]+]]:gpr = CONST_I256 i256 0
  ; CHECK-NEXT:  [[SUB:%[0-9]+]]:gpr = SUB killed [[CONST_0]], killed [[AND]]
  ; CHECK-NEXT:  [[Y:%[0-9]+]]:gpr = COPY killed {{.*}}
  ; CHECK-NEXT:  [[OR:%[0-9]+]]:gpr = OR killed [[SUB]], killed [[Y]]
  ; CHECK-NEXT:  RET killed [[OR]]
  %val = select i1 %cond, i256 -1, i256 %y
  ret i256 %val
}

; select C, (xor Y, X), Y -> xor Y, (select C, X, 0) -> xor Y, X * C
define i256 @select_xor(i256 %A, i256 %B, i1 %cond) {
  ; CHECK-LABEL: name: select_xor
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; CHECK-NEXT:  [[XOR:%[0-9]+]]:gpr = XOR {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[XOR]]
 %c = xor i256 %B, %A
 %2 = select i1 %cond, i256 %c, i256 %B
 ret i256 %2
}

; select C, Y, (xor Y, X) -> xor Y, (select not C, X, 0) -> xor Y, X * not C
define i256 @select_xor_swapped(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_xor_swapped
  ; CHECK:       [[NOTC:%[0-9]+]]:gpr = ISZERO killed {{.*}}
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL killed [[NOTC]], killed {{.*}}
  ; CHECK-NEXT:  [[XOR:%[0-9]+]]:gpr = XOR {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[XOR]]
  %c = xor i256 %A, %B
  %res = select i1 %cond, i256 %B, i256 %c
  ret i256 %res
}

; commutability check
define i256 @select_xor_2(i256 %A, i256 %B, i1 %cond) {
  ; CHECK-LABEL: name: select_xor_2
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; CHECK-NEXT:  [[XOR:%[0-9]+]]:gpr = XOR {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[XOR]]
 %c = xor i256 %B, %A
 %2 = select i1 %cond, i256 %c, i256 %A
 ret i256 %2
}

; select C, (or Y, X), Y -> or Y, (select C, X, 0) -> or Y, X * C
define i256 @select_or(i256 %A, i256 %B, i1 %cond) {
  ; CHECK-LABEL: name: select_or
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; CHECK-NEXT:  [[OR:%[0-9]+]]:gpr = OR {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[OR]]
 %c = or i256 %B, %A
 %2 = select i1 %cond, i256 %c, i256 %B
 ret i256 %2
}

; select C, Y, (or Y, X) -> or Y, (select not C, X, 0) -> or Y, X * not C
define i256 @select_or_swapped(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_or_swapped
  ; CHECK:       [[NOTC:%[0-9]+]]:gpr = ISZERO killed {{.*}}
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL killed [[NOTC]], killed {{.*}}
  ; CHECK-NEXT:  [[OR:%[0-9]+]]:gpr = OR {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[OR]]
  %c = or i256 %A, %B
  %res = select i1 %cond, i256 %B, i256 %c
  ret i256 %res
}

; commutability check
define i256 @select_or_2(i256 %A, i256 %B, i1 %cond) {
  ; CHECK-LABEL: name: select_or_2
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; CHECK-NEXT:  [[OR:%[0-9]+]]:gpr = OR {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[OR]]
 %c = or i256 %B, %A
 %2 = select i1 %cond, i256 %c, i256 %A
 ret i256 %2
}

; select C, (add Y, X), Y -> add Y, (select C, X, 0) -> add Y, X * C
define i256 @select_add(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_add
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; CHECK-NEXT:  [[ADD:%[0-9]+]]:gpr = ADD {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[ADD]]
  %c = add i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %A
  ret i256 %res
}

; select C, Y, (add Y, X) -> add Y, (select not C, X, 0) -> add Y, X * not C
define i256 @select_add_swapped(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_add_swapped
  ; CHECK:       [[NOTC:%[0-9]+]]:gpr = ISZERO killed {{.*}}
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL killed [[NOTC]], killed {{.*}}
  ; CHECK-NEXT:  [[ADD:%[0-9]+]]:gpr = ADD {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[ADD]]
  %c = add i256 %A, %B
  %res = select i1 %cond, i256 %A, i256 %c
  ret i256 %res
}

; commutability check
define i256 @select_add_2(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_add_2
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; CHECK-NEXT:  [[ADD:%[0-9]+]]:gpr = ADD {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[ADD]]
  %c = add i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %B
  ret i256 %res
}

; select C, (sub Y, X), Y -> sub Y, (select C, X, 0) -> sub Y, X * C
define i256 @select_sub(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_sub
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; CHECK-NEXT:  [[SUB:%[0-9]+]]:gpr = SUB {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[SUB]]
  %c = sub i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %A
  ret i256 %res
}

; select C, Y, (sub Y, X) -> sub Y, (select not C, X, 0) -> sub Y, X * not C
define i256 @select_sub_swapped(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_sub
  ; CHECK:       [[NOTC:%[0-9]+]]:gpr = ISZERO killed {{.*}}
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL killed [[NOTC]], killed {{.*}}
  ; CHECK-NEXT:  [[SUB:%[0-9]+]]:gpr = SUB {{.*}}, killed [[MUL]]
  ; CHECK-NEXT:  RET killed [[SUB]]
  %c = sub i256 %A, %B
  %res = select i1 %cond, i256 %A, i256 %c
  ret i256 %res
}

; not commutative - normal select expansion
define i256 @select_sub_2(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_sub_2
  ; CHECK-NOT:   MUL
  ; CHECK:       JUMPI
  %c = sub i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %B
  ret i256 %res
}

; negative - select(and) expands normally
define i256 @select_and(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_and
  ; CHECK-NOT:   MUL
  ; CHECK:       JUMPI
  %c = and i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %B
  ret i256 %res
}

; negative - select(and) expands normally
define i256 @select_and_2(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_and_2
  ; CHECK-NOT:   MUL
  ; CHECK:       JUMPI
  %c = and i256 %A, %B
  %res = select i1 %cond, i256 %A, i256 %c
  ret i256 %res
}

; select C, (shl Y, X), Y -> shl Y, (select C, X, 0) -> shl Y, X * C
define i256 @select_shl(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_shl
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; SHL shift, val
  ; CHECK-NEXT:  [[SHL:%[0-9]+]]:gpr = SHL killed [[MUL]], {{.*}}
  ; CHECK-NEXT:  RET killed [[SHL]]
  %c = shl i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %A
  ret i256 %res
}

; select C, Y, (shl Y, X) -> shl Y, (select not C, X, 0)
define i256 @select_shl_swapped(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_shl_swapped
  ; CHECK:       [[NOTC:%[0-9]+]]:gpr = ISZERO killed {{.*}}
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL killed [[NOTC]], killed {{.*}}
  ; SHR shift, val
  ; CHECK-NEXT:  [[SHL:%[0-9]+]]:gpr = SHL killed [[MUL]], {{.*}}
  ; CHECK-NEXT:  RET killed [[SHL]]
  %c = shl i256 %A, %B
  %res = select i1 %cond, i256 %A, i256 %c
  ret i256 %res
}

; not commutative - normal select expansion
define i256 @select_shl_2(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_shl_2
  ; CHECK-NOT:   MUL
  ; CHECK:       JUMPI
  %c = shl i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %B
  ret i256 %res
}

; select C, (ashr Y, X), Y -> ashr Y, (select C, X, 0) -> ashr Y, X * C
define i256 @select_ashr(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_ashr
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; SAR shift, val
  ; CHECK-NEXT:  [[SAR:%[0-9]+]]:gpr = SAR killed [[MUL]], {{.*}}
  ; CHECK-NEXT:  RET killed [[SAR]]
  %c = ashr i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %A
  ret i256 %res
}

; select C, Y, (ashr Y, X) -> ashr Y, (select not C, X, 0)
define i256 @select_ashr_swapped(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_ashr_swapped
  ; CHECK:       [[NOTC:%[0-9]+]]:gpr = ISZERO killed {{.*}}
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL killed [[NOTC]], killed {{.*}}
  ; SHR shift, val
  ; CHECK-NEXT:  [[SAR:%[0-9]+]]:gpr = SAR killed [[MUL]], {{.*}}
  ; CHECK-NEXT:  RET killed [[SAR]]
  %c = ashr i256 %A, %B
  %res = select i1 %cond, i256 %A, i256 %c
  ret i256 %res
}

; not commutative - normal select expansion
define i256 @select_ashr_2(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_ashr_2
  ; CHECK-NOT:   MUL
  ; CHECK:       JUMPI
  %c = ashr i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %B
  ret i256 %res
}

; select C, (lshr Y, X), Y -> shl Y, (select C, X, 0)
define i256 @select_lshr(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_lshr
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL {{.*}}, killed {{.*}}
  ; SHR shift, val
  ; CHECK-NEXT:  [[SHR:%[0-9]+]]:gpr = SHR killed [[MUL]], {{.*}}
  ; CHECK-NEXT:  RET killed [[SHR]]
  %c = lshr i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %A
  ret i256 %res
}

; select C, Y, (lshr Y, X) -> lshr Y, (select not C, X, 0)
define i256 @select_lshr_swapped(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_lshr_swapped
  ; CHECK:       [[NOTC:%[0-9]+]]:gpr = ISZERO killed {{.*}}
  ; CHECK:       [[MUL:%[0-9]+]]:gpr = MUL killed [[NOTC]], killed {{.*}}
  ; SHR shift, val
  ; CHECK-NEXT:  [[SHR:%[0-9]+]]:gpr = SHR killed [[MUL]], {{.*}}
  ; CHECK-NEXT:  RET killed [[SHR]]
  %c = lshr i256 %A, %B
  %res = select i1 %cond, i256 %A, i256 %c
  ret i256 %res
}

; not commutative - normal select expansion
define i256 @select_lshr_2(i1 %cond, i256 %A, i256 %B) {
  ; CHECK-LABEL: name: select_lshr_2
  ; CHECK-NOT:   MUL
  ; CHECK:       JUMPI
  %c = lshr i256 %A, %B
  %res = select i1 %cond, i256 %c, i256 %B
  ret i256 %res
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
