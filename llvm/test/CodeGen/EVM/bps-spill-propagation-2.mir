# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# REQUIRES: asserts
# RUN: llc -x mir -run-pass=evm-backward-propagation-stackification -evm-force-reg-spills=9 < %s | FileCheck %s

# Test that when spilling %9:gpr, we are not doing DUP1 before and
# POP after spill, since %9:gpr is not used anymore in these MBBs.

--- |
  source_filename = "test_rename.ll"
  target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
  target triple = "evm"

  define dso_local i256 @test(i256 noundef %arg) local_unnamed_addr {
  bb:
    %icmp = icmp sgt i256 %arg, 0
    %add = add nuw nsw i256 %arg, 10
    br i1 %icmp, label %bb2, label %bb1

  bb1:                                              ; preds = %bb
    br label %bb2

  bb2:                                              ; preds = %bb1, %bb
    %phi = phi i256 [ 10, %bb1 ], [ %add, %bb ]
    %ret = add nuw nsw i256 %phi, 5
    ret i256 %ret
  }

...
---
name:            test
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gpr, preferred-register: '' }
  - { id: 1, class: gpr, preferred-register: '' }
  - { id: 2, class: gpr, preferred-register: '' }
  - { id: 3, class: gpr, preferred-register: '' }
  - { id: 4, class: gpr, preferred-register: '' }
  - { id: 5, class: gpr, preferred-register: '' }
  - { id: 6, class: gpr, preferred-register: '' }
  - { id: 7, class: gpr, preferred-register: '' }
  - { id: 8, class: gpr, preferred-register: '' }
  - { id: 9, class: gpr, preferred-register: '' }
  - { id: 10, class: gpr, preferred-register: '' }
liveins:
  - { reg: '$arguments', virtual-reg: '' }
  - { reg: '$value_stack', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 0
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  isStackified:    false
  numberOfParameters: 1
  hasPushDeployAddress: false
body:             |
  ; CHECK-LABEL: name: test
  ; CHECK: bb.0.bb:
  ; CHECK-NEXT:   successors: %bb.2(0x50000000), %bb.1(0x30000000)
  ; CHECK-NEXT:   liveins: $arguments, $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH1_S i256 10
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MSTORE_S
  ; CHECK-NEXT:   PUSH0_S
  ; CHECK-NEXT:   DUP2_S
  ; CHECK-NEXT:   GT_S
  ; CHECK-NEXT:   PseudoJUMPI %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   POP_S
  ; CHECK-NEXT:   PseudoJUMP %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH1_S i256 10
  ; CHECK-NEXT:   ADD_S
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MSTORE_S
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.bb2:
  ; CHECK-NEXT:   liveins: $value_stack
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   PUSH1_S i256 5
  ; CHECK-NEXT:   PUSH_FRAME %stack.0
  ; CHECK-NEXT:   MLOAD_S
  ; CHECK-NEXT:   ADD_S
  ; CHECK-NEXT:   SWAP1_S
  ; CHECK-NEXT:   PseudoRET
  bb.0.bb:
    successors: %bb.1(0x50000000), %bb.3(0x30000000)
    liveins: $arguments, $value_stack

    %3:gpr = ARGUMENT 0, implicit $arguments
    %9:gpr = CONST_I256 i256 10, implicit-def dead $arguments
    %4:gpr = CONST_I256 i256 0, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %5:gpr = GT %3, %4, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    JUMPI %bb.1, %5, implicit-def $arguments, implicit-def $value_stack, implicit $value_stack

  bb.3:
    successors: %bb.2(0x80000000)
    liveins: $value_stack

    JUMP %bb.2, implicit-def $arguments

  bb.1:
    successors: %bb.2(0x80000000)
    liveins: $value_stack

    %10:gpr = CONST_I256 i256 10, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %9:gpr = nuw nsw ADD %3, %10, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack

  bb.2.bb2:
    liveins: $value_stack

    %7:gpr = CONST_I256 i256 5, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    %8:gpr = nuw nsw ADD %9, %7, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack
    RET %8, implicit-def dead $arguments, implicit-def $value_stack, implicit $value_stack

...
