; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -p=evm-sys-intrinsics-promotion < %s -S - | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i256 @create(i256 %val, ptr addrspace(1) %off, i256 %size) nounwind {
; CHECK-LABEL: define i256 @create(
; CHECK-SAME: i256 [[VAL:%.*]], ptr addrspace(1) [[OFF:%.*]], i256 [[SIZE:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[RET:%.*]] = call i256 @llvm.evm.create.sptr(i256 [[VAL]], ptr addrspace(1) [[OFF]], i256 [[SIZE]], ptr addrspace(5) null, ptr addrspace(6) null)
; CHECK-NEXT:    ret i256 [[RET]]
;
  %ret = call i256 @llvm.evm.create(i256 %val, ptr addrspace(1) %off, i256 %size)
  ret i256 %ret
}

define i256 @call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size) nounwind {
; CHECK-LABEL: define i256 @call(
; CHECK-SAME: i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) [[ARG_OFF:%.*]], i256 [[ARG_SIZE:%.*]], ptr addrspace(1) [[RET_OFF:%.*]], i256 [[RET_SIZE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = call i256 @llvm.evm.call.sptr(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) [[ARG_OFF]], i256 [[ARG_SIZE]], ptr addrspace(1) [[RET_OFF]], i256 [[RET_SIZE]], ptr addrspace(5) null, ptr addrspace(6) null)
; CHECK-NEXT:    ret i256 [[RET]]
;
  %ret = call i256 @llvm.evm.call(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size)
  ret i256 %ret
}

define i256 @callcode(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size) nounwind {
; CHECK-LABEL: define i256 @callcode(
; CHECK-SAME: i256 [[GAS:%.*]], i256 [[ADDR:%.*]], i256 [[VAL:%.*]], ptr addrspace(1) [[ARG_OFF:%.*]], i256 [[ARG_SIZE:%.*]], ptr addrspace(1) [[RET_OFF:%.*]], i256 [[RET_SIZE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = call i256 @llvm.evm.callcode.sptr(i256 [[GAS]], i256 [[ADDR]], i256 [[VAL]], ptr addrspace(1) [[ARG_OFF]], i256 [[ARG_SIZE]], ptr addrspace(1) [[RET_OFF]], i256 [[RET_SIZE]], ptr addrspace(5) null, ptr addrspace(6) null)
; CHECK-NEXT:    ret i256 [[RET]]
;
  %ret = call i256 @llvm.evm.callcode(i256 %gas, i256 %addr, i256 %val, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size)
  ret i256 %ret
}

define i256 @delegatecall(i256 %gas, i256 %addr, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size) nounwind {
; CHECK-LABEL: define i256 @delegatecall(
; CHECK-SAME: i256 [[GAS:%.*]], i256 [[ADDR:%.*]], ptr addrspace(1) [[ARG_OFF:%.*]], i256 [[ARG_SIZE:%.*]], ptr addrspace(1) [[RET_OFF:%.*]], i256 [[RET_SIZE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = call i256 @llvm.evm.delegatecall.sptr(i256 [[GAS]], i256 [[ADDR]], ptr addrspace(1) [[ARG_OFF]], i256 [[ARG_SIZE]], ptr addrspace(1) [[RET_OFF]], i256 [[RET_SIZE]], ptr addrspace(5) null, ptr addrspace(6) null)
; CHECK-NEXT:    ret i256 [[RET]]
;
  %ret = call i256 @llvm.evm.delegatecall(i256 %gas, i256 %addr, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace (1) %ret_off, i256 %ret_size)
  ret i256 %ret
}

define i256 @create2(i256 %val, ptr addrspace(1) %off, i256 %size, i256 %salt) nounwind {
; CHECK-LABEL: define i256 @create2(
; CHECK-SAME: i256 [[VAL:%.*]], ptr addrspace(1) [[OFF:%.*]], i256 [[SIZE:%.*]], i256 [[SALT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = call i256 @llvm.evm.create2.sptr(i256 [[VAL]], ptr addrspace(1) [[OFF]], i256 [[SIZE]], i256 [[SALT]], ptr addrspace(5) null, ptr addrspace(6) null)
; CHECK-NEXT:    ret i256 [[RET]]
;
  %ret = call i256 @llvm.evm.create2(i256 %val, ptr addrspace(1) %off, i256 %size, i256 %salt)
  ret i256 %ret
}

define i256 @staticcall(i256 %gas, i256 %addr, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size) nounwind {
; CHECK-LABEL: define i256 @staticcall(
; CHECK-SAME: i256 [[GAS:%.*]], i256 [[ADDR:%.*]], ptr addrspace(1) [[ARG_OFF:%.*]], i256 [[ARG_SIZE:%.*]], ptr addrspace(1) [[RET_OFF:%.*]], i256 [[RET_SIZE:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[RET:%.*]] = call i256 @llvm.evm.staticcall.sptr(i256 [[GAS]], i256 [[ADDR]], ptr addrspace(1) [[ARG_OFF]], i256 [[ARG_SIZE]], ptr addrspace(1) [[RET_OFF]], i256 [[RET_SIZE]], ptr addrspace(5) null, ptr addrspace(6) null)
; CHECK-NEXT:    ret i256 [[RET]]
;
  %ret = call i256 @llvm.evm.staticcall(i256 %gas, i256 %addr, ptr addrspace(1) %arg_off, i256 %arg_size, ptr addrspace(1) %ret_off, i256 %ret_size)
  ret i256 %ret
}

define void @return(ptr addrspace(1) %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: define void @return(
; CHECK-SAME: ptr addrspace(1) [[RS1:%.*]], i256 [[RS2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    call void @llvm.evm.return.sptr(ptr addrspace(1) [[RS1]], i256 [[RS2]], ptr addrspace(5) null, ptr addrspace(6) null)
; CHECK-NEXT:    ret void
;
  call void @llvm.evm.return(ptr addrspace(1) %rs1, i256 %rs2)
  ret void
}

define void @revert(ptr addrspace(1) %rs1, i256 %rs2) nounwind {
; CHECK-LABEL: define void @revert(
; CHECK-SAME: ptr addrspace(1) [[RS1:%.*]], i256 [[RS2:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    call void @llvm.evm.revert.sptr(ptr addrspace(1) [[RS1]], i256 [[RS2]], ptr addrspace(5) null, ptr addrspace(6) null)
; CHECK-NEXT:    ret void
;
  call void @llvm.evm.revert(ptr addrspace(1) %rs1, i256 %rs2)
  ret void
}

declare i256 @llvm.evm.create(i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.call(i256, i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.callcode(i256, i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.delegatecall(i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare i256 @llvm.evm.create2(i256, ptr addrspace(1), i256, i256)
declare i256 @llvm.evm.staticcall(i256, i256, ptr addrspace(1), i256, ptr addrspace(1), i256)
declare void @llvm.evm.return(ptr addrspace(1), i256)
declare void @llvm.evm.revert(ptr addrspace(1), i256)
