; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s | FileCheck %s

target datalayout = "E-p:256:256-i256:256:256-S256-a:256:256"
target triple = "evm"

define i256 @select_const_int_easy(i1 %a) {
; CHECK-LABEL: select_const_int_easy:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    AND
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = select i1 %a, i256 1, i256 0
  ret i256 %1
}

define i256 @select_const_int_one_away(i1 %a) {
; CHECK-LABEL: select_const_int_one_away:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0x4
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = select i1 %a, i256 3, i256 4
  ret i256 %1
}

define i256 @select_const_int_pow2_zero(i1 %a) {
; CHECK-LABEL: select_const_int_pow2_zero:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    AND
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SHL
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = select i1 %a, i256 4, i256 0
  ret i256 %1
}

define i256 @select_const_int_harder(i1 %a) {
; CHECK-LABEL: select_const_int_harder:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    AND
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH4 @.BB3_2
; CHECK-NEXT:    JUMPI
; CHECK-NEXT:  ; %bb.1:
; CHECK-NEXT:    PUSH1 0x6
; CHECK-NEXT:    PUSH4 @.BB3_3
; CHECK-NEXT:    JUMP
; CHECK-NEXT:  .BB3_2:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x26
; CHECK-NEXT:  .BB3_3:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = select i1 %a, i256 6, i256 38
  ret i256 %1
}

define i256 @select_eq_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_eq_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EQ
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp eq i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_ne_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_ne_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EQ
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp ne i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_sgt_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_sgt_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SGT
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp sgt i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_slt_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_slt_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SLT
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp slt i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_sge_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_sge_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SLT
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp sge i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_sle_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_sle_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    SGT
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp sle i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_ugt_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_ugt_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    GT
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp ugt i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_ult_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_ult_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    LT
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp ult i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_uge_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_uge_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    LT
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp uge i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_ule_zero_negone(i256 %a, i256 %b) {
; CHECK-LABEL: select_ule_zero_negone:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    GT
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH0
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp ule i256 %a, %b
  %2 = select i1 %1, i256 -1, i256 0
  ret i256 %2
}

define i256 @select_eq_1_2(i256 %a, i256 %b) {
; CHECK-LABEL: select_eq_1_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EQ
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp eq i256 %a, %b
  %2 = select i1 %1, i256 1, i256 2
  ret i256 %2
}

define i256 @select_ne_1_2(i256 %a, i256 %b) {
; CHECK-LABEL: select_ne_1_2:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EQ
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH1 0x2
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp ne i256 %a, %b
  %2 = select i1 %1, i256 1, i256 2
  ret i256 %2
}

define i256 @select_eq_2_1(i256 %a, i256 %b) {
; CHECK-LABEL: select_eq_2_1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    EQ
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp eq i256 %a, %b
  %2 = select i1 %1, i256 2, i256 1
  ret i256 %2
}

define i256 @select_ne_2_1(i256 %a, i256 %b) {
; CHECK-LABEL: select_ne_2_1:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    PUSH1 0x1
; CHECK-NEXT:    SWAP2
; CHECK-NEXT:    EQ
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    ADD
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp ne i256 %a, %b
  %2 = select i1 %1, i256 2, i256 1
  ret i256 %2
}

define i256 @select_eq_10000_10001(i256 %a, i256 %b) {
; CHECK-LABEL: select_eq_10000_10001:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EQ
; CHECK-NEXT:    PUSH2 0x2712
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp eq i256 %a, %b
  %2 = select i1 %1, i256 10001, i256 10002
  ret i256 %2
}

define i256 @select_ne_10001_10002(i256 %a, i256 %b) {
; CHECK-LABEL: select_ne_10001_10002:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    JUMPDEST
; CHECK-NEXT:    EQ
; CHECK-NEXT:    ISZERO
; CHECK-NEXT:    PUSH2 0x2712
; CHECK-NEXT:    SUB
; CHECK-NEXT:    SWAP1
; CHECK-NEXT:    JUMP
  %1 = icmp ne i256 %a, %b
  %2 = select i1 %1, i256 10001, i256 10002
  ret i256 %2
}
