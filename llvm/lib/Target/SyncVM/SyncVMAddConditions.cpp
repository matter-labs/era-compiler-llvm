//===------ SyncVMAddConditions.cpp - Expand pseudo instructions ----------===//
//
/// \file
/// This file contains a pass that expands pseudo instructions into target
/// instructions. This pass should be run after register allocation but before
/// the post-regalloc scheduling pass.
//
//===----------------------------------------------------------------------===//

#include "SyncVM.h"

#include "llvm/CodeGen/MachineFunctionPass.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/TargetInstrInfo.h"
#include "llvm/Support/Debug.h"

#include "SyncVMSubtarget.h"

using namespace llvm;

#define DEBUG_TYPE "syncvm-addcc"
#define SYNCVM_ADD_CONDITIONALS_NAME "SyncVM add conditionals"

namespace {

class SyncVMAddConditions : public MachineFunctionPass {
public:
  static char ID;
  SyncVMAddConditions() : MachineFunctionPass(ID) {}

  const TargetRegisterInfo *TRI;

  bool runOnMachineFunction(MachineFunction &Fn) override;

  StringRef getPassName() const override {
    return SYNCVM_ADD_CONDITIONALS_NAME;
  }

private:
  const TargetInstrInfo *TII;
  LLVMContext *Context;
};

char SyncVMAddConditions::ID = 0;

} // namespace

INITIALIZE_PASS(SyncVMAddConditions, DEBUG_TYPE, SYNCVM_ADD_CONDITIONALS_NAME,
                false, false)

bool SyncVMAddConditions::runOnMachineFunction(MachineFunction &MF) {
  LLVM_DEBUG(
      dbgs() << "********** SyncVM EXPAND PSEUDO INSTRUCTIONS **********\n"
             << "********** Function: " << MF.getName() << '\n');

  // TODO: The mapping should probably be generated by tablegen
  DenseMap<unsigned, unsigned> Pseudos{
      {SyncVM::ADDrrr_p, SyncVM::ADDrrr_s},
      {SyncVM::ADDirr_p, SyncVM::ADDirr_s},
      {SyncVM::ADDcrr_p, SyncVM::ADDcrr_s},
      {SyncVM::ADDsrr_p, SyncVM::ADDsrr_s},
      {SyncVM::ADDrrs_p, SyncVM::ADDrrs_s},
      {SyncVM::ADDirs_p, SyncVM::ADDirs_s},
      {SyncVM::ADDcrs_p, SyncVM::ADDcrs_s},
      {SyncVM::ADDsrs_p, SyncVM::ADDsrs_s},

      {SyncVM::SUBrrr_p, SyncVM::SUBrrr_s},
      {SyncVM::SUBirr_p, SyncVM::SUBirr_s},
      {SyncVM::SUBcrr_p, SyncVM::SUBcrr_s},
      {SyncVM::SUBsrr_p, SyncVM::SUBsrr_s},
      {SyncVM::SUBrrs_p, SyncVM::SUBrrs_s},
      {SyncVM::SUBirs_p, SyncVM::SUBirs_s},
      {SyncVM::SUBcrs_p, SyncVM::SUBcrs_s},
      {SyncVM::SUBsrs_p, SyncVM::SUBsrs_s},

      {SyncVM::MULrrrr_p, SyncVM::MULrrrr_s},
      {SyncVM::MULirrr_p, SyncVM::MULirrr_s},
      {SyncVM::MULcrrr_p, SyncVM::MULcrrr_s},
      {SyncVM::MULsrrr_p, SyncVM::MULsrrr_s},

      {SyncVM::DIVrrrr_p, SyncVM::DIVrrrr_s},
      {SyncVM::DIVirrr_p, SyncVM::DIVirrr_s},
      {SyncVM::DIVcrrr_p, SyncVM::DIVcrrr_s},
      {SyncVM::DIVsrrr_p, SyncVM::DIVsrrr_s},

      {SyncVM::ANDrrr_p, SyncVM::ANDrrr_s},
      {SyncVM::ANDirr_p, SyncVM::ANDirr_s},
      {SyncVM::ANDcrr_p, SyncVM::ANDcrr_s},
      {SyncVM::ANDsrr_p, SyncVM::ANDsrr_s},
      {SyncVM::ANDrrs_p, SyncVM::ANDrrs_s},
      {SyncVM::ANDirs_p, SyncVM::ANDirs_s},
      {SyncVM::ANDcrs_p, SyncVM::ANDcrs_s},
      {SyncVM::ANDsrs_p, SyncVM::ANDsrs_s},

      {SyncVM::ORrrr_p, SyncVM::ORrrr_s},
      {SyncVM::ORirr_p, SyncVM::ORirr_s},
      {SyncVM::ORcrr_p, SyncVM::ORcrr_s},
      {SyncVM::ORsrr_p, SyncVM::ORsrr_s},
      {SyncVM::ORrrs_p, SyncVM::ORrrs_s},
      {SyncVM::ORirs_p, SyncVM::ORirs_s},
      {SyncVM::ORcrs_p, SyncVM::ORcrs_s},
      {SyncVM::ORsrs_p, SyncVM::ORsrs_s},

      {SyncVM::XORrrr_p, SyncVM::XORrrr_s},
      {SyncVM::XORirr_p, SyncVM::XORirr_s},
      {SyncVM::XORcrr_p, SyncVM::XORcrr_s},
      {SyncVM::XORsrr_p, SyncVM::XORsrr_s},
      {SyncVM::XORrrs_p, SyncVM::XORrrs_s},
      {SyncVM::XORirs_p, SyncVM::XORirs_s},
      {SyncVM::XORcrs_p, SyncVM::XORcrs_s},
      {SyncVM::XORsrs_p, SyncVM::XORsrs_s},

      {SyncVM::SHLrrr_p, SyncVM::SHLrrr_s},
      {SyncVM::SHLirr_p, SyncVM::SHLirr_s},
      {SyncVM::SHLcrr_p, SyncVM::SHLcrr_s},
      {SyncVM::SHLsrr_p, SyncVM::SHLsrr_s},
      {SyncVM::SHLrrs_p, SyncVM::SHLrrs_s},
      {SyncVM::SHLirs_p, SyncVM::SHLirs_s},
      {SyncVM::SHLcrs_p, SyncVM::SHLcrs_s},
      {SyncVM::SHLsrs_p, SyncVM::SHLsrs_s},

      {SyncVM::SHRrrr_p, SyncVM::SHRrrr_s},
      {SyncVM::SHRirr_p, SyncVM::SHRirr_s},
      {SyncVM::SHRcrr_p, SyncVM::SHRcrr_s},
      {SyncVM::SHRsrr_p, SyncVM::SHRsrr_s},
      {SyncVM::SHRrrs_p, SyncVM::SHRrrs_s},
      {SyncVM::SHRirs_p, SyncVM::SHRirs_s},
      {SyncVM::SHRcrs_p, SyncVM::SHRcrs_s},
      {SyncVM::SHRsrs_p, SyncVM::SHRsrs_s},

      {SyncVM::ROLrrr_p, SyncVM::ROLrrr_s},
      {SyncVM::ROLirr_p, SyncVM::ROLirr_s},
      {SyncVM::ROLcrr_p, SyncVM::ROLcrr_s},
      {SyncVM::ROLsrr_p, SyncVM::ROLsrr_s},
      {SyncVM::ROLrrs_p, SyncVM::ROLrrs_s},
      {SyncVM::ROLirs_p, SyncVM::ROLirs_s},
      {SyncVM::ROLcrs_p, SyncVM::ROLcrs_s},
      {SyncVM::ROLsrs_p, SyncVM::ROLsrs_s},

      {SyncVM::RORrrr_p, SyncVM::RORrrr_s},
      {SyncVM::RORirr_p, SyncVM::RORirr_s},
      {SyncVM::RORcrr_p, SyncVM::RORcrr_s},
      {SyncVM::RORsrr_p, SyncVM::RORsrr_s},
      {SyncVM::RORrrs_p, SyncVM::RORrrs_s},
      {SyncVM::RORirs_p, SyncVM::RORirs_s},
      {SyncVM::RORcrs_p, SyncVM::RORcrs_s},
      {SyncVM::RORsrs_p, SyncVM::RORsrs_s},
  };

  bool Changed = false;
  TII = MF.getSubtarget<SyncVMSubtarget>().getInstrInfo();
  assert(TII && "TargetInstrInfo must be a valid object");

  Context = &MF.getFunction().getContext();

  std::vector<MachineInstr *> PseudoInst;
  for (MachineBasicBlock &MBB : MF)
    for (MachineInstr &MI : MBB) {
      if (!Pseudos.count(MI.getOpcode()))
        continue;

      MI.setDesc(TII->get(Pseudos[MI.getOpcode()]));
      MI.addOperand(MachineOperand::CreateImm(0));
      Changed = true;
    }

  return Changed;
}

/// createSyncVMAddConditionsPass - returns an instance of the pseudo
/// instruction expansion pass.
FunctionPass *llvm::createSyncVMAddConditionsPass() {
  return new SyncVMAddConditions();
}
