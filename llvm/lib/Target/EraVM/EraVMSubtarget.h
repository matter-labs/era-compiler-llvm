//===-- EraVMSubtarget.h - EraVM Subtarget Information ----------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the EraVM specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_ERAVM_ERAVMSUBTARGET_H
#define LLVM_LIB_TARGET_ERAVM_ERAVMSUBTARGET_H

#include "EraVMFrameLowering.h"
#include "EraVMISelLowering.h"
#include "EraVMInstrInfo.h"
#include "EraVMRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "EraVMGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class EraVMSubtarget : public EraVMGenSubtargetInfo {
private:
  virtual void anchor();

  EraVMFrameLowering FrameLowering;
  EraVMInstrInfo InstrInfo;
  EraVMTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  EraVMSubtarget(const Triple &TT, const std::string &CPU,
                 const std::string &FS, const TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const EraVMInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const EraVMTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  Align getStackAlignment() const { return Align(32); }
};
} // namespace llvm

#endif // LLVM_LIB_TARGET_ERAVM_ERAVMSUBTARGET_H
