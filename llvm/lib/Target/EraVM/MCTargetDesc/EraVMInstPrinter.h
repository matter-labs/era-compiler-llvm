//===-- EraVMInstPrinter.h - EraVM instr printer ----------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints an EraVM MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_ERAVM_MCTARGETDESC_ERAVMINSTPRINTER_H
#define LLVM_LIB_TARGET_ERAVM_MCTARGETDESC_ERAVMINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"

namespace llvm {
class EraVMInstPrinter : public MCInstPrinter {
public:
  EraVMInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                    const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;

  // Autogenerated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  bool printAliasInstr(const MCInst *MI, uint64_t Address, raw_ostream &O);
  void printCustomAliasOperand(const MCInst *MI, uint64_t Address,
                               unsigned OpIdx, unsigned PrintMethodIdx,
                               raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);

private:
  void printOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O,
                    const char *Modifier = nullptr);
  void printPCRelImmOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printCCOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printContextOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printMemOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printStackOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  void printSPAdvanceOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
  /// Print first flag
  void printFirstOperand(const MCInst *MI, unsigned OpNo, raw_ostream &O);
};
} // namespace llvm

#endif
