//===-- EraVMISelDAGToDAG.cpp - A dag to dag inst selector for EraVM ------===//
//
// This file defines an instruction selector for the EraVM target.
//
//===----------------------------------------------------------------------===//

#include "EraVM.h"
#include "EraVMTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/Config/llvm-config.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "eravm-isel"

namespace {
struct EraVMISelAddressMode {
  enum { RegBase, FrameIndexBase, StackRegBase } BaseType = RegBase;

  struct {
    SDValue Reg;
    int FrameIndex = 0;
  } Base;

  int64_t Disp = 0;
  const GlobalValue *GV = nullptr;

  EraVMISelAddressMode() = default;

#if !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP)
  LLVM_DUMP_METHOD void dump() {
    errs() << "EraVMISelAddressMode " << this << '\n';
    if (Base.Reg.getNode() != nullptr) {
      errs() << "Base.Reg ";
      Base.Reg.getNode()->dump();
    }
    if (BaseType == FrameIndexBase) {
      errs() << " Base.FrameIndex " << Base.FrameIndex << '\n';
    }
    errs() << " Disp " << Disp << '\n';
    if (GV) {
      errs() << "GV ";
      GV->dump();
    }
  }
#endif
};
} // namespace

/// EraVMDAGToDAGISel - EraVM specific code to select EraVM machine
/// instructions for SelectionDAG operations.
///
namespace {
class EraVMDAGToDAGISel : public SelectionDAGISel {
public:
  EraVMDAGToDAGISel(EraVMTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

private:
  StringRef getPassName() const override {
    return "EraVM DAG->DAG Pattern Instruction Selection";
  }

  bool MatchAddress(SDValue N, EraVMISelAddressMode &AM, bool IsStackAddr);
  bool MatchAddressBase(SDValue N, EraVMISelAddressMode &AM, bool IsStackAddr);

  // Include the pieces autogenerated from the target description.
#include "EraVMGenDAGISel.inc"

  // Main method to transform nodes into machine nodes.
  void Select(SDNode *N) override;

  bool SelectMemAddr(SDValue Addr, SDValue &Base, SDValue &Disp);
  bool SelectStackAddr(SDValue Addr, SDValue &Base1, SDValue &Base2,
                       SDValue &Disp);
  bool SelectStackAddrCommon(SDValue Addr, SDValue &Base1, SDValue &Base2,
                             SDValue &Disp, bool IsAdjusted);
};
} // end anonymous namespace

/// MatchAddressBase - Helper for MatchAddress. Add the specified node to the
/// specified addressing mode without any further recursion.
bool EraVMDAGToDAGISel::MatchAddressBase(SDValue N, EraVMISelAddressMode &AM,
                                         bool IsStackAddr) {
  if ((!IsStackAddr && AM.BaseType != EraVMISelAddressMode::RegBase) ||
      AM.Base.Reg.getNode()) {
    // If so, we cannot select it.
    return true;
  }

  if (IsStackAddr &&
      (N->getOpcode() == EraVMISD::SELECT_CC || N->getOpcode() == ISD::UNDEF)) {
    AM.BaseType = EraVMISelAddressMode::StackRegBase;
  }

  // Default, generate it as a register.
  AM.Base.Reg = N;
  return false;
}

bool EraVMDAGToDAGISel::MatchAddress(SDValue N, EraVMISelAddressMode &AM,
                                     bool IsStackAddr) {
  LLVM_DEBUG(errs() << "MatchAddress: "; AM.dump());

  // strip wrapper and match
  if ((IsStackAddr && N.getOpcode() == EraVMISD::GAStack) ||
      (!IsStackAddr && N.getOpcode() == EraVMISD::GACode)) {
    N = N.getOperand(0);
  }

  switch (N.getOpcode()) {
  default: {
    break;
  }
  case ISD::Constant: {
    uint64_t Val = cast<ConstantSDNode>(N)->getSExtValue();
    AM.Disp += Val;
    return false;
  }
  case ISD::FrameIndex: {
    if (!IsStackAddr)
      return true;
    if (IsStackAddr && AM.BaseType == EraVMISelAddressMode::RegBase) {
      AM.BaseType = EraVMISelAddressMode::FrameIndexBase;
      AM.Base.FrameIndex = cast<FrameIndexSDNode>(N)->getIndex();
      return false;
    }
    break;
  }
  case ISD::TargetGlobalAddress: {
    auto *G = cast<GlobalAddressSDNode>(N);
    AM.GV = G->getGlobal();
    AM.Disp += G->getOffset();
    return false;
  }
  case ISD::ADD: {
    EraVMISelAddressMode Backup = AM;
    const SDValue &Operand0 = N.getNode()->getOperand(0);
    const SDValue &Operand1 = N.getNode()->getOperand(1);
    if (!MatchAddress(Operand0, AM, IsStackAddr) &&
        !MatchAddress(Operand1, AM, IsStackAddr))
      return false;
    AM = Backup;
    if (!MatchAddress(Operand1, AM, IsStackAddr) &&
        !MatchAddress(Operand0, AM, IsStackAddr))
      return false;
    AM = Backup;
    if (IsStackAddr)
      AM.BaseType = EraVMISelAddressMode::StackRegBase;
    break;
  }
  case ISD::OR:
    // Handle "X | C" as "X + C" iff X is known to have C bits clear.
    if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(N.getOperand(1))) {
      EraVMISelAddressMode Backup = AM;
      uint64_t Offset = CN->getSExtValue();
      // Start with the LHS as an addr mode.
      if (!MatchAddress(N.getOperand(0), AM, IsStackAddr) &&
          // Address could not have picked a GV address for the displacement.
          AM.GV == nullptr &&
          // Check to see if the LHS & C is zero.
          CurDAG->MaskedValueIsZero(N.getOperand(0), CN->getAPIntValue())) {
        AM.Disp += Offset;
        return false;
      }
      AM = Backup;
    }
    break;
  case ISD::CopyFromReg:
    if (IsStackAddr)
      // The offset is in a register, no frame index involved
      AM.BaseType = EraVMISelAddressMode::StackRegBase;
    break;
  case ISD::AssertZext:
    return MatchAddress(N->getOperand(0), AM, IsStackAddr);
  }
  return MatchAddressBase(N, AM, IsStackAddr);
}

/// SelectMemAddr - returns true if it is able pattern match an addressing mode
/// for heap, parent or child memory. It returns the operands which make up the
/// maximal addressing mode it can match by reference.
bool EraVMDAGToDAGISel::SelectMemAddr(SDValue N, SDValue &Base, SDValue &Disp) {
  EraVMISelAddressMode AM;

  auto Zero = CurDAG->getTargetConstant(0, SDLoc(N), MVT::i256);

  if (MatchAddress(N, AM, false /* IsStackAddr */)) {
    LLVM_DEBUG(errs() << "Failed to match address.");
    return false;
  } else {
    LLVM_DEBUG(errs() << "Matched: "; AM.dump());
  }

  // EraVM doesn't support offsets by unaligned number of bytes, so add
  // the displacement to the base register.
  if (unsigned Unaligned = AM.Disp % 32) {
    if (AM.Base.Reg.getNode()) {
      auto AddToReg =
          CurDAG->getTargetConstant(AM.Disp % 32, SDLoc(N), MVT::i256);
      auto AddrNode = CurDAG->getMachineNode(
          EraVM::ADDirr_s, SDLoc(N), MVT::i256, AM.Base.Reg, AddToReg, Zero);
      AM.Base.Reg = SDValue(AddrNode, 0);
    }
    AM.Disp -= AM.Disp % 32;
  }

  // TODO: CPR-1354 Hack (constant is used to designate immediate addressing
  // mode), redesign.
  assert(AM.BaseType == EraVMISelAddressMode::RegBase);
  if (!AM.Base.Reg.getNode())
    AM.Base.Reg = CurDAG->getTargetConstant(0, SDLoc(N), MVT::i256);

  Base = AM.Base.Reg;

  if (AM.GV)
    Disp = CurDAG->getTargetGlobalAddress(AM.GV, SDLoc(N), MVT::i256, AM.Disp,
                                          0 /*AM.SymbolFlags*/);
  else
    Disp = CurDAG->getTargetConstant(AM.Disp, SDLoc(N), MVT::i64);

  return true;
}

/// SelectStackAddr - returns true if it is able pattern match an addressing
/// mode for stack. It returns the operands which make up the maximal addressing
/// mode it can match by reference.
bool EraVMDAGToDAGISel::SelectStackAddrCommon(SDValue N, SDValue &Base1,
                                              SDValue &Base2, SDValue &Disp,
                                              bool IsAdjusted) {
  EraVMISelAddressMode AM;
  bool UseSP = false;

  if (MatchAddress(N, AM, true /* IsStackAddr */)) {
    AM = EraVMISelAddressMode();
    if (MatchAddress(N, AM, false))
      return false;
  } else {
    UseSP = true;
  }

  // Check if we have relative stack addressing.
  if (UseSP && AM.BaseType == EraVMISelAddressMode::FrameIndexBase) {
    SDValue TFI = CurDAG->getTargetFrameIndex(AM.Base.FrameIndex, MVT::i256);
    if (AM.Base.Reg.getNode()) {
      // Currently we can't use sp + reg + imm addressing mode, so we need to
      // do following address calculation:
      //
      // context.sp sp
      // FRAMEirrr imm, reg, sp, output -> add sp, reg, output
      //                                   sub.s imm, output, output
      //
      // Usually, we would generate FRAMEirr imm, reg, output and expand it to
      // all three instructions, but since register allocator can assign reg and
      // output to the same physical register, we need to emit separately
      // context.sp and FRAMEirrr instructions.
      SDValue CurrentSP = SDValue(
          CurDAG->getMachineNode(
              EraVM::CTXr_se, SDLoc(N), MVT::i256,
              CurDAG->getTargetConstant(EraVMCTX::SP, SDLoc(N), MVT::i256),
              CurDAG->getTargetConstant(EraVMCC::COND_NONE, SDLoc(N),
                                        MVT::i256)),
          0);
      Base2 =
          SDValue(CurDAG->getMachineNode(EraVM::FRAMEirrr, SDLoc(N), MVT::i256,
                                         TFI, AM.Base.Reg, CurrentSP),
                  0);
    } else {
      Base1 = TFI;
    }
  }

  if (!Base1.getNode())
    Base1 = CurDAG->getTargetConstant(0, SDLoc(N), MVT::i256);

  if (!Base2.getNode())
    Base2 = AM.Base.Reg.getNode()
                ? AM.Base.Reg
                : CurDAG->getTargetConstant(0, SDLoc(N), MVT::i256);

  if (AM.GV)
    Disp = CurDAG->getTargetGlobalAddress(AM.GV, SDLoc(N), MVT::i256, AM.Disp,
                                          0 /*AM.SymbolFlags*/);
  else
    Disp = CurDAG->getTargetConstant(AM.Disp, SDLoc(N), MVT::i64);

  return true;
}

bool EraVMDAGToDAGISel::SelectStackAddr(SDValue N, SDValue &Base1,
                                        SDValue &Base2, SDValue &Disp) {
  return SelectStackAddrCommon(N, Base1, Base2, Disp, false);
}

void EraVMDAGToDAGISel::Select(SDNode *Node) {
  SDLoc DL(Node);

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Few custom selection stuff.
  switch (Node->getOpcode()) {
  default:
    break;
  case ISD::Constant: {
    auto cn = cast<ConstantSDNode>(Node);
    auto val = cn->getAPIntValue();

    // if it is loading zero value, just select R0 to save its materialization
    // in another register
    if (val == 0) {
      auto R0 = CurDAG->getRegister(EraVM::R0, MVT::i256);
      ReplaceNode(Node, R0.getNode());
      return;
    }

    // if it is small negative values, use SUB instruction to materialize it
    if (val.isNegative() && val.isSignedIntN(16)) {
      auto negated = -(val.getSExtValue());
      auto Negated_Val = CurDAG->getTargetConstant(negated, DL, MVT::i256);
      auto R0 = CurDAG->getRegister(EraVM::R0, MVT::i256);
      auto SUB = CurDAG->getMachineNode(EraVM::SUBxrr_p, DL, MVT::i256,
                                        SDValue(Negated_Val), R0);
      ReplaceNode(Node, SUB);
      return;
    }

    // if it cannot fit into the imm field of an instruction ... put it into
    // pool
    if (!val.isIntN(16) || val.isNegative()) {
      MVT PtrVT = getTargetLowering()->getPointerTy(CurDAG->getDataLayout());
      SDValue CP =
          CurDAG->getTargetConstantPool(cn->getConstantIntValue(), PtrVT);
      auto lc = CurDAG->getMachineNode(EraVM::LOADCONST, DL, MVT::i256, CP);

      // Annotate the Node with memory operand information so that MachineInstr
      // queries work properly.
      MachineFunction &MF = CurDAG->getMachineFunction();
      MachineMemOperand *MemOp =
          MF.getMachineMemOperand(MachinePointerInfo::getConstantPool(MF),
                                  MachineMemOperand::MOLoad, 32, Align(32));
      CurDAG->setNodeMemRefs(cast<MachineSDNode>(lc), {MemOp});
      ReplaceNode(Node, lc);
      return;
    }
    break;
  }
  case ISD::FrameIndex: {
    assert(Node->getValueType(0) == MVT::i256);
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, MVT::i256);
    if (Node->hasOneUse()) {
      CurDAG->SelectNodeTo(Node, EraVM::ADDframe, MVT::i256, TFI,
                           CurDAG->getTargetConstant(0, DL, MVT::i256));
      return;
    }
    ReplaceNode(Node, CurDAG->getMachineNode(
                          EraVM::ADDframe, DL, MVT::i256, TFI,
                          CurDAG->getTargetConstant(0, DL, MVT::i256)));
    return;
  }
  case ISD::ZERO_EXTEND: {
    MVT outSize = Node->getSimpleValueType(0);
    MVT inSize = Node->getOperand(0)->getSimpleValueType(0);

    if (outSize == inSize) {
      // just ignore the selection of ZERO_EXTEND
      ReplaceNode(Node, Node->getOperand(0).getNode());
      return;
    }
    break;
  }
  case ISD::LOAD: {
    // lower address space 3 loads
    auto ld = cast<LoadSDNode>(Node);
    if (ld->getAddressSpace() == 3) {
      SDValue Chain = ld->getChain();
      SDValue Ptr = ld->getBasePtr();
      auto Zero = CurDAG->getTargetConstant(0, DL, MVT::i256);
      auto LD = CurDAG->getMachineNode(EraVM::LD, DL, ld->getMemoryVT(),
                                       MVT::Other, Ptr, Zero, Chain);
      ReplaceNode(Node, LD);
      return;
    }
    break;
  }
  }

  // Select the default instruction
  SelectCode(Node);
}

/// createEraVMISelDag - This pass converts a legalized DAG into a
/// EraVM-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createEraVMISelDag(EraVMTargetMachine &TM,
                                       CodeGenOpt::Level OptLevel) {
  return new EraVMDAGToDAGISel(TM, OptLevel);
}
//
