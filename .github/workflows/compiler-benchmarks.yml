name: Compiler benchmarking

on:
  pull_request:
  workflow_dispatch:
    inputs:
      llvm_build_type:
        description: "LLVM build type: debug | release"
        required: true
        default: "release"
      compiler_tester_reference_branch:
        description: "compiler-tester branch to use as a benchmark reference"
        required: true
        default: "main"
      compiler_tester_candidate_branch:
        description: "compiler-tester branch to use as a benchmark candidate"
        required: true
        default: "main"
      compiler_llvm_reference_branch:
        description: "compiler-llvm branch to use as a benchmark reference"
        required: true
        default: "dev-15"
      compiler_llvm_candidate_branch:
        description: "compiler-llvm branch to use as a benchmark candidate"
        required: true
        default: "dev-15"
      compiler_llvm_benchmark_mode:
        description: "Mode filter for compiler-llvm benchmarks"
        required: false
        default: "+M^B3"
      compiler_llvm_benchmark_path:
        description: "Path filter for compiler-llvm benchmarks"
        required: false
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  candidate:
    runs-on: [matterlabs-ci-runner]
    container:
      image: matterlabs/llvm_runner:latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: AutoModality/action-clean@v1.1.0
      - name: Setting the environment
        run: |
          echo "LLVM_BUILD_TYPE=${{ github.event.inputs.llvm_build_type || 'release' }}" >> $GITHUB_ENV
          echo "LLVM_BENCHMARK_MODE=${{ github.event.inputs.compiler_llvm_benchmark_mode || '+M^B3' }}" >> $GITHUB_ENV
          echo "LLVM_BENCHMARK_PATH=${{ github.event.inputs.compiler_llvm_benchmark_path || '' }}" >> $GITHUB_ENV
          echo "COMPILER_TESTER_BRANCH_NAME=${{ github.event.inputs.compiler_tester_candidate_branch || 'main' }}" >> $GITHUB_ENV
          echo "COMPILER_LLVM_CANDIDATE_BRANCH_NAME=${{ github.event.inputs.compiler_llvm_candidate_branch }}" >> $GITHUB_ENV

      - name: Checking out the compiler-tester repository
        uses: actions/checkout@v3
        with:
          repository: matter-labs/compiler-tester
          ref: ${{ env.COMPILER_TESTER_BRANCH_NAME }}
          submodules: recursive
          token: ${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}
          path: "compiler-tester"

      - name: Preparing the Docker environment
        run: |
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf ssh://git@github.com/
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf https://github.com/
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf git@github.com:
          apt install -y ninja-build

      - name: Preparing LLVM.lock (pull request)
        if: github.event_name == 'pull_request'
        run: |
          echo "url = \"https://github.com/matter-labs/compiler-llvm\"" >> LLVM.lock
          echo "branch = \"${GITHUB_HEAD_REF}\"" >> LLVM.lock
          mv -fv './LLVM.lock' './compiler-tester/LLVM.lock'

      - name: Preparing LLVM.lock (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "url = \"https://github.com/matter-labs/compiler-llvm\"" >> LLVM.lock
          echo "branch = \"${{ env.COMPILER_LLVM_CANDIDATE_BRANCH_NAME }}\"" >> LLVM.lock
          mv -fv './LLVM.lock' './compiler-tester/LLVM.lock'

      - name: Installing the LLVM manager and building the candidate LLVM framework
        working-directory: compiler-tester
        run: |
          cargo install compiler-llvm-builder
          zkevm-llvm clone

      - name: Building the candidate LLVM framework (debug)
        if: ${{ env.LLVM_BUILD_TYPE == 'debug' }}
        working-directory: compiler-tester
        run: |
          zkevm-llvm build --debug --extra-args '\-DLLVM_ENABLE_WERROR=On'

      - name: Building the candidate LLVM framework (release)
        if: ${{ env.LLVM_BUILD_TYPE == 'release' }}
        working-directory: compiler-tester
        run: |
          zkevm-llvm build --extra-args '\-DLLVM_ENABLE_WERROR=On'

      - name: Benchmarking the candidate LLVM framework
        id: compiler_tester_run
        working-directory: compiler-tester
        run: |          
          export RUST_BACKTRACE='full'
          export LLVM_SYS_150_PREFIX="$(pwd)/target-llvm/target-final/"
          cargo build --verbose --release --bin 'compiler-tester'
          cargo build --verbose --release --manifest-path /usr/local/cargo/git/checkouts/compiler-solidity-*/*/Cargo.toml --target-dir './target-zksolc/'
          cargo build --verbose --release --manifest-path /usr/local/cargo/git/checkouts/compiler-vyper-*/*/Cargo.toml --target-dir './target-zkvyper/'
          
          ./target/release/compiler-tester \
            --zksolc './target-zksolc/release/zksolc' \
            --zkvyper './target-zkvyper/release/zkvyper' \
            --path=${{ env.LLVM_BENCHMARK_PATH || '' }} \
            --mode=${{ env.LLVM_BENCHMARK_MODE || '' }} \
            --benchmark='candidate.json'

      - uses: actions/upload-artifact@v3
        with:
          name: compiler-llvm-candidate-benchmark
          path: compiler-tester/candidate.json

  reference:
    runs-on: [matterlabs-ci-runner]
    container:
      image: matterlabs/llvm_runner:latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: AutoModality/action-clean@v1.1.0
      - name: Setting the environment
        run: |
          echo "LLVM_BUILD_TYPE=${{ github.event.inputs.llvm_build_type || 'release' }}" >> $GITHUB_ENV
          echo "LLVM_BENCHMARK_MODE=${{ github.event.inputs.compiler_llvm_benchmark_mode || '+M^B3' }}" >> $GITHUB_ENV
          echo "LLVM_BENCHMARK_PATH=${{ github.event.inputs.compiler_llvm_benchmark_path || '' }}" >> $GITHUB_ENV
          echo "COMPILER_TESTER_BRANCH_NAME=${{ github.event.inputs.compiler_tester_reference_branch || 'main' }}" >> $GITHUB_ENV
          echo "COMPILER_LLVM_REFERENCE_BRANCH_NAME=${{ github.event.inputs.compiler_llvm_reference_branch }}" >> $GITHUB_ENV

      - name: Checking out the compiler-tester repository
        uses: actions/checkout@v3
        with:
          repository: matter-labs/compiler-tester
          ref: ${{ env.COMPILER_TESTER_BRANCH_NAME }}
          submodules: recursive
          token: ${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}
          path: "compiler-tester"

      - name: Preparing the Docker environment
        run: |
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf ssh://git@github.com/
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf https://github.com/
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf git@github.com:
          apt install -y ninja-build

      - name: Preparing LLVM.lock (pull request)
        if: github.event_name == 'pull_request'
        run: |
          echo "url = \"https://github.com/matter-labs/compiler-llvm\"" >> LLVM.lock
          echo "branch = \"${GITHUB_BASE_REF}\"" >> LLVM.lock
          mv -fv './LLVM.lock' './compiler-tester/LLVM.lock'

      - name: Preparing LLVM.lock (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "url = \"https://github.com/matter-labs/compiler-llvm\"" >> LLVM.lock
          echo "branch = \"${{ env.COMPILER_LLVM_REFERENCE_BRANCH_NAME }}\"" >> LLVM.lock
          mv -fv './LLVM.lock' './compiler-tester/LLVM.lock'

      - name: Installing the LLVM manager and downloading the reference LLVM framework
        working-directory: compiler-tester
        run: |
          cargo install compiler-llvm-builder
          zkevm-llvm clone

      - name: Building the reference LLVM framework (debug)
        if: ${{ env.LLVM_BUILD_TYPE == 'debug' }}
        working-directory: compiler-tester
        run: |
          zkevm-llvm build --debug --extra-args '\-DLLVM_ENABLE_WERROR=On'

      - name: Building the reference LLVM framework (release)
        if: ${{ env.LLVM_BUILD_TYPE == 'release' }}
        working-directory: compiler-tester
        run: |
          zkevm-llvm build --extra-args '\-DLLVM_ENABLE_WERROR=On'

      - name: Benchmarking the reference LLVM framework
        id: compiler_tester_run
        working-directory: compiler-tester
        run: |          
          export RUST_BACKTRACE='full'
          export LLVM_SYS_150_PREFIX="$(pwd)/target-llvm/target-final/"
          cargo build --verbose --release --bin 'compiler-tester'
          cargo build --verbose --release --manifest-path /usr/local/cargo/git/checkouts/compiler-solidity-*/*/Cargo.toml --target-dir './target-zksolc/'
          cargo build --verbose --release --manifest-path /usr/local/cargo/git/checkouts/compiler-vyper-*/*/Cargo.toml --target-dir './target-zkvyper/'
          
          ./target/release/compiler-tester \
            --zksolc './target-zksolc/release/zksolc' \
            --zkvyper './target-zkvyper/release/zkvyper' \
            --path=${{ env.LLVM_BENCHMARK_PATH || '' }} \
            --mode=${{ env.LLVM_BENCHMARK_MODE || '' }} \
            --benchmark='reference.json'

      - uses: actions/upload-artifact@v3
        with:
          name: compiler-llvm-reference-benchmark
          path: compiler-tester/reference.json

  analysis:
    runs-on: [matterlabs-ci-runner]
    container:
      image: matterlabs/llvm_runner:latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    needs: [candidate, reference]
    steps:
      - uses: AutoModality/action-clean@v1.1.0
      - name: Setting the compiler-tester branch depending on current branch (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "COMPILER_TESTER_BRANCH_NAME=main" >> $GITHUB_ENV

      - uses: AutoModality/action-clean@v1.1.0
      - name: Setting the compiler-tester branch from the manual input (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          echo "COMPILER_TESTER_BRANCH_NAME=${{ github.event.inputs.compiler_tester_candidate_branch }}" >> $GITHUB_ENV

      - name: Checking out the compiler-tester repository
        uses: actions/checkout@v3
        with:
          repository: matter-labs/compiler-tester
          ref: ${{ env.COMPILER_TESTER_BRANCH_NAME }}
          submodules: recursive
          token: ${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}
          path: "compiler-tester"

      - name: Preparing the Docker environment
        run: |
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf ssh://git@github.com/
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf https://github.com/
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf git@github.com:
          apt install -y ninja-build

      - uses: actions/download-artifact@v3
        with:
          name: compiler-llvm-candidate-benchmark
          path: compiler-tester

      - uses: actions/download-artifact@v3
        with:
          name: compiler-llvm-reference-benchmark
          path: compiler-tester

      - name: Comparing the LLVM framework benchmark results
        id: compiler_tester_run
        working-directory: compiler-tester
        run: |
          cargo run --release --bin benchmark-analyzer -- --reference 'reference.json' --candidate 'candidate.json' --output-file 'result.txt'
          chown 1000:1000 'result.txt'

      - name: Posting the LLVM benchmark results to the summary
        run: |
          printf "Benchmark results:\n" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat ./compiler-tester/result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat $GITHUB_STEP_SUMMARY > './compiler-tester/result.txt'

      - name: Posting the LLVM benchmark results to a PR comment
        if: github.event_name == 'pull_request'
        uses: machine-learning-apps/pr-comment@master
        env:
          GITHUB_TOKEN: ${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}
        with:
          path: ./compiler-tester/result.txt

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK }} # required
        if: always() # Pick up events even if the job fails or is canceled.
