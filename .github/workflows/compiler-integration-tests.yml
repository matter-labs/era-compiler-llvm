name: Compiler integration testing
env:
  COMPILER_LLVM_DEFAULT_BRANCH_NAME: "dev-15"  # Canâ€™t be used for compiler_llvm_branch popup

on:
  pull_request:
  workflow_dispatch:
    inputs:
      llvm_build_type:
        description: "LLVM build type: debug | release"
        required: true
        default: "release"
      compiler_tester_branch:
        description: "compiler-tester branch"
        required: true
        default: "main"
      compiler_llvm_branch:
        description: "compiler-llvm branch"
        required: true
        default: "dev-15"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  default:
    runs-on: [ self-hosted, ci-runner-compiler ]
    container:
      image: matterlabs/llvm_runner:latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: AutoModality/action-clean@v1.1.0
      - name: Setting the environment
        run: |
          echo "LLVM_BUILD_TYPE=${{ github.event.inputs.llvm_build_type || 'release' }}" >> $GITHUB_ENV
          echo "COMPILER_TESTER_BRANCH_NAME=${{ github.event.inputs.compiler_tester_branch || 'main' }}" >> $GITHUB_ENV
          echo "COMPILER_LLVM_BRANCH_NAME=${{ github.event.inputs.compiler_llvm_branch }}" >> $GITHUB_ENV

      - name: Checking out the compiler-tester repository
        uses: actions/checkout@v3
        with:
          repository: matter-labs/compiler-tester
          ref: ${{ env.COMPILER_TESTER_BRANCH_NAME }}
          submodules: recursive
          token: ${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}
          path: "compiler-tester"

      - name: Preparing the Docker environment
        run: |
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf ssh://git@github.com/
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf https://github.com/
          git config --global --add url."https://${{ secrets.ZKSYNC_ADMIN_BOT_ORG_REPO_WRITE }}:x-oauth-basic@github.com/".insteadOf git@github.com:
          apt update
          apt install -y ninja-build clang-tidy-15

      - name: Preparing LLVM.lock (pull request)
        if: github.event_name == 'pull_request'
        run: |
          echo "url = \"https://github.com/matter-labs/compiler-llvm\"" >> LLVM.lock
          echo "branch = \"${GITHUB_HEAD_REF}\"" >> LLVM.lock
          mv -fv './LLVM.lock' './compiler-tester/LLVM.lock'

      - name: Preparing LLVM.lock (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "url = \"https://github.com/matter-labs/compiler-llvm\"" >> './LLVM.lock'
          echo "branch = \"${{ env.COMPILER_LLVM_BRANCH_NAME }}\"" >> './LLVM.lock'
          mv -fv './LLVM.lock' './compiler-tester/LLVM.lock'

      - name: Installing the LLVM manager and downloading the LLVM framework
        working-directory: compiler-tester
        run: |
          cargo install compiler-llvm-builder
          zkevm-llvm clone

      - name: Building the LLVM framework (debug)
        if: ${{ env.LLVM_BUILD_TYPE == 'debug' }}
        working-directory: compiler-tester
        run: |
          zkevm-llvm build --debug --enable-tests --extra-args '\-DLLVM_ENABLE_WERROR=On'  '\-DCMAKE_EXPORT_COMPILE_COMMANDS=ON'

      - name: Building the LLVM framework (release)
        if: ${{ env.LLVM_BUILD_TYPE == 'release' }}
        working-directory: compiler-tester
        run: |
          zkevm-llvm build --enable-tests --extra-args '\-DLLVM_ENABLE_WERROR=On'   '\-DCMAKE_EXPORT_COMPILE_COMMANDS=ON'

      - name: Checking with clang-tidy-diff.py
        shell: bash
        working-directory: compiler-tester/llvm
        run: |
          pwd
          echo $SHELL
          $SHELL --version
          clang-tidy-15  --version
          git status
          git branch
          set -euxo pipefail
          git diff -U0 remotes/origin/${{ env.COMPILER_LLVM_DEFAULT_BRANCH_NAME }} | ./clang-tools-extra/clang-tidy/tool/clang-tidy-diff_Zegar.py -p1 -clang-tidy-binary /usr/bin/clang-tidy-15   -path ../target-llvm/build-final/compile_commands.json

      - name: Running Lit tests with default options
        working-directory: compiler-tester
        run: |
          ninja -C './target-llvm/build-final' check-llvm

      - name: Running Lit EraVM tests with llc verification options
        working-directory: compiler-tester
        env:
          LLC_OPTS:
            "--cgp-verify-bfi-updates \
            --compile-twice \
            --earlycse-debug-hash \
            --loop-distribute-verify \
            --machine-combiner-verify-pattern-order \
            --phicse-debug-hash \
            --reassociate-geps-verify-no-dead-code \
            --safepoint-ir-verifier-print-only \
            --scev-verify-ir \
            --tail-dup-verify \
            --unroll-verify-domtree \
            --verify-regalloc \
            --vplan-verify-hcfg \
            --march=eravm"
          XFAILS:
            "CodeGen/EraVM/memcpy-expansion.ll;\
             CodeGen/EraVM/flag-setting-set-implicit-flags.ll;\
             CodeGen/EraVM/machine-outliner.mir;\
             CodeGen/EraVM/machine-outliner-tail.mir;\
             CodeGen/EraVM/select_fold.mir"

        run: |
          BINDIR=$(target-llvm/build-final/bin/llvm-config --bindir)
          ./target-llvm/build-final/bin/llvm-lit -vv -s --xfail "${XFAILS}" "-Dllc=${BINDIR}/llc ${LLC_OPTS}" './llvm/llvm/test/CodeGen/EraVM/'

      - name: Running Lit tests with opt verification options
        working-directory: compiler-tester
        env:
          OPT_OPTS:
            "--cgp-verify-bfi-updates \
            --earlycse-debug-hash \
            --loop-distribute-verify \
            --machine-combiner-verify-pattern-order \
            --phicse-debug-hash \
            --scev-verify-ir \
            --tail-dup-verify \
            --unroll-verify-domtree \
            --verify-assumption-cache \
            --verify-cfg-preserved \
            --verify-cfiinstrs \
            --verify-coalescing \
            --verify-dom-info \
            --verify-loop-info \
            --verify-loop-lcssa \
            --verify-machine-dom-info \
            --verify-machineinstrs \
            --verify-memoryssa \
            --verify-misched \
            --verify-regalloc \
            --verify-scev-strict \
            --vplan-verify-hcfg \
            --march=eravm"
          XFAILS:
            "Transforms/LoopVectorize/vplan_hcfg_stress_test.ll;\
            Transforms/LoopFlatten/widen-iv2.ll;\
            Transforms/LoopFusion/simple.ll"
        run: |
          BINDIR=$(target-llvm/build-final/bin/llvm-config --bindir)
          ./target-llvm/build-final/bin/llvm-lit -vv -s --xfail "${XFAILS}" "-Dopt=${BINDIR}/opt ${OPT_OPTS}" './llvm/llvm/test/CodeGen/'

      - name: Building and running the compiler tester
        id: compiler_tester_run
        working-directory: compiler-tester
        run: |
          export RUST_BACKTRACE='full'
          export LLVM_SYS_150_PREFIX="$(pwd)/target-llvm/target-final/"
          cargo build --verbose --release --bin 'compiler-tester'
          cargo build --verbose --release --manifest-path /usr/local/cargo/git/checkouts/compiler-solidity-*/*/Cargo.toml --target-dir './target-zksolc/'
          cargo build --verbose --release --manifest-path /usr/local/cargo/git/checkouts/compiler-vyper-*/*/Cargo.toml --target-dir './target-zkvyper/'

          ./target/release/compiler-tester \
            --zksolc './target-zksolc/release/zksolc' \
            --zkvyper './target-zkvyper/release/zkvyper' \
            --mode=${{ env.COMPILER_TESTER_MODE }}

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK }} # required
        if: always() # Pick up events even if the job fails or is canceled.
