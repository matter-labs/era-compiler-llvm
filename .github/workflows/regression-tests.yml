name: Regression tests

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      commits-to-test:
        description: "Number of commits to test"
        required: true
        default: '1'

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.repository_id }}-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  prepare-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare.outputs.matrix }}
      fetch_depth: ${{ steps.extract_branch.outputs.fetch_depth }}

    steps:

      - name: Extract branch name
        id: extract_branch
        run: |
          echo "head_ref=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" | tee -a "${GITHUB_OUTPUT}"
          echo "base_ref=${{ github.base_ref || github.event.repository.default_branch }}" | tee -a "${GITHUB_OUTPUT}"
          echo "fetch_depth=$(( ${{ github.event.pull_request.commits || github.event.inputs.commits-to-test }} + 1 ))" | tee -a "${GITHUB_OUTPUT}"

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.extract_branch.outputs.head_ref }}
          fetch-depth: ${{ github.event.pull_request.commits || github.event.inputs.commits-to-test }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Prepare commits
        id: prepare
        env:
          TEST_COMMITS_LIMIT: 25 # Limit the number of commits to test
        run: |
          COMMITS_TO_TEST=$(git log -n ${{ github.event.pull_request.commits || github.event.inputs.commits-to-test }} --pretty='"%H"' | head -n ${TEST_COMMITS_LIMIT})
          echo "matrix={ \"commit\": [${COMMITS_TO_TEST//$'\n'/, }] }" | tee -a "${GITHUB_OUTPUT}"

  check-formatting:
    if: github.event_name == 'pull_request'
    runs-on: ci-runner-compiler
    container:
      image: matterlabs/llvm_runner:ubuntu22-llvm17-latest
      options: -m 110g
    needs: prepare-test-matrix
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJson(needs.prepare-test-matrix.outputs.matrix) }}
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.commit }}
          fetch-depth: ${{ needs.prepare-test-matrix.outputs.fetch_depth }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v39
        with:
          separator: ","
          sha: ${{ matrix.commit }}
          base_sha: ${{ github.event.pull_request.base.sha }}

      - name: Install formatting requirements
        run: python3 -m pip install -r ./llvm/utils/git/requirements_formatting_era_llvm.txt

      - name: Run code formatter
        run: |
          set -x
          if [ '${{ github.event.pull_request.head.repo.fork }}' = 'true' ]; then
            TOKEN_PARAM=""
          else
            TOKEN_PARAM="--token ${{ secrets.GITHUB_TOKEN }}"
          fi
          python3 ./llvm/utils/git/code-format-helper-era-llvm.py ${TOKEN_PARAM} \
            --issue-number ${{ github.event.pull_request.number }} \
            --start-rev ${{ github.event.pull_request.base.sha }} \
            --end-rev ${{ matrix.commit }} \
            --changed-files ${{ steps.changed-files.outputs.all_changed_files }}

  regression-tests:
    runs-on: ci-runner-compiler
    container:
      image: matterlabs/llvm_runner:ubuntu22-llvm17-latest
      options: -m 110g
    needs: prepare-test-matrix
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJson(needs.prepare-test-matrix.outputs.matrix) }}
    steps:

      - uses: actions/checkout@v4
        with:
          ref: ${{ matrix.commit }}
          path: "llvm"
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Build LLVM
        uses: matter-labs/era-compiler-ci/.github/actions/build-llvm@v1
        with:
          extra-args: "\\-DLLVM_ENABLE_WERROR=On \\-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
          enable-tests: true
          enable-assertions: true
          clone-llvm: false
          ccache-key-type: 'static' # rotate ccache key every month

      # `verify-llvm` is a special target that runs all the regression tests
      # it includes `check-llvm` and special codegen tests
      # called via `verify-llvm-codegen-opt` and `verify-llvm-codegen-llc` targets
      - name: Running Lit tests
        run: ninja -C './target-llvm/build-final' verify-llvm -v

      - name: clang-tidy
        if: github.event_name == 'pull_request'
        working-directory: llvm
        run: |
          git fetch --progress --depth=1 origin \
            "+refs/heads/${{ github.event.pull_request.base.ref }}:refs/heads/${{ github.event.pull_request.base.ref }}"
          CHANGES=$(git diff -U0 ${{ github.event.pull_request.base.sha }})
          echo "Running clang-tidy on the following changes: ${CHANGES}"
          echo "${CHANGES}" | \
             ./clang-tools-extra/clang-tidy/tool/clang-tidy-diff_Zegar.py \
              -p1 -clang-tidy-binary $(which clang-tidy) \
              -path ../target-llvm/build-final/compile_commands.json
