name: LLVM testing

on:
  pull_request:
    branches:
        - main
  workflow_dispatch:
    inputs:
      llvm_build_type:
        description: 'Write llvm build type. Variables: release, debug'
        required: true
        default: 'release'
      use_build_cache:
        description: "Use llvm release build cache (debug build haven't cache). Variables: true, false"
        required: true
        default: 'true'

jobs:
  llvm_testing:
    runs-on: [self-hosted, CI-worker]
    steps:
    - uses: AutoModality/action-clean@v1.1.0
    - uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PK_BOT }}
    - name: Preparing workspace. Setting environment.
      run: |
        echo "COMPOSE_FILE=${{github.workspace}}/compiler-llvm/infra/docker-compose.yml" >> $GITHUB_ENV
        echo "COMPOSE_PROJECT_NAME=llvm_testing" >> $GITHUB_ENV
        echo "DOCKER_CMD=docker-compose exec -T zk" >> $GITHUB_ENV
        echo "LLVM_BUILD_TYPE=${{ github.event.inputs.llvm_build_type || 'release'}}" >> $GITHUB_ENV
        echo "USE_BUILD_CACHE=${{ github.event.inputs.use_build_cache || 'true'}}" >> $GITHUB_ENV

    - name: Preparing workspace. Checkout compiler-tester repository.
      uses: actions/checkout@v2
      with:
        repository: matter-labs/compiler-tester
        submodules: recursive
        token: ${{ secrets.COMPILER_TESTER_ACCESS_TOKEN }}
        path: 'compiler-tester'

    - name: Preparing workspace. Checkout compiler-llvm repository.
      uses: actions/checkout@v2
      with:
        path: compiler-llvm

    - name: Preparing workspace. Start docker.
      run: |
        docker-compose pull
        docker-compose up -d zk
      env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_PK_BOT}}

    - name: Preparing workspace. Setting docker ssh key.
      run: |
        ${DOCKER_CMD} sh -c 'mkdir -pv /root/.ssh'
        ${DOCKER_CMD} sh -c 'echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa'
        ${DOCKER_CMD} sh -c 'chmod 400 /root/.ssh/id_rsa'
        ${DOCKER_CMD} sh -c 'touch /root/.ssh/known_hosts'
        ${DOCKER_CMD} sh -c 'ssh-keyscan github.com >> /root/.ssh/known_hosts'

    - name: Preparing workspace. Getting llvm release build cache.
      if: ${{ (env.LLVM_BUILD_TYPE == 'release') && (env.USE_BUILD_CACHE == 'true') }}
      run: cp -R ~/llvm_build_${LLVM_BUILD_TYPE}_cache ${{github.workspace}}/compiler-llvm/build-${LLVM_BUILD_TYPE}

    - name: Testing. Building LLVM framework.
      run: |
        chmod +x compiler-llvm/build.sh
        ${DOCKER_CMD} sh -c "cd compiler-llvm && ./build.sh ${LLVM_BUILD_TYPE}"

    - name: Testing. Running regression LLVM tests.
      run: ${DOCKER_CMD} sh -c "
        cd compiler-llvm/build-${LLVM_BUILD_TYPE} &&
        make -j24 check-llvm-codegen-syncvm"

    - name: Testing. Building and running compiler tester.
      id: compiler_tester_run
      run: ${DOCKER_CMD} sh -c "cd compiler-tester && ./run.sh info ${LLVM_BUILD_TYPE}"

    - name: Testing. Running segfault.sh.
      if: always() && steps.compiler_tester_run.outcome == 'failure'
      run: ${DOCKER_CMD} sh -c "cd compiler-tester && ./segfault.sh"

    - name: Notify to Mattermost (on unsuccessful deploys)
      if: failure() || cancelled()
      uses: tferreira/matterfy@releases/v1
      with:
        type: ${{ job.status }}
        job_name: '*LLVM testing is failed*'
        icon_emoji: octocat
        channel: 'compiler-llvm-ci'
        url: ${{ secrets.MATTERMOST_WEBHOOK }}

    - name: Clearing workspace. Removing used and trash docker images.
      if: always()
      run: |
        # Removing trash images. This command isn't remove pulled work image.
        docker image prune -f --all
        docker-compose down --rmi local -v
